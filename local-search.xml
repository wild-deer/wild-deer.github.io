<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>回调函数</title>
    <link href="/2022/10/08/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <url>/2022/10/08/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<center>回调函数的使用</center><!--- more ---><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    func= <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setguidfunc</span>(<span class="hljs-params">self, func</span>):<br>        self.func = func<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">event</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.func <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">else</span>:<br>            self.func(<span class="hljs-string">&quot;test&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">publish</span>(<span class="hljs-params">self, param</span>):<br>        <span class="hljs-built_in">print</span>(param)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">para</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>, para)<br><br><br>test = Test()<br>test.setguidfunc(myfunc)<br>test.event()<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Hello test<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>回调函数</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE添加LOD</title>
    <link href="/2022/09/19/UE%E6%B7%BB%E5%8A%A0LOD/"/>
    <url>/2022/09/19/UE%E6%B7%BB%E5%8A%A0LOD/</url>
    
    <content type="html"><![CDATA[<center>UE使用LOD</center><!--- more --->]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>LOD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE材质参数</title>
    <link href="/2022/09/19/UE%E8%93%9D%E5%9B%BE%E6%8E%A7%E5%88%B6%E6%9D%90%E8%B4%A8/"/>
    <url>/2022/09/19/UE%E8%93%9D%E5%9B%BE%E6%8E%A7%E5%88%B6%E6%9D%90%E8%B4%A8/</url>
    
    <content type="html"><![CDATA[<center>在蓝图中通过材质参数控制材质</center><!--- more ---><p>通过Set Scalar Parameter Value设置材质函数，可以使用曲线</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220919150856971.png" alt="image-20220919150856971"></p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>材质参数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker配置</title>
    <link href="/2022/09/02/docker%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/09/02/docker%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<center>docker配置</center><!--- more ---><h2 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h2><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><p><a href="https://cloud.tencent.com/developer/article/1167995#:~:text=%E5%A6%82%E4%BD%95%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Docker%201%20%E4%BB%8B%E7%BB%8D%202%20%E5%87%86%E5%A4%87%203%20%E7%AC%AC1%E6%AD%A5%20-,7%20%E7%AC%AC5%E6%AD%A5%20-%20%E8%BF%90%E8%A1%8CDocker%E5%AE%B9%E5%99%A8.%E6%88%91%E4%BB%AC%E5%AE%89%E8%A3%85Node....%208%20%E7%AC%AC6%E6%AD%A5%20-%20%E7%AE%A1%E7%90%86Docker%E5%AE%B9%E5%99%A8.">安装教程连接</a></p><h3 id="docker拉取python镜像"><a href="#docker拉取python镜像" class="headerlink" title="docker拉取python镜像"></a>docker拉取python镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ docker pull python:3.9.13-slim-buster<br></code></pre></td></tr></table></figure><h3 id="docker生成并运行容器"><a href="#docker生成并运行容器" class="headerlink" title="docker生成并运行容器"></a>docker生成并运行容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ sudo docker run --<span class="hljs-built_in">rm</span> -it --device /dev/ttyS1:/dev/ttyS0 python:3.9.13-slim-buster /bin/sh<br><span class="hljs-comment">#</span><br><span class="hljs-comment">#cd root</span><br><span class="hljs-comment">#mkdir pythonProject</span><br><span class="hljs-comment">#cd pythonProject</span><br></code></pre></td></tr></table></figure><p>其中ttyS1为虚拟机中的串口，ttyS0为docker中映射的串口，执行上面的第一条命令之后，容器中才会出现ttyS0串口。进入docker容器命令行之后创建存放项目的文件夹pythonProject</p><h3 id="将主机中文件复制到docker中指定目录"><a href="#将主机中文件复制到docker中指定目录" class="headerlink" title="将主机中文件复制到docker中指定目录"></a>将主机中文件复制到docker中指定目录</h3><p>再打开一个终端，在终端中执行下面命令，将写好的pymodbus.py文件复制到docker容器中，其中sharp_faraday为容器名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ sudo docker <span class="hljs-built_in">cp</span> /home/jeremy/Desktop/pymodbus.py sharp_faraday:/root/pythonProject<br></code></pre></td></tr></table></figure><p>回到docker命令终端，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#pip install serial -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="hljs-comment">#pip install modbus_tk -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="hljs-comment">#python3 pymodbus.py</span><br></code></pre></td></tr></table></figure><h3 id="将处理好的容器导出"><a href="#将处理好的容器导出" class="headerlink" title="将处理好的容器导出"></a>将处理好的容器导出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ sudo docker <span class="hljs-built_in">export</span> sharp_faraday &gt; /home/jeremy/Desktop/pythonSlim.tar<br></code></pre></td></tr></table></figure><p>其中sharp_faraday为容器名，<code>&gt;</code>后为容器导出路径和文件名</p><h3 id="导入容器"><a href="#导入容器" class="headerlink" title="导入容器"></a>导入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysadm@SCT230A:~$ docker import /home/sysadm/test/docker/pythonSlim.tar python:v1<br></code></pre></td></tr></table></figure><h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><h3 id="docker镜像迁移"><a href="#docker镜像迁移" class="headerlink" title="docker镜像迁移"></a>docker镜像迁移</h3><ul><li>从目标机器导出镜像到指定目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysadm@SCT230A:~$ docker save 2f31a3feab4e &gt; /home/sysadm/test/docker/img.tar<br></code></pre></td></tr></table></figure><ul><li>在windows上重新加载镜像</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span> D:\&gt; docker load &lt; D:\img.tar<br></code></pre></td></tr></table></figure><ul><li>重命名镜像，给id为<code>2f31a3feab4e</code>的镜像重命名为1base_img:1.0</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span> D:\&gt; docker tag <span class="hljs-number">2</span>f31a3feab4e base_img:<span class="hljs-number">1.0</span><br></code></pre></td></tr></table></figure><h3 id="docker使用"><a href="#docker使用" class="headerlink" title="docker使用"></a>docker使用</h3><ul><li>生成容器并启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ docker run -it nginx:latest /bin/bash<br></code></pre></td></tr></table></figure><p><a href="https://cloud.tencent.com/developer/article/1633272">生成容器</a></p><h3 id="查看docker的版本"><a href="#查看docker的版本" class="headerlink" title="查看docker的版本"></a>查看docker的版本</h3>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/09/02/docker/"/>
    <url>/2022/09/02/docker/</url>
    
    <content type="html"><![CDATA[<center>docker配置</center><!--- more ---><h2 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h2><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><p><a href="https://cloud.tencent.com/developer/article/1167995#:~:text=%E5%A6%82%E4%BD%95%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Docker%201%20%E4%BB%8B%E7%BB%8D%202%20%E5%87%86%E5%A4%87%203%20%E7%AC%AC1%E6%AD%A5%20-,7%20%E7%AC%AC5%E6%AD%A5%20-%20%E8%BF%90%E8%A1%8CDocker%E5%AE%B9%E5%99%A8.%E6%88%91%E4%BB%AC%E5%AE%89%E8%A3%85Node....%208%20%E7%AC%AC6%E6%AD%A5%20-%20%E7%AE%A1%E7%90%86Docker%E5%AE%B9%E5%99%A8.">安装教程连接</a></p><h3 id="docker拉取python镜像"><a href="#docker拉取python镜像" class="headerlink" title="docker拉取python镜像"></a>docker拉取python镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ docker pull python:3.9.13-slim-buster<br></code></pre></td></tr></table></figure><h3 id="docker生成并运行容器"><a href="#docker生成并运行容器" class="headerlink" title="docker生成并运行容器"></a>docker生成并运行容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ sudo docker run --<span class="hljs-built_in">rm</span> -it --device /dev/ttyS1:/dev/ttyS0 python:3.9.13-slim-buster /bin/sh<br><span class="hljs-comment">#</span><br><span class="hljs-comment">#cd root</span><br><span class="hljs-comment">#mkdir pythonProject</span><br><span class="hljs-comment">#cd pythonProject</span><br></code></pre></td></tr></table></figure><p>其中ttyS1为虚拟机中的串口，ttyS0为docker中映射的串口，执行上面的第一条命令之后，容器中才会出现ttyS0串口。进入docker容器命令行之后创建存放项目的文件夹pythonProject</p><h3 id="将主机中文件复制到docker中指定目录"><a href="#将主机中文件复制到docker中指定目录" class="headerlink" title="将主机中文件复制到docker中指定目录"></a>将主机中文件复制到docker中指定目录</h3><p>再打开一个终端，在终端中执行下面命令，将写好的pymodbus.py文件复制到docker容器中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ sudo docker <span class="hljs-built_in">cp</span> /home/jeremy/Desktop/pymodbus.py sharp_faraday:/root/pythonProject<br></code></pre></td></tr></table></figure><p>回到docker命令终端，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#pip install serial -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="hljs-comment">#pip install modbus_tk -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="hljs-comment">#python3 pymodbus.py</span><br></code></pre></td></tr></table></figure><h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><h3 id="docker镜像迁移"><a href="#docker镜像迁移" class="headerlink" title="docker镜像迁移"></a>docker镜像迁移</h3><ul><li>从目标机器导出镜像到指定目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysadm@SCT230A:~$ docker save 2f31a3feab4e &gt; /home/sysadm/test/docker/img.tar<br></code></pre></td></tr></table></figure><ul><li>在windows上重新加载镜像</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span> D:\&gt; docker load &lt; D:\img.tar<br></code></pre></td></tr></table></figure><ul><li>重命名镜像，给id为<code>2f31a3feab4e</code>的镜像重命名为1base_img:1.0</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span> D:\&gt; docker tag <span class="hljs-number">2</span>f31a3feab4e base_img:<span class="hljs-number">1.0</span><br></code></pre></td></tr></table></figure><h3 id="docker使用"><a href="#docker使用" class="headerlink" title="docker使用"></a>docker使用</h3><ul><li>生成容器并启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ docker run -it nginx:latest /bin/bash<br></code></pre></td></tr></table></figure><p><a href="https://cloud.tencent.com/developer/article/1633272">生成容器</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在虚拟机中使用串口</title>
    <link href="/2022/09/01/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%B2%E5%8F%A3%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/09/01/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%B2%E5%8F%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<center>在虚拟机中使用串口</center><!--- more ---><h3 id="给串口赋予相关权限"><a href="#给串口赋予相关权限" class="headerlink" title="给串口赋予相关权限"></a>给串口赋予相关权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:~$ sudo <span class="hljs-built_in">chmod</span> 777 /dev/ttyS1<br></code></pre></td></tr></table></figure><h3 id="串口调试助手"><a href="#串口调试助手" class="headerlink" title="串口调试助手"></a>串口调试助手</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ cutecom<br></code></pre></td></tr></table></figure><p>可以正常使用串口</p>]]></content>
    
    
    
    <tags>
      
      <tag>串口</tag>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CesiumLab切片测试</title>
    <link href="/2022/08/24/CesiumLab%E5%88%87%E7%89%87%E6%B5%8B%E8%AF%95/"/>
    <url>/2022/08/24/CesiumLab%E5%88%87%E7%89%87%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<center>经纬度表</center><!--- more ---><h3 id="1-测试准备"><a href="#1-测试准备" class="headerlink" title="1.测试准备"></a>1.测试准备</h3><p>准备四个FBX文件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220824120001297.png" alt="image-20220824120001297"></p><p>在cesiumlab通用模型切片中，改变八叉树处理器的设置，观察模型的变化</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220824120254560.png" alt="image-20220824120254560"></p><h3 id="2-cesiumlab模型切片"><a href="#2-cesiumlab模型切片" class="headerlink" title="2.cesiumlab模型切片"></a>2.cesiumlab模型切片</h3><ul><li>设置1</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220824122725587.png" alt="image-20220824122725587"></p><table><thead><tr><th>名称</th><th>编号</th></tr></thead><tbody><tr><td>台账.FBX</td><td>1</td></tr><tr><td>35kv.FBX</td><td></td></tr><tr><td>非台账.FBX</td><td></td></tr><tr><td>附属小品.FBX</td><td></td></tr><tr><td>建筑地面.FBX</td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>CesiumLab</tag>
      
      <tag>UE5</tag>
      
      <tag>Cesium</tag>
      
      <tag>FBX</tag>
      
      <tag>切片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>modbus设备</title>
    <link href="/2022/08/24/modbus%E8%AE%BE%E5%A4%87/"/>
    <url>/2022/08/24/modbus%E8%AE%BE%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<center>Modbus设备配置</center><!--- more ---><h3 id="1-开关控制设备"><a href="#1-开关控制设备" class="headerlink" title="1.开关控制设备"></a>1.开关控制设备</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220825131008754.png" alt="image-20220825131008754"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220825140411352.png" alt="image-20220825140411352"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220825140428225.png" alt="image-20220825140428225"></p><h3 id="2-电表"><a href="#2-电表" class="headerlink" title="2.电表"></a>2.电表</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220825144255403.png" alt="image-20220825144255403"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220825144309278.png" alt="image-20220825144309278"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220825144322273.png" alt="image-20220825144322273"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220825144711301.png" alt="image-20220825144711301"></p><p>其中第一位为电表id</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220825144720125.png" alt="互感器变比"></p><h3 id="3-无线采集中继器"><a href="#3-无线采集中继器" class="headerlink" title="3.无线采集中继器"></a>3.无线采集中继器</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220825145255638.png" alt="image-20220825145255638"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220825145308977.png" alt="image-20220825145308977"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220825145334737.png" alt="image-20220825145334737"></p><h3 id="开发配置表格"><a href="#开发配置表格" class="headerlink" title="开发配置表格"></a>开发配置表格</h3><p>需要有两个表格，</p><p>一个用来存放除传感器之外的设备:</p><p>比如1-10号地址为开关，11-20为传感器发送设备</p><p>另一个用来存放传感器设备</p>]]></content>
    
    
    
    <tags>
      
      <tag>modbus</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全国城市经纬度</title>
    <link href="/2022/08/24/%E5%85%A8%E5%9B%BD%E5%9F%8E%E5%B8%82%E7%BB%8F%E7%BA%AC%E5%BA%A6/"/>
    <url>/2022/08/24/%E5%85%A8%E5%9B%BD%E5%9F%8E%E5%B8%82%E7%BB%8F%E7%BA%AC%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<center>经纬度表</center><!--- more ---><table><thead><tr><th align="left">线级</th><th align="left">省份</th><th align="left">城市</th><th align="left">纬度</th><th align="left">经度</th></tr></thead><tbody><tr><td align="left">重要</td><td align="left">上海</td><td align="left">上海市</td><td align="left">31.24916171</td><td align="left">121.487899486</td></tr><tr><td align="left">重要</td><td align="left">北京</td><td align="left">北京市</td><td align="left">39.90733345</td><td align="left">116.391244079988</td></tr><tr><td align="left">重要</td><td align="left">广东省</td><td align="left">广州市</td><td align="left">23.1200491021</td><td align="left">113.307649675</td></tr><tr><td align="left">重要</td><td align="left">广东省</td><td align="left">深圳市</td><td align="left">22.5460535462</td><td align="left">114.025973657</td></tr><tr><td align="left">一线</td><td align="left">四川省</td><td align="left">成都市</td><td align="left">30.6799428454</td><td align="left">104.067923463</td></tr><tr><td align="left">一线</td><td align="left">天津</td><td align="left">天津市</td><td align="left">39.1439299033</td><td align="left">117.210813092</td></tr><tr><td align="left">一线</td><td align="left">山东省</td><td align="left">青岛市</td><td align="left">36.1052149013</td><td align="left">120.384428184</td></tr><tr><td align="left">一线</td><td align="left">广东省</td><td align="left">东莞市</td><td align="left">23.0430238154</td><td align="left">113.763433991</td></tr><tr><td align="left">一线</td><td align="left">江苏省</td><td align="left">南京市</td><td align="left">32.0572355018</td><td align="left">118.778074408</td></tr><tr><td align="left">一线</td><td align="left">江苏省</td><td align="left">苏州市</td><td align="left">31.317987368</td><td align="left">120.619907115</td></tr><tr><td align="left">一线</td><td align="left">河南省</td><td align="left">郑州市</td><td align="left">34.7566100641</td><td align="left">113.64964385</td></tr><tr><td align="left">一线</td><td align="left">浙江省</td><td align="left">宁波市</td><td align="left">29.8852589659</td><td align="left">121.579005973</td></tr><tr><td align="left">一线</td><td align="left">浙江省</td><td align="left">杭州市</td><td align="left">30.2592444615</td><td align="left">120.219375416</td></tr><tr><td align="left">一线</td><td align="left">湖北省</td><td align="left">武汉市</td><td align="left">30.5810841269</td><td align="left">114.316200103</td></tr><tr><td align="left">一线</td><td align="left">湖南省</td><td align="left">长沙市</td><td align="left">28.2134782309</td><td align="left">112.979352788</td></tr><tr><td align="left">一线</td><td align="left">辽宁省</td><td align="left">大连市</td><td align="left">38.9487099383</td><td align="left">121.593477781</td></tr><tr><td align="left">一线</td><td align="left">辽宁省</td><td align="left">沈阳市</td><td align="left">41.8086447835</td><td align="left">123.432790922</td></tr><tr><td align="left">一线</td><td align="left">重庆</td><td align="left">重庆市</td><td align="left">29.5446061089</td><td align="left">106.530635013</td></tr><tr><td align="left">一线</td><td align="left">陕西省</td><td align="left">西安市</td><td align="left">34.2777998978</td><td align="left">108.953098279</td></tr><tr><td align="left">二线</td><td align="left">云南省</td><td align="left">昆明市</td><td align="left">25.0491531005</td><td align="left">102.714601139</td></tr><tr><td align="left">二线</td><td align="left">吉林省</td><td align="left">长春市</td><td align="left">43.8983376071</td><td align="left">125.313642427</td></tr><tr><td align="left">二线</td><td align="left">安徽省</td><td align="left">合肥市</td><td align="left">31.8669422607</td><td align="left">117.282699092</td></tr><tr><td align="left">二线</td><td align="left">山东省</td><td align="left">济南市</td><td align="left">36.6827847272</td><td align="left">117.024967066</td></tr><tr><td align="left">二线</td><td align="left">山东省</td><td align="left">烟台市</td><td align="left">37.5365615629</td><td align="left">121.30955503</td></tr><tr><td align="left">二线</td><td align="left">山西省</td><td align="left">太原市</td><td align="left">37.890277054</td><td align="left">112.550863589</td></tr><tr><td align="left">二线</td><td align="left">广东省</td><td align="left">中山市</td><td align="left">22.5451775145</td><td align="left">113.422060021</td></tr><tr><td align="left">二线</td><td align="left">广东省</td><td align="left">佛山市</td><td align="left">23.0350948405</td><td align="left">113.134025635</td></tr><tr><td align="left">二线</td><td align="left">广东省</td><td align="left">惠州市</td><td align="left">23.1135398524</td><td align="left">114.41065808</td></tr><tr><td align="left">二线</td><td align="left">广东省</td><td align="left">珠海市</td><td align="left">22.2569146461</td><td align="left">113.562447026</td></tr><tr><td align="left">二线</td><td align="left">广西壮族自治区</td><td align="left">南宁市</td><td align="left">22.8064929356</td><td align="left">108.297233556</td></tr><tr><td align="left">二线</td><td align="left">新疆维吾尔自治区</td><td align="left">乌鲁木齐市</td><td align="left">43.8403803472</td><td align="left">87.5649877411</td></tr><tr><td align="left">二线</td><td align="left">江苏省</td><td align="left">南通市</td><td align="left">32.0146645408</td><td align="left">120.873800951</td></tr><tr><td align="left">二线</td><td align="left">江苏省</td><td align="left">常州市</td><td align="left">31.7713967447</td><td align="left">119.981861013</td></tr><tr><td align="left">二线</td><td align="left">江苏省</td><td align="left">徐州市</td><td align="left">34.2715534311</td><td align="left">117.188106623</td></tr><tr><td align="left">二线</td><td align="left">江苏省</td><td align="left">无锡市</td><td align="left">31.5700374519</td><td align="left">120.305455901</td></tr><tr><td align="left">二线</td><td align="left">江西省</td><td align="left">南昌市</td><td align="left">28.6895780001</td><td align="left">115.893527546</td></tr><tr><td align="left">二线</td><td align="left">河北省</td><td align="left">石家庄市</td><td align="left">38.0489583146</td><td align="left">114.522081844</td></tr><tr><td align="left">二线</td><td align="left">浙江省</td><td align="left">台州市</td><td align="left">28.6682832857</td><td align="left">121.440612936</td></tr><tr><td align="left">二线</td><td align="left">浙江省</td><td align="left">嘉兴市</td><td align="left">30.7739922396</td><td align="left">120.760427699</td></tr><tr><td align="left">二线</td><td align="left">浙江省</td><td align="left">温州市</td><td align="left">28.002837594</td><td align="left">120.690634734</td></tr><tr><td align="left">二线</td><td align="left">浙江省</td><td align="left">绍兴市</td><td align="left">30.0023645805</td><td align="left">120.592467386</td></tr><tr><td align="left">二线</td><td align="left">浙江省</td><td align="left">金华市</td><td align="left">29.1028991054</td><td align="left">119.652575704</td></tr><tr><td align="left">二线</td><td align="left">海南省</td><td align="left">海口市</td><td align="left">20.022071277</td><td align="left">110.330801848</td></tr><tr><td align="left">二线</td><td align="left">甘肃省</td><td align="left">兰州市</td><td align="left">36.064225525</td><td align="left">103.823305441</td></tr><tr><td align="left">二线</td><td align="left">福建省</td><td align="left">厦门市</td><td align="left">24.4892306125</td><td align="left">118.103886046</td></tr><tr><td align="left">二线</td><td align="left">福建省</td><td align="left">泉州市</td><td align="left">24.901652384</td><td align="left">118.600362343</td></tr><tr><td align="left">二线</td><td align="left">福建省</td><td align="left">福州市</td><td align="left">26.0471254966</td><td align="left">119.330221107</td></tr><tr><td align="left">二线</td><td align="left">贵州省</td><td align="left">贵阳市</td><td align="left">26.6299067414</td><td align="left">106.709177096</td></tr><tr><td align="left">二线</td><td align="left">黑龙江省</td><td align="left">哈尔滨市</td><td align="left">45.7732246332</td><td align="left">126.657716855</td></tr><tr><td align="left">三线</td><td align="left">云南省</td><td align="left">丽江市</td><td align="left">26.8753510895</td><td align="left">100.229628399</td></tr><tr><td align="left">三线</td><td align="left">内蒙古自治区</td><td align="left">包头市</td><td align="left">40.6471194257</td><td align="left">109.846238532</td></tr><tr><td align="left">三线</td><td align="left">内蒙古自治区</td><td align="left">呼和浩特市</td><td align="left">40.8283188731</td><td align="left">111.66035052</td></tr><tr><td align="left">三线</td><td align="left">吉林省</td><td align="left">吉林市</td><td align="left">43.8719883344</td><td align="left">126.564543989</td></tr><tr><td align="left">三线</td><td align="left">吉林省</td><td align="left">延边朝鲜族自治州</td><td align="left">42.8964136037</td><td align="left">129.485901958</td></tr><tr><td align="left">三线</td><td align="left">四川省</td><td align="left">南充市</td><td align="left">30.8009651682</td><td align="left">106.105553984</td></tr><tr><td align="left">三线</td><td align="left">四川省</td><td align="left">绵阳市</td><td align="left">31.5047012581</td><td align="left">104.705518975</td></tr><tr><td align="left">三线</td><td align="left">宁夏回族自治区</td><td align="left">银川市</td><td align="left">38.5026210119</td><td align="left">106.206478608</td></tr><tr><td align="left">三线</td><td align="left">安徽省</td><td align="left">芜湖市</td><td align="left">31.3660197875</td><td align="left">118.384108423</td></tr><tr><td align="left">三线</td><td align="left">安徽省</td><td align="left">蚌埠市</td><td align="left">32.9294989067</td><td align="left">117.357079866</td></tr><tr><td align="left">三线</td><td align="left">安徽省</td><td align="left">马鞍山市</td><td align="left">31.6885281589</td><td align="left">118.515881847</td></tr><tr><td align="left">三线</td><td align="left">山东省</td><td align="left">东营市</td><td align="left">37.4871211553</td><td align="left">118.583926333</td></tr><tr><td align="left">三线</td><td align="left">山东省</td><td align="left">临沂市</td><td align="left">35.0724090744</td><td align="left">118.340768237</td></tr><tr><td align="left">三线</td><td align="left">山东省</td><td align="left">威海市</td><td align="left">37.5287870813</td><td align="left">122.093958366</td></tr><tr><td align="left">三线</td><td align="left">山东省</td><td align="left">泰安市</td><td align="left">36.1880777589</td><td align="left">117.089414917</td></tr><tr><td align="left">三线</td><td align="left">山东省</td><td align="left">济宁市</td><td align="left">35.4021216643</td><td align="left">116.600797625</td></tr><tr><td align="left">三线</td><td align="left">山东省</td><td align="left">淄博市</td><td align="left">36.8046848542</td><td align="left">118.059134278</td></tr><tr><td align="left">三线</td><td align="left">山东省</td><td align="left">潍坊市</td><td align="left">36.7161148731</td><td align="left">119.142633823</td></tr><tr><td align="left">三线</td><td align="left">广东省</td><td align="left">揭阳市</td><td align="left">23.5479994669</td><td align="left">116.379500855</td></tr><tr><td align="left">三线</td><td align="left">广东省</td><td align="left">汕头市</td><td align="left">23.3839084533</td><td align="left">116.728650288</td></tr><tr><td align="left">三线</td><td align="left">广东省</td><td align="left">江门市</td><td align="left">22.5751167835</td><td align="left">113.078125341</td></tr><tr><td align="left">三线</td><td align="left">广东省</td><td align="left">清远市</td><td align="left">23.6984685504</td><td align="left">113.040773349</td></tr><tr><td align="left">三线</td><td align="left">广东省</td><td align="left">湛江市</td><td align="left">21.2574631038</td><td align="left">110.365067263</td></tr><tr><td align="left">三线</td><td align="left">广东省</td><td align="left">肇庆市</td><td align="left">23.0786632829</td><td align="left">112.47965337</td></tr><tr><td align="left">三线</td><td align="left">广西壮族自治区</td><td align="left">柳州市</td><td align="left">24.3290533525</td><td align="left">109.42240181</td></tr><tr><td align="left">三线</td><td align="left">广西壮族自治区</td><td align="left">桂林市</td><td align="left">25.262901246</td><td align="left">110.260920147</td></tr><tr><td align="left">三线</td><td align="left">江苏省</td><td align="left">扬州市</td><td align="left">32.4085052546</td><td align="left">119.427777551</td></tr><tr><td align="left">三线</td><td align="left">江苏省</td><td align="left">泰州市</td><td align="left">32.4760532748</td><td align="left">119.919606016</td></tr><tr><td align="left">三线</td><td align="left">江苏省</td><td align="left">淮安市</td><td align="left">33.6065127393</td><td align="left">119.030186365</td></tr><tr><td align="left">三线</td><td align="left">江苏省</td><td align="left">盐</td><td align="left">33.3798618771</td><td align="left">120.148871818</td></tr><tr><td align="left">三线</td><td align="left">江苏省</td><td align="left">连云港市</td><td align="left">34.601548967</td><td align="left">119.173872217</td></tr><tr><td align="left">三线</td><td align="left">江苏省</td><td align="left">镇江市</td><td align="left">32.2044094436</td><td align="left">119.455835405</td></tr><tr><td align="left">三线</td><td align="left">江西省</td><td align="left">上饶市</td><td align="left">28.4576225539</td><td align="left">117.955463877</td></tr><tr><td align="left">三线</td><td align="left">江西省</td><td align="left">九江市</td><td align="left">29.7196395261</td><td align="left">115.999848022</td></tr><tr><td align="left">三线</td><td align="left">江西省</td><td align="left">赣州市</td><td align="left">25.8452955363</td><td align="left">114.935909079</td></tr><tr><td align="left">三线</td><td align="left">河北省</td><td align="left">保定市</td><td align="left">38.886564548</td><td align="left">115.494810169</td></tr><tr><td align="left">三线</td><td align="left">河北省</td><td align="left">唐山市</td><td align="left">39.6505309225</td><td align="left">118.183450598</td></tr><tr><td align="left">三线</td><td align="left">河北省</td><td align="left">廊坊市</td><td align="left">39.5186106251</td><td align="left">116.703602223</td></tr><tr><td align="left">三线</td><td align="left">河北省</td><td align="left">沧州市</td><td align="left">38.2976153503</td><td align="left">116.863806476</td></tr><tr><td align="left">三线</td><td align="left">河北省</td><td align="left">秦皇岛市</td><td align="left">39.9454615659</td><td align="left">119.604367616</td></tr><tr><td align="left">三线</td><td align="left">河北省</td><td align="left">邯郸市</td><td align="left">36.6093079285</td><td align="left">114.482693932</td></tr><tr><td align="left">三线</td><td align="left">河南省</td><td align="left">南阳市</td><td align="left">33.0114195691</td><td align="left">112.542841901</td></tr><tr><td align="left">三线</td><td align="left">河南省</td><td align="left">洛阳市</td><td align="left">34.6573678177</td><td align="left">112.447524769</td></tr><tr><td align="left">三线</td><td align="left">浙江省</td><td align="left">丽水市</td><td align="left">28.4562995521</td><td align="left">119.929575843</td></tr><tr><td align="left">三线</td><td align="left">浙江省</td><td align="left">湖州市</td><td align="left">30.8779251557</td><td align="left">120.137243163</td></tr><tr><td align="left">三线</td><td align="left">浙江省</td><td align="left">舟山市</td><td align="left">30.0360103026</td><td align="left">122.169872098</td></tr><tr><td align="left">三线</td><td align="left">浙江省</td><td align="left">衢州市</td><td align="left">28.9569104475</td><td align="left">118.875841652</td></tr><tr><td align="left">三线</td><td align="left">海南省</td><td align="left">三亚市</td><td align="left">18.2577759149</td><td align="left">109.522771281</td></tr><tr><td align="left">三线</td><td align="left">湖北省</td><td align="left">孝感市</td><td align="left">30.9279547842</td><td align="left">113.935734392</td></tr><tr><td align="left">三线</td><td align="left">湖北省</td><td align="left">宜昌市</td><td align="left">30.732757818</td><td align="left">111.310981092</td></tr><tr><td align="left">三线</td><td align="left">湖北省</td><td align="left">荆州市</td><td align="left">30.332590523</td><td align="left">112.241865807</td></tr><tr><td align="left">三线</td><td align="left">湖北省</td><td align="left">襄阳市</td><td align="left">32.2291685915</td><td align="left">112.250092848</td></tr><tr><td align="left">三线</td><td align="left">湖南省</td><td align="left">岳阳市</td><td align="left">29.3780070755</td><td align="left">113.146195519</td></tr><tr><td align="left">三线</td><td align="left">湖南省</td><td align="left">株洲市</td><td align="left">27.8274329277</td><td align="left">113.131695341</td></tr><tr><td align="left">三线</td><td align="left">湖南省</td><td align="left">衡阳市</td><td align="left">26.8981644154</td><td align="left">112.583818811</td></tr><tr><td align="left">三线</td><td align="left">福建省</td><td align="left">三明市</td><td align="left">26.2708352794</td><td align="left">117.642193934</td></tr><tr><td align="left">三线</td><td align="left">福建省</td><td align="left">南平市</td><td align="left">26.6436264742</td><td align="left">118.181882949</td></tr><tr><td align="left">三线</td><td align="left">福建省</td><td align="left">宁德市</td><td align="left">26.6565274192</td><td align="left">119.54208215</td></tr><tr><td align="left">三线</td><td align="left">福建省</td><td align="left">漳州市</td><td align="left">24.5170647798</td><td align="left">117.676204679</td></tr><tr><td align="left">三线</td><td align="left">福建省</td><td align="left">莆田市</td><td align="left">25.4484501367</td><td align="left">119.077730964</td></tr><tr><td align="left">三线</td><td align="left">福建省</td><td align="left">龙岩市</td><td align="left">25.0786854335</td><td align="left">117.017996739</td></tr><tr><td align="left">三线</td><td align="left">辽宁省</td><td align="left">丹东市</td><td align="left">40.1290228266</td><td align="left">124.338543115</td></tr><tr><td align="left">三线</td><td align="left">辽宁省</td><td align="left">抚顺市</td><td align="left">41.8773038296</td><td align="left">123.929819767</td></tr><tr><td align="left">三线</td><td align="left">辽宁省</td><td align="left">盘锦市</td><td align="left">41.141248023</td><td align="left">122.07322781</td></tr><tr><td align="left">三线</td><td align="left">辽宁省</td><td align="left">营口市</td><td align="left">40.6686510665</td><td align="left">122.233391371</td></tr><tr><td align="left">三线</td><td align="left">辽宁省</td><td align="left">鞍山市</td><td align="left">41.1187436822</td><td align="left">123.007763329</td></tr><tr><td align="left">三线</td><td align="left">陕西省</td><td align="left">咸阳市</td><td align="left">34.345372996</td><td align="left">108.707509278</td></tr><tr><td align="left">三线</td><td align="left">青海省</td><td align="left">西宁市</td><td align="left">36.640738612</td><td align="left">101.76792099</td></tr><tr><td align="left">三线</td><td align="left">黑龙江省</td><td align="left">大庆市</td><td align="left">46.59670902</td><td align="left">125.02183973</td></tr><tr><td align="left">三线</td><td align="left">黑龙江省</td><td align="left">齐齐哈尔市</td><td align="left">47.3476998134</td><td align="left">123.987288942</td></tr><tr><td align="left">四线</td><td align="left">云南省</td><td align="left">大理白族自治州</td><td align="left">25.5968996394</td><td align="left">100.223674789</td></tr><tr><td align="left">四线</td><td align="left">云南省</td><td align="left">曲靖市</td><td align="left">25.5207581429</td><td align="left">103.782538888</td></tr><tr><td align="left">四线</td><td align="left">云南省</td><td align="left">玉溪市</td><td align="left">24.3704471344</td><td align="left">102.545067892</td></tr><tr><td align="left">四线</td><td align="left">云南省</td><td align="left">红河哈尼族彝族自治州</td><td align="left">23.3677175165</td><td align="left">103.384064757</td></tr><tr><td align="left">四线</td><td align="left">云南省</td><td align="left">西双版纳傣族自治州</td><td align="left">22.0094330022</td><td align="left">100.803038275</td></tr><tr><td align="left">四线</td><td align="left">内蒙古自治区</td><td align="left">呼伦贝尔市</td><td align="left">49.2016360546</td><td align="left">119.760821794</td></tr><tr><td align="left">四线</td><td align="left">内蒙古自治区</td><td align="left">赤峰市</td><td align="left">42.2971123203</td><td align="left">118.930761192</td></tr><tr><td align="left">四线</td><td align="left">内蒙古自治区</td><td align="left">通辽市</td><td align="left">43.633756073</td><td align="left">122.260363263</td></tr><tr><td align="left">四线</td><td align="left">内蒙古自治区</td><td align="left">鄂尔多斯市</td><td align="left">39.8164895606</td><td align="left">109.993706251</td></tr><tr><td align="left">四线</td><td align="left">吉林省</td><td align="left">四平市</td><td align="left">43.1755247011</td><td align="left">124.391382074</td></tr><tr><td align="left">四线</td><td align="left">吉林省</td><td align="left">通化市</td><td align="left">41.7363971299</td><td align="left">125.942650139</td></tr><tr><td align="left">四线</td><td align="left">四川省</td><td align="left">乐山市</td><td align="left">29.6009576111</td><td align="left">103.760824239</td></tr><tr><td align="left">四线</td><td align="left">四川省</td><td align="left">内江市</td><td align="left">29.5994615348</td><td align="left">105.073055992</td></tr><tr><td align="left">四线</td><td align="left">四川省</td><td align="left">宜宾市</td><td align="left">28.7696747963</td><td align="left">104.633019062</td></tr><tr><td align="left">四线</td><td align="left">四川省</td><td align="left">德阳市</td><td align="left">31.1311396527</td><td align="left">104.402397818</td></tr><tr><td align="left">四线</td><td align="left">四川省</td><td align="left">泸州市</td><td align="left">28.8959298039</td><td align="left">105.443970289</td></tr><tr><td align="left">四线</td><td align="left">四川省</td><td align="left">眉山市</td><td align="left">30.0611150799</td><td align="left">103.841429563</td></tr><tr><td align="left">四线</td><td align="left">四川省</td><td align="left">遂宁市</td><td align="left">30.5574913504</td><td align="left">105.564887792</td></tr><tr><td align="left">四线</td><td align="left">四川省</td><td align="left">雅安市</td><td align="left">29.9997163371</td><td align="left">103.009356466</td></tr><tr><td align="left">四线</td><td align="left">安徽省</td><td align="left">六安市</td><td align="left">31.7555583552</td><td align="left">116.505252683</td></tr><tr><td align="left">四线</td><td align="left">安徽省</td><td align="left">安庆市</td><td align="left">30.5378978174</td><td align="left">117.058738772</td></tr><tr><td align="left">四线</td><td align="left">安徽省</td><td align="left">宣</td><td align="left">30.9516423543</td><td align="left">118.752096311</td></tr><tr><td align="left">四线</td><td align="left">安徽省</td><td align="left">宿州市</td><td align="left">33.6367723858</td><td align="left">116.988692412</td></tr><tr><td align="left">四线</td><td align="left">安徽省</td><td align="left">淮南市</td><td align="left">32.6428118237</td><td align="left">117.018638863</td></tr><tr><td align="left">四线</td><td align="left">安徽省</td><td align="left">滁州市</td><td align="left">32.3173505954</td><td align="left">118.324570351</td></tr><tr><td align="left">四线</td><td align="left">安徽省</td><td align="left">阜阳市</td><td align="left">32.9012113306</td><td align="left">115.820932259</td></tr><tr><td align="left">四线</td><td align="left">安徽省</td><td align="left">黄山市</td><td align="left">29.7344348562</td><td align="left">118.293569632</td></tr><tr><td align="left">四线</td><td align="left">山东省</td><td align="left">德州市</td><td align="left">37.4608259263</td><td align="left">116.328161364</td></tr><tr><td align="left">四线</td><td align="left">山东省</td><td align="left">日照市</td><td align="left">35.4202251931</td><td align="left">119.507179943</td></tr><tr><td align="left">四线</td><td align="left">山东省</td><td align="left">枣庄市</td><td align="left">34.8078830784</td><td align="left">117.279305383</td></tr><tr><td align="left">四线</td><td align="left">山东省</td><td align="left">滨州市</td><td align="left">37.4053139418</td><td align="left">117.968292415</td></tr><tr><td align="left">四线</td><td align="left">山东省</td><td align="left">聊</td><td align="left">36.4558285147</td><td align="left">115.986869139</td></tr><tr><td align="left">四线</td><td align="left">山东省</td><td align="left">菏泽市</td><td align="left">35.2624404961</td><td align="left">115.463359775</td></tr><tr><td align="left">四线</td><td align="left">山西省</td><td align="left">临汾市</td><td align="left">36.0997454436</td><td align="left">111.538787596</td></tr><tr><td align="left">四线</td><td align="left">山西省</td><td align="left">大同市</td><td align="left">40.1137444997</td><td align="left">113.290508673</td></tr><tr><td align="left">四线</td><td align="left">山西省</td><td align="left">晋中市</td><td align="left">37.6933615268</td><td align="left">112.7385144</td></tr><tr><td align="left">四线</td><td align="left">山西省</td><td align="left">运</td><td align="left">35.0388594798</td><td align="left">111.006853653</td></tr><tr><td align="left">四线</td><td align="left">广东省</td><td align="left">梅州市</td><td align="left">24.304570606</td><td align="left">116.126403098</td></tr><tr><td align="left">四线</td><td align="left">广东省</td><td align="left">汕尾市</td><td align="left">22.7787305002</td><td align="left">115.372924289</td></tr><tr><td align="left">四线</td><td align="left">广东省</td><td align="left">河源市</td><td align="left">23.7572508505</td><td align="left">114.713721476</td></tr><tr><td align="left">四线</td><td align="left">广东省</td><td align="left">潮州市</td><td align="left">23.6618116765</td><td align="left">116.630075991</td></tr><tr><td align="left">四线</td><td align="left">广东省</td><td align="left">茂名市</td><td align="left">21.6682257188</td><td align="left">110.931245331</td></tr><tr><td align="left">四线</td><td align="left">广东省</td><td align="left">阳江市</td><td align="left">21.8715173045</td><td align="left">111.977009756</td></tr><tr><td align="left">四线</td><td align="left">广东省</td><td align="left">韶关市</td><td align="left">24.8029603119</td><td align="left">113.594461107</td></tr><tr><td align="left">四线</td><td align="left">广西壮族自治区</td><td align="left">北海市</td><td align="left">21.472718235</td><td align="left">109.122627919</td></tr><tr><td align="left">四线</td><td align="left">广西壮族自治区</td><td align="left">梧州市</td><td align="left">23.4853946367</td><td align="left">111.30547195</td></tr><tr><td align="left">四线</td><td align="left">广西壮族自治区</td><td align="left">玉林市</td><td align="left">22.6439736084</td><td align="left">110.151676316</td></tr><tr><td align="left">四线</td><td align="left">江苏省</td><td align="left">宿迁市</td><td align="left">33.9520497337</td><td align="left">118.296893379</td></tr><tr><td align="left">四线</td><td align="left">江西省</td><td align="left">吉安市</td><td align="left">27.1138476502</td><td align="left">114.992038711</td></tr><tr><td align="left">四线</td><td align="left">江西省</td><td align="left">宜春市</td><td align="left">27.8111298958</td><td align="left">114.400038672</td></tr><tr><td align="left">四线</td><td align="left">江西省</td><td align="left">抚州市</td><td align="left">27.9545451703</td><td align="left">116.360918867</td></tr><tr><td align="left">四线</td><td align="left">江西省</td><td align="left">景德镇市</td><td align="left">29.3035627684</td><td align="left">117.186522625</td></tr><tr><td align="left">四线</td><td align="left">河北省</td><td align="left">张家口市</td><td align="left">40.8111884911</td><td align="left">114.89378153</td></tr><tr><td align="left">四线</td><td align="left">河北省</td><td align="left">承德市</td><td align="left">40.9925210525</td><td align="left">117.933822456</td></tr><tr><td align="left">四线</td><td align="left">河北省</td><td align="left">邢台市</td><td align="left">37.0695311969</td><td align="left">114.520486813</td></tr><tr><td align="left">四线</td><td align="left">河南省</td><td align="left">信阳市</td><td align="left">32.1285823075</td><td align="left">114.085490993</td></tr><tr><td align="left">四线</td><td align="left">河南省</td><td align="left">周口市</td><td align="left">33.6237408181</td><td align="left">114.654101942</td></tr><tr><td align="left">四线</td><td align="left">河南省</td><td align="left">商丘市</td><td align="left">34.4385886402</td><td align="left">115.641885688</td></tr><tr><td align="left">四线</td><td align="left">河南省</td><td align="left">安阳市</td><td align="left">36.1102667222</td><td align="left">114.351806508</td></tr><tr><td align="left">四线</td><td align="left">河南省</td><td align="left">平顶山市</td><td align="left">33.7453014565</td><td align="left">113.300848978</td></tr><tr><td align="left">四线</td><td align="left">河南省</td><td align="left">开封市</td><td align="left">34.8018541758</td><td align="left">114.351642118</td></tr><tr><td align="left">四线</td><td align="left">河南省</td><td align="left">新乡市</td><td align="left">35.3072575577</td><td align="left">113.912690161</td></tr><tr><td align="left">四线</td><td align="left">河南省</td><td align="left">焦作市</td><td align="left">35.234607555</td><td align="left">113.211835885</td></tr><tr><td align="left">四线</td><td align="left">河南省</td><td align="left">许昌市</td><td align="left">34.0267395887</td><td align="left">113.83531246</td></tr><tr><td align="left">四线</td><td align="left">河南省</td><td align="left">驻马店市</td><td align="left">32.9831581541</td><td align="left">114.049153547</td></tr><tr><td align="left">四线</td><td align="left">湖北省</td><td align="left">十堰市</td><td align="left">32.6369943395</td><td align="left">110.801228917</td></tr><tr><td align="left">四线</td><td align="left">湖北省</td><td align="left">咸宁市</td><td align="left">29.8806567577</td><td align="left">114.300060592</td></tr><tr><td align="left">四线</td><td align="left">湖北省</td><td align="left">恩施土家族苗族自治州</td><td align="left">30.2858883166</td><td align="left">109.491923304</td></tr><tr><td align="left">四线</td><td align="left">湖北省</td><td align="left">黄冈市</td><td align="left">30.4461089379</td><td align="left">114.906618047</td></tr><tr><td align="left">四线</td><td align="left">湖北省</td><td align="left">黄石市</td><td align="left">30.2161271277</td><td align="left">115.050683164</td></tr><tr><td align="left">四线</td><td align="left">湖南省</td><td align="left">娄底市</td><td align="left">27.7410733023</td><td align="left">111.996396357</td></tr><tr><td align="left">四线</td><td align="left">湖南省</td><td align="left">常德市</td><td align="left">29.0121488552</td><td align="left">111.653718137</td></tr><tr><td align="left">四线</td><td align="left">湖南省</td><td align="left">怀化市</td><td align="left">27.5574829012</td><td align="left">109.986958796</td></tr><tr><td align="left">四线</td><td align="left">湖南省</td><td align="left">湘潭市</td><td align="left">27.835095053</td><td align="left">112.935555633</td></tr><tr><td align="left">四线</td><td align="left">湖南省</td><td align="left">邵阳市</td><td align="left">27.2368112449</td><td align="left">111.461525404</td></tr><tr><td align="left">四线</td><td align="left">湖南省</td><td align="left">郴州市</td><td align="left">25.7822639757</td><td align="left">113.037704468</td></tr><tr><td align="left">四线</td><td align="left">贵州省</td><td align="left">遵义市</td><td align="left">27.6999613771</td><td align="left">106.931260316</td></tr><tr><td align="left">四线</td><td align="left">贵州省</td><td align="left">黔东南苗族侗族自治州</td><td align="left">26.5839917665</td><td align="left">107.985352573</td></tr><tr><td align="left">四线</td><td align="left">贵州省</td><td align="left">黔南布依族苗族自治州</td><td align="left">26.2645359974</td><td align="left">107.52320511</td></tr><tr><td align="left">四线</td><td align="left">辽宁省</td><td align="left">本溪市</td><td align="left">41.3258376266</td><td align="left">123.77806237</td></tr><tr><td align="left">四线</td><td align="left">辽宁省</td><td align="left">葫芦岛市</td><td align="left">40.7430298813</td><td align="left">120.860757645</td></tr><tr><td align="left">四线</td><td align="left">辽宁省</td><td align="left">辽阳市</td><td align="left">41.2733392656</td><td align="left">123.172451205</td></tr><tr><td align="left">四线</td><td align="left">辽宁省</td><td align="left">铁岭市</td><td align="left">42.2997570121</td><td align="left">123.854849615</td></tr><tr><td align="left">四线</td><td align="left">辽宁省</td><td align="left">锦州市</td><td align="left">41.1308788759</td><td align="left">121.147748738</td></tr><tr><td align="left">四线</td><td align="left">辽宁省</td><td align="left">阜新市</td><td align="left">42.0192501071</td><td align="left">121.660822129</td></tr><tr><td align="left">四线</td><td align="left">陕西省</td><td align="left">宝鸡市</td><td align="left">34.3640808097</td><td align="left">107.170645452</td></tr><tr><td align="left">四线</td><td align="left">陕西省</td><td align="left">榆林市</td><td align="left">38.2794392401</td><td align="left">109.745925744</td></tr><tr><td align="left">四线</td><td align="left">陕西省</td><td align="left">渭南市</td><td align="left">34.5023579758</td><td align="left">109.483932697</td></tr><tr><td align="left">四线</td><td align="left">黑龙江省</td><td align="left">佳木斯市</td><td align="left">46.8137796047</td><td align="left">130.284734586</td></tr><tr><td align="left">四线</td><td align="left">黑龙江省</td><td align="left">牡丹江市</td><td align="left">44.5885211528</td><td align="left">129.608035396</td></tr><tr><td align="left">五线</td><td align="left">云南省</td><td align="left">临沧市</td><td align="left">23.8878061038</td><td align="left">100.092612914</td></tr><tr><td align="left">五线</td><td align="left">云南省</td><td align="left">保山市</td><td align="left">25.1204891962</td><td align="left">99.1779956133</td></tr><tr><td align="left">五线</td><td align="left">云南省</td><td align="left">德宏傣族景颇族自治州</td><td align="left">24.441239663</td><td align="left">98.5894342874</td></tr><tr><td align="left">五线</td><td align="left">云南省</td><td align="left">怒江傈僳族自治州</td><td align="left">25.8606769782</td><td align="left">98.8599320425</td></tr><tr><td align="left">五线</td><td align="left">云南省</td><td align="left">文山壮族苗族自治州</td><td align="left">23.3740868504</td><td align="left">104.246294318</td></tr><tr><td align="left">五线</td><td align="left">云南省</td><td align="left">昭通市</td><td align="left">27.3406329636</td><td align="left">103.725020656</td></tr><tr><td align="left">五线</td><td align="left">云南省</td><td align="left">普洱市</td><td align="left">22.7887777801</td><td align="left">100.98005773</td></tr><tr><td align="left">五线</td><td align="left">云南省</td><td align="left">楚雄彝族自治州</td><td align="left">25.0663556742</td><td align="left">101.529382239</td></tr><tr><td align="left">五线</td><td align="left">云南省</td><td align="left">迪庆藏族自治州</td><td align="left">27.8310294612</td><td align="left">99.7136815989</td></tr><tr><td align="left">五线</td><td align="left">内蒙古自治区</td><td align="left">乌兰察布市</td><td align="left">41.0223629468</td><td align="left">113.112846391</td></tr><tr><td align="left">五线</td><td align="left">内蒙古自治区</td><td align="left">乌海市</td><td align="left">39.6831770068</td><td align="left">106.831999097</td></tr><tr><td align="left">五线</td><td align="left">内蒙古自治区</td><td align="left">兴安盟</td><td align="left">46.0837570652</td><td align="left">122.048166514</td></tr><tr><td align="left">五线</td><td align="left">内蒙古自治区</td><td align="left">巴彦淖尔市</td><td align="left">40.7691799024</td><td align="left">107.42380672</td></tr><tr><td align="left">五线</td><td align="left">内蒙古自治区</td><td align="left">锡林郭勒盟</td><td align="left">43.9397048423</td><td align="left">116.027339689</td></tr><tr><td align="left">五线</td><td align="left">内蒙古自治区</td><td align="left">阿拉善盟</td><td align="left">38.8430752644</td><td align="left">105.695682871</td></tr><tr><td align="left">五线</td><td align="left">吉林省</td><td align="left">松原市</td><td align="left">45.1360489701</td><td align="left">124.832994532</td></tr><tr><td align="left">五线</td><td align="left">吉林省</td><td align="left">白</td><td align="left">45.6210862752</td><td align="left">122.840776679</td></tr><tr><td align="left">五线</td><td align="left">吉林省</td><td align="left">白山市</td><td align="left">41.945859397</td><td align="left">126.435797675</td></tr><tr><td align="left">五线</td><td align="left">吉林省</td><td align="left">辽源市</td><td align="left">42.9233026191</td><td align="left">125.133686052</td></tr><tr><td align="left">五线</td><td align="left">四川省</td><td align="left">凉山彝族自治州</td><td align="left">27.8923929037</td><td align="left">102.259590803</td></tr><tr><td align="left">五线</td><td align="left">四川省</td><td align="left">巴中市</td><td align="left">31.8691891592</td><td align="left">106.757915842</td></tr><tr><td align="left">五线</td><td align="left">四川省</td><td align="left">广元市</td><td align="left">32.4410401584</td><td align="left">105.81968694</td></tr><tr><td align="left">五线</td><td align="left">四川省</td><td align="left">广安市</td><td align="left">30.4639838879</td><td align="left">106.635720331</td></tr><tr><td align="left">五线</td><td align="left">四川省</td><td align="left">攀枝花市</td><td align="left">26.5875712571</td><td align="left">101.722423152</td></tr><tr><td align="left">五线</td><td align="left">四川省</td><td align="left">甘孜藏族自治州</td><td align="left">30.0551441144</td><td align="left">101.969232063</td></tr><tr><td align="left">五线</td><td align="left">四川省</td><td align="left">自贡市</td><td align="left">29.3591568895</td><td align="left">104.776071339</td></tr><tr><td align="left">五线</td><td align="left">四川省</td><td align="left">资阳市</td><td align="left">30.132191434</td><td align="left">104.635930302</td></tr><tr><td align="left">五线</td><td align="left">四川省</td><td align="left">达州市</td><td align="left">31.2141988589</td><td align="left">107.494973447</td></tr><tr><td align="left">五线</td><td align="left">四川省</td><td align="left">阿坝藏族羌族自治州</td><td align="left">31.9057628583</td><td align="left">102.228564689</td></tr><tr><td align="left">五线</td><td align="left">宁夏回族自治区</td><td align="left">中卫市</td><td align="left">37.5211241916</td><td align="left">105.196754199</td></tr><tr><td align="left">五线</td><td align="left">宁夏回族自治区</td><td align="left">吴忠市</td><td align="left">37.9935610029</td><td align="left">106.208254199</td></tr><tr><td align="left">五线</td><td align="left">宁夏回族自治区</td><td align="left">固原市</td><td align="left">36.0215234807</td><td align="left">106.285267996</td></tr><tr><td align="left">五线</td><td align="left">宁夏回族自治区</td><td align="left">石嘴山市</td><td align="left">39.0202232836</td><td align="left">106.379337202</td></tr><tr><td align="left">五线</td><td align="left">安徽省</td><td align="left">亳州市</td><td align="left">33.8712105653</td><td align="left">115.787928245</td></tr><tr><td align="left">五线</td><td align="left">安徽省</td><td align="left">池州市</td><td align="left">30.6600192482</td><td align="left">117.494476772</td></tr><tr><td align="left">五线</td><td align="left">安徽省</td><td align="left">淮北市</td><td align="left">33.9600233054</td><td align="left">116.791447429</td></tr><tr><td align="left">五线</td><td align="left">安徽省</td><td align="left">铜陵市</td><td align="left">30.9409296947</td><td align="left">117.819428729</td></tr><tr><td align="left">五线</td><td align="left">山东省</td><td align="left">莱芜市</td><td align="left">36.2336541336</td><td align="left">117.684666912</td></tr><tr><td align="left">五线</td><td align="left">山西省</td><td align="left">吕梁市</td><td align="left">37.527316097</td><td align="left">111.143156602</td></tr><tr><td align="left">五线</td><td align="left">山西省</td><td align="left">忻州市</td><td align="left">38.461030573</td><td align="left">112.727938829</td></tr><tr><td align="left">五线</td><td align="left">山西省</td><td align="left">晋</td><td align="left">35.4998344672</td><td align="left">112.867332758</td></tr><tr><td align="left">五线</td><td align="left">山西省</td><td align="left">朔州市</td><td align="left">39.3376719662</td><td align="left">112.479927727</td></tr><tr><td align="left">五线</td><td align="left">山西省</td><td align="left">长治市</td><td align="left">36.2016643857</td><td align="left">113.120292086</td></tr><tr><td align="left">五线</td><td align="left">山西省</td><td align="left">阳泉市</td><td align="left">37.8695294932</td><td align="left">113.569237602</td></tr><tr><td align="left">五线</td><td align="left">广东省</td><td align="left">云浮市</td><td align="left">22.9379756855</td><td align="left">112.050945959</td></tr><tr><td align="left">五线</td><td align="left">广西壮族自治区</td><td align="left">崇左市</td><td align="left">22.4154552965</td><td align="left">107.357322038</td></tr><tr><td align="left">五线</td><td align="left">广西壮族自治区</td><td align="left">来宾市</td><td align="left">23.7411659265</td><td align="left">109.231816505</td></tr><tr><td align="left">五线</td><td align="left">广西壮族自治区</td><td align="left">河池市</td><td align="left">24.6995207829</td><td align="left">108.069947709</td></tr><tr><td align="left">五线</td><td align="left">广西壮族自治区</td><td align="left">百色市</td><td align="left">23.9015123679</td><td align="left">106.631821404</td></tr><tr><td align="left">五线</td><td align="left">广西壮族自治区</td><td align="left">贵港市</td><td align="left">23.1033731644</td><td align="left">109.613707557</td></tr><tr><td align="left">五线</td><td align="left">广西壮族自治区</td><td align="left">贺州市</td><td align="left">24.4110535471</td><td align="left">111.552594179</td></tr><tr><td align="left">五线</td><td align="left">广西壮族自治区</td><td align="left">钦州市</td><td align="left">21.9733504653</td><td align="left">108.638798056</td></tr><tr><td align="left">五线</td><td align="left">广西壮族自治区</td><td align="left">防城港市</td><td align="left">21.6173984705</td><td align="left">108.351791153</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">伊犁哈萨克自治州</td><td align="left">43.9222480963</td><td align="left">81.2978535304</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">克孜勒苏柯尔克孜自治州</td><td align="left">39.7503455778</td><td align="left">76.1375644775</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">克拉玛依市</td><td align="left">45.5943310667</td><td align="left">84.8811801861</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">博尔塔拉蒙古自治州</td><td align="left">44.9136513743</td><td align="left">82.0524362672</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">吐鲁番市</td><td align="left">42.94974316</td><td align="left">89.18669353</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">和田地区</td><td align="left">37.1167744927</td><td align="left">79.9302386372</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">哈密市</td><td align="left">42.81703415</td><td align="left">93.51378141</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">喀什地区</td><td align="left">39.4706271887</td><td align="left">75.9929732675</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">塔城地区</td><td align="left">46.7586836297</td><td align="left">82.9748805837</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">巴音郭楞蒙古自治州</td><td align="left">41.7625397</td><td align="left">86.14252513</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">昌吉回族自治州</td><td align="left">44.0070578985</td><td align="left">87.2960381257</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">阿克苏地区</td><td align="left">41.1717309015</td><td align="left">80.2698461793</td></tr><tr><td align="left">五线</td><td align="left">新疆维吾尔自治区</td><td align="left">阿勒泰地区</td><td align="left">47.8397444862</td><td align="left">88.1379154871</td></tr><tr><td align="left">五线</td><td align="left">江西省</td><td align="left">新余市</td><td align="left">27.8223215586</td><td align="left">114.947117417</td></tr><tr><td align="left">五线</td><td align="left">江西省</td><td align="left">萍乡市</td><td align="left">27.639544223</td><td align="left">113.859917033</td></tr><tr><td align="left">五线</td><td align="left">江西省</td><td align="left">鹰潭市</td><td align="left">28.2413095972</td><td align="left">117.035450186</td></tr><tr><td align="left">五线</td><td align="left">河北省</td><td align="left">衡水市</td><td align="left">37.7469290459</td><td align="left">115.686228653</td></tr><tr><td align="left">五线</td><td align="left">河南省</td><td align="left">三门峡市</td><td align="left">34.7833199411</td><td align="left">111.181262093</td></tr><tr><td align="left">五线</td><td align="left">河南省</td><td align="left">漯河市</td><td align="left">33.5762786885</td><td align="left">114.0460614</td></tr><tr><td align="left">五线</td><td align="left">河南省</td><td align="left">濮阳市</td><td align="left">35.7532978882</td><td align="left">115.026627441</td></tr><tr><td align="left">五线</td><td align="left">河南省</td><td align="left">鹤壁市</td><td align="left">35.7554258742</td><td align="left">114.297769838</td></tr><tr><td align="left">五线</td><td align="left">海南省</td><td align="left">三沙市</td><td align="left">16.840062894</td><td align="left">112.350383075</td></tr><tr><td align="left">五线</td><td align="left">海南省</td><td align="left">儋州市</td><td align="left">19.52289649</td><td align="left">109.57667231</td></tr><tr><td align="left">五线</td><td align="left">湖北省</td><td align="left">荆门市</td><td align="left">31.0426112029</td><td align="left">112.217330299</td></tr><tr><td align="left">五线</td><td align="left">湖北省</td><td align="left">鄂州市</td><td align="left">30.3844393228</td><td align="left">114.895594041</td></tr><tr><td align="left">五线</td><td align="left">湖北省</td><td align="left">随州市</td><td align="left">31.7178576082</td><td align="left">113.379358364</td></tr><tr><td align="left">五线</td><td align="left">湖南省</td><td align="left">张家界市</td><td align="left">29.1248893532</td><td align="left">110.481620157</td></tr><tr><td align="left">五线</td><td align="left">湖南省</td><td align="left">永州市</td><td align="left">26.4359716468</td><td align="left">111.614647686</td></tr><tr><td align="left">五线</td><td align="left">湖南省</td><td align="left">湘西土家族苗族自治州</td><td align="left">28.3179507937</td><td align="left">109.7457458</td></tr><tr><td align="left">五线</td><td align="left">湖南省</td><td align="left">益阳市</td><td align="left">28.5880877799</td><td align="left">112.366546645</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">临夏回族自治州</td><td align="left">35.5985143488</td><td align="left">103.215249178</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">嘉峪关市</td><td align="left">39.8023973267</td><td align="left">98.2816345853</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">天水市</td><td align="left">34.5843194189</td><td align="left">105.736931623</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">定西市</td><td align="left">35.5860562418</td><td align="left">104.626637601</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">平凉市</td><td align="left">35.55011019</td><td align="left">106.688911157</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">庆阳市</td><td align="left">35.7268007545</td><td align="left">107.644227087</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">张掖市</td><td align="left">38.939320297</td><td align="left">100.459891869</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">武威市</td><td align="left">37.9331721429</td><td align="left">102.640147343</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">甘南藏族自治州</td><td align="left">34.9922111784</td><td align="left">102.917442486</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">白银市</td><td align="left">36.5466817062</td><td align="left">104.171240904</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">酒泉市</td><td align="left">39.7414737682</td><td align="left">98.5084145062</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">金昌市</td><td align="left">38.5160717995</td><td align="left">102.208126263</td></tr><tr><td align="left">五线</td><td align="left">甘肃省</td><td align="left">陇南市</td><td align="left">33.3944799729</td><td align="left">104.934573406</td></tr><tr><td align="left">五线</td><td align="left">西藏自治区</td><td align="left">山南市</td><td align="left">29.24009053</td><td align="left">91.77186941</td></tr><tr><td align="left">五线</td><td align="left">西藏自治区</td><td align="left">拉萨市</td><td align="left">29.6625570621</td><td align="left">91.111890896</td></tr><tr><td align="left">五线</td><td align="left">西藏自治区</td><td align="left">日喀则市</td><td align="left">29.27026627</td><td align="left">88.8790711</td></tr><tr><td align="left">五线</td><td align="left">西藏自治区</td><td align="left">昌都市</td><td align="left">31.1377727145</td><td align="left">97.178911139</td></tr><tr><td align="left">五线</td><td align="left">西藏自治区</td><td align="left">林芝市</td><td align="left">29.65162511</td><td align="left">94.36036694</td></tr><tr><td align="left">五线</td><td align="left">西藏自治区</td><td align="left">那曲地区</td><td align="left">31.4806798301</td><td align="left">92.0670183689</td></tr><tr><td align="left">五线</td><td align="left">西藏自治区</td><td align="left">阿里地区</td><td align="left">30.4045565883</td><td align="left">81.1076686895</td></tr><tr><td align="left">五线</td><td align="left">贵州省</td><td align="left">六盘水市</td><td align="left">26.5918660603</td><td align="left">104.85208676</td></tr><tr><td align="left">五线</td><td align="left">贵州省</td><td align="left">安顺市</td><td align="left">26.2285945777</td><td align="left">105.928269966</td></tr><tr><td align="left">五线</td><td align="left">贵州省</td><td align="left">毕节市</td><td align="left">27.4085621313</td><td align="left">105.333323371</td></tr><tr><td align="left">五线</td><td align="left">贵州省</td><td align="left">铜仁市</td><td align="left">27.6749026906</td><td align="left">109.168558028</td></tr><tr><td align="left">五线</td><td align="left">贵州省</td><td align="left">黔西南布依族苗族自治州</td><td align="left">25.0951480559</td><td align="left">104.900557798</td></tr><tr><td align="left">五线</td><td align="left">辽宁省</td><td align="left">朝阳市</td><td align="left">41.5718276679</td><td align="left">120.446162703</td></tr><tr><td align="left">五线</td><td align="left">陕西省</td><td align="left">商洛市</td><td align="left">33.8739073951</td><td align="left">109.934208154</td></tr><tr><td align="left">五线</td><td align="left">陕西省</td><td align="left">安康市</td><td align="left">32.70437045</td><td align="left">109.038044563</td></tr><tr><td align="left">五线</td><td align="left">陕西省</td><td align="left">延安市</td><td align="left">36.6033203523</td><td align="left">109.500509757</td></tr><tr><td align="left">五线</td><td align="left">陕西省</td><td align="left">汉中市</td><td align="left">33.0815689782</td><td align="left">107.045477629</td></tr><tr><td align="left">五线</td><td align="left">陕西省</td><td align="left">铜川市</td><td align="left">34.9083676964</td><td align="left">108.968067013</td></tr><tr><td align="left">五线</td><td align="left">青海省</td><td align="left">果洛藏族自治州</td><td align="left">34.4804845846</td><td align="left">100.223722769</td></tr><tr><td align="left">五线</td><td align="left">青海省</td><td align="left">海东市</td><td align="left">36.48200757</td><td align="left">102.39968314</td></tr><tr><td align="left">五线</td><td align="left">青海省</td><td align="left">海北藏族自治州</td><td align="left">36.9606541011</td><td align="left">100.879802174</td></tr><tr><td align="left">五线</td><td align="left">青海省</td><td align="left">海南藏族自治州</td><td align="left">36.2843638038</td><td align="left">100.624066094</td></tr><tr><td align="left">五线</td><td align="left">青海省</td><td align="left">海西蒙古族藏族自治州</td><td align="left">37.3737990706</td><td align="left">97.3426254153</td></tr><tr><td align="left">五线</td><td align="left">青海省</td><td align="left">玉树藏族自治州</td><td align="left">33.0062399097</td><td align="left">97.0133161374</td></tr><tr><td align="left">五线</td><td align="left">青海省</td><td align="left">黄南藏族自治州</td><td align="left">35.5228515517</td><td align="left">102.007600308</td></tr><tr><td align="left">五线</td><td align="left">黑龙江省</td><td align="left">七台河市</td><td align="left">45.7750053686</td><td align="left">131.019048047</td></tr><tr><td align="left">五线</td><td align="left">黑龙江省</td><td align="left">伊春市</td><td align="left">47.7346850751</td><td align="left">128.910765978</td></tr><tr><td align="left">五线</td><td align="left">黑龙江省</td><td align="left">双鸭山市</td><td align="left">46.6551020625</td><td align="left">131.17140174</td></tr><tr><td align="left">五线</td><td align="left">黑龙江省</td><td align="left">绥化市</td><td align="left">46.646063927</td><td align="left">126.989094572</td></tr><tr><td align="left">五线</td><td align="left">黑龙江省</td><td align="left">鸡西市</td><td align="left">45.3215398866</td><td align="left">130.941767273</td></tr><tr><td align="left">五线</td><td align="left">黑龙江省</td><td align="left">鹤岗市</td><td align="left">47.3386659037</td><td align="left">130.292472051</td></tr><tr><td align="left">五线</td><td align="left">黑龙江省</td><td align="left">黑河市</td><td align="left">50.2506900907</td><td align="left">127.500830295</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>Cesium</tag>
      
      <tag>经纬度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cesium for unreal的使用</title>
    <link href="/2022/08/23/cesium%20for%20unreal%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/08/23/cesium%20for%20unreal%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<center>使用cesium for unreal</center><!--- more ---><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h3><p>首先在虚幻商城中下载cesium for unreal</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823170753446.png" alt="image-20220823170753446"></p><p>下载完后安装到引擎，然后在插件中启用</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823170836757.png" alt="image-20220823170836757"></p><p>登录cesium后点击两个红色方框左侧的加号添加相应组件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823171037584.png" alt="image-20220823171037584"></p><p>在左侧大纲内可以看到出现以下五个组件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823171147317.png" alt="image-20220823171147317"></p><h3 id="2-下载并使用地图瓦片"><a href="#2-下载并使用地图瓦片" class="headerlink" title="2.下载并使用地图瓦片"></a>2.下载并使用地图瓦片</h3><p>如果不是首次下载瓦片可以直接跳过下载最小级别的地图部分，<a href="#jump">点击此处跳过</a>。</p><p>首先在水经微图中下载瓦片，<strong>必须要从最小级开始下载</strong>，否则无法正常加载，<strong>而且必须按照瓦片下载</strong>，不能使用框线或多边形等，否则会出现白色边界，因为同一张瓦片只能同时显示一张图片，如果png图片出现透明背景则会出现白色边界，准确来说白色是地形的颜色。</p><ul><li>首先选择地图，<strong>这里地图必须是WGS84否则加载会出现问题</strong></li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823184059036.png" alt="image-20220823184059036"></p><ul><li>点击<code>瓦片</code>，然后输入1_1_1</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823183926460.png" alt="image-20220823183926460"></p><ul><li>滑动滚轮进行缩放直到出现现在按钮</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823184723297.png" alt="image-20220823184723297"></p><ul><li><p>点击下载，然后选择仅下载影像(即不需要标注，按需求选择)，然后对任务进行命名，命名之后创建的文件夹名称将根据任务来命名，然后按需求选择下载的级别。图中下载到7级，这个级别在之后会有用所以在命名的时候最好是<code>&lt;瓦片编号&gt; (&lt;下载等级&gt;)</code>。</p><p>如：<code>1_1_1(2-7)</code>表示1_1_1号瓦片的2到7级。</p></li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823184945766.png" alt="image-20220823184945766"></p><ul><li>在导出设置中按下图进行操作：以此选择导出瓦片，标准TMS瓦片，PNG，透明背景</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823190141190.png" alt="image-20220823190141190"></p><p>然后点击确定，再点确定开始下载，下载完成后的目录结构如下图所示。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823192112703.png" alt="image-20220823192112703"></p><ul><li>然后将<code>tms.xml</code>改为<code>tilemapresource.xml</code> 因为cesium for unreal读取的文件名和水经注生成的文件名不一样，所以需要修改。</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823192254611.png" alt="image-20220823192254611"></p><p>然后修改xml文件中的大小写，水经微图生成的xml文件是小写，但cesium for unreal读取的xml是大写开头，所以需要将xml中小写字母开头的改为大写，可以直接复制粘贴。</p><p><strong>tilemapresource.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">TileMap</span> <span class="hljs-attr">tilemapservice</span>=<span class="hljs-string">&quot;http://tms.osgeo.org/1.0.0&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Title</span>&gt;</span>1_1_1(1-7)<span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Abstract</span>&gt;</span>WeMap Export TMS<span class="hljs-tag">&lt;/<span class="hljs-name">Abstract</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">SRS</span>&gt;</span>EPSG:4326<span class="hljs-tag">&lt;/<span class="hljs-name">SRS</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">vsrs</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">BoundingBox</span> <span class="hljs-attr">minx</span>=<span class="hljs-string">&quot;-180.000000000&quot;</span> <span class="hljs-attr">miny</span>=<span class="hljs-string">&quot;-90.000000000&quot;</span> <span class="hljs-attr">maxx</span>=<span class="hljs-string">&quot;180.000000000&quot;</span> <span class="hljs-attr">maxy</span>=<span class="hljs-string">&quot;90.000000000&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Origin</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;-180.000000000&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;-90.000000000&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TileFormat</span> <span class="hljs-attr">extension</span>=<span class="hljs-string">&quot;png&quot;</span> <span class="hljs-attr">mime-type</span>=<span class="hljs-string">&quot;image/png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;256&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TileSets</span> <span class="hljs-attr">profile</span>=<span class="hljs-string">&quot;global-geodetic&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;0&quot;</span>  <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.703125000&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.351562500&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;2&quot;</span>  <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.175781250&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;3&quot;</span>  <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.087890625&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;4&quot;</span>  <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.043945313&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;5&quot;</span>  <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.021972656&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;6&quot;</span>  <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.010986328&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;7&quot;</span>  <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.005493164&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;8&quot;</span>  <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;8&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.002746582&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;9&quot;</span>  <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;9&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.001373291&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.000686646&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;11&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;11&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.000343323&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.000171661&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;13&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;13&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.000085831&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;14&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;14&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.000042915&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;15&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;15&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.000021458&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;16&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;16&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.000010729&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;17&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;17&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.000005364&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;18&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;18&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.000002682&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;19&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;19&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.000001341&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TileSet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">units-per-pixel</span>=<span class="hljs-string">&quot;0.000000671&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">TileSets</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">TileMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>保存好之后，将这个文件夹放到文件服务器中就可以在ue中使用2-7级别的贴图了，这里我直接将文件服务器开在文件中。在此处打开Powershell，</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823194951205.png" alt="image-20220823194951205"></p><p>然后执行命令：<code>python -m http.server 8887</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823195111088.png" alt="image-20220823195111088"></p><ul><li>打开第一步准备好的ue</li><li>删掉bing maps aerial，此时场景中只剩下地形，而这个地形也是在线的，后面也需要将其替换掉</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823193634917.png" alt="image-20220823193634917"></p><ul><li>然后点击添加按钮，添加<code>CesiumTileMapServiceRasterOverlay</code>子组件到 <code>world Terrain</code>中</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823194121736.png" alt="image-20220823194121736"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823194301125.png" alt="image-20220823194301125"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823194356945.png" alt="添加完成"></p><ul><li><p>点击这个组件，然后在组件将&#96;<a href="http://loacalhost:8887/%E7%B2%98%E8%B4%B4%E5%88%B0url%E4%B8%AD">http://loacalhost:8887/粘贴到url中</a></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823195518215.png" alt="image-20220823195518215"></p><p>然后就可以看到白色的地形上加载了地图瓦片</p></li></ul><p><a id="jump">如果不是第一次加载瓦片</a>可以在之前下载好的瓦片上进行覆盖，即不用从最小级别的瓦片开始，需要用到哪一步分的瓦片就下载那一部分。比如需要下载广州的瓦片，因为之前全球的瓦片已经下载到7级所以将，地图缩放到7级通过瓦片选择7_53_12和7_53_13两块比较合适的瓦片。点击下载</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823200635325.png" alt="image-20220823200635325"></p><p>然后此时从8级开始选择，合适的级别</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823200837445.png" alt="image-20220823200837445"></p><p>导出设置也和第一次一样</p><p>下载好之后目录结构如图所示，将三个文件夹直接拖到前面下载好的文件夹中即可自动覆盖。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220823201138432.png" alt="image-20220823201138432"></p><h3 id="下载并使用地形"><a href="#下载并使用地形" class="headerlink" title="下载并使用地形"></a>下载并使用地形</h3><p>在水经微图中选好区域后双击，选好分级，然后点击导出设置</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220914173629400.png" alt="image-20220914173629400"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220914173911540.png" alt="image-20220914173911540"></p><p>然后选择导出目录并确定，并保存好刚刚下载好的tif文件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220914174203056.png" alt="image-20220914174203056"></p><p>按下图所示依次点击数据处理，地形切片，添加刚刚下载好的tif文件，并选择好输出路径。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220914174333791.png" alt="image-20220914174333791"></p><p>处理好之后目录结构如下图所示，可以开启文件服务并在ue中使用</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220919150701787.png" alt="image-20220919150701787"></p><p>在ue的Source中填写好刚刚文件服务中layer.json的地址</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220919151104266.png" alt="image-20220919151104266"></p><h3 id="下载并使用白模"><a href="#下载并使用白模" class="headerlink" title="下载并使用白模"></a>下载并使用白模</h3><p>下载shp文件，导入cesiumlab并设置高度，导出，放在服务中</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220919153424955.png" alt="image-20220919153424955"></p><p>在ue中添加Cesium3DTileset，并填写好刚刚添加的服务</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220919153824153.png" alt="image-20220919153824153"></p><p>​</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>Cesium</tag>
      
      <tag>瓦片</tag>
      
      <tag>地形</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5批量添加给物体添加lod</title>
    <link href="/2022/08/10/%E6%89%B9%E9%87%8F%E7%BB%99%E7%89%A9%E4%BD%93%E6%B7%BB%E5%8A%A0LOD/"/>
    <url>/2022/08/10/%E6%89%B9%E9%87%8F%E7%BB%99%E7%89%A9%E4%BD%93%E6%B7%BB%E5%8A%A0LOD/</url>
    
    <content type="html"><![CDATA[<center>批量添加lod</center><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>首先关闭客户端</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220810181347081.png" alt="image-20220810181347081"></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>打开UE安装目录，找到config目录下的BaseEngine.ini文件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220810181608976.png" alt="image-20220810181608976"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220810181656883.png" alt="image-20220810181656883"></p><p>打开该文件，按<code>CTL</code>+<code>F</code>，搜索LODSet</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220810181800056.png" alt="image-20220810181800056"></p><p>找到StaticMeshLODSettings</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220810181915403.png" alt="image-20220810181915403"></p><p>然后在HighDetail下面一行添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Testlod=(NumLODs=8,BasePercentTriangles=100,LODPercentTriangles=50,Name=LOCTEXT(<span class="hljs-string">&quot;Testlod&quot;</span>,<span class="hljs-string">&quot;Test lod&quot;</span>))<br></code></pre></td></tr></table></figure><table><thead><tr><th>字段名称</th><th>含义</th></tr></thead><tbody><tr><td>TestLod</td><td>代表该lod组的名称，可以自己修改，自定义值。</td></tr><tr><td>NumLODs</td><td>表示LOD的分组数量</td></tr><tr><td>BasePercentTriangles</td><td>表示lod0的三角面压缩比例，100表示lod0不进行压缩三角面，50表示lod0为减少了一半的三角面</td></tr></tbody></table><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>打开工程，在内容浏览器中设置试图类型为列，然后更具三角面的大小批量选择需要设置lod的资产</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220810183147392.png" alt="image-20220810183147392"></p><p>选择好之后右键点击，然后依次选择资产操作，通过属性矩阵进行批量编辑</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220810183419011.png" alt="image-20220810183419011"></p><p>然后在搜索框输入lod，在lodsettings中输入Testlod然后回车，然后等待操作完成即可</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220810183629305.png" alt="image-20220810183629305"></p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>lod</tag>
      
      <tag>批量化操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE控制pawn旋转</title>
    <link href="/2022/07/21/Pawn%E5%B0%81%E8%A3%85/"/>
    <url>/2022/07/21/Pawn%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<center>Pawn的旋转和移动问题</center><!--- more ---><h2 id="pawn功能封装"><a href="#pawn功能封装" class="headerlink" title="pawn功能封装"></a>pawn功能封装</h2><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721101348266.png" alt="pawn的结构"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721103248487.png" alt="函数"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721103313701.png" alt="宏"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721103407066.png" alt="变量"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721103451744.png" alt="事件分发器"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721103056327.png" alt="弹簧臂初始化函数"></p><h3 id="控制上下移动"><a href="#控制上下移动" class="headerlink" title="控制上下移动"></a>控制上下移动</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721100711275.png" alt="控制物体上下移动"></p><h3 id="单击、双击事件和长按标识"><a href="#单击、双击事件和长按标识" class="headerlink" title="单击、双击事件和长按标识"></a>单击、双击事件和长按标识</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721100905579.png" alt="右键单击、双击和长按标识"></p><h3 id="右键单击、双击和长按标识"><a href="#右键单击、双击和长按标识" class="headerlink" title="右键单击、双击和长按标识"></a>右键单击、双击和长按标识</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721101006566.png" alt="右键单击双击和长按标识"></p><h3 id="鼠标中键单击、双击和长按标识"><a href="#鼠标中键单击、双击和长按标识" class="headerlink" title="鼠标中键单击、双击和长按标识"></a>鼠标中键单击、双击和长按标识</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721101104545.png" alt="鼠标中键单击双击和长按标识"></p><h3 id="wasd控制物体移动"><a href="#wasd控制物体移动" class="headerlink" title="wasd控制物体移动"></a>wasd控制物体移动</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721101137935.png" alt="wasd控制移动"></p><h3 id="左右键长按事件"><a href="#左右键长按事件" class="headerlink" title="左右键长按事件"></a>左右键长按事件</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721101251435.png" alt="左右键长按事件"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721101828222.png" alt="控制两个轴的旋转"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721101535357.png" alt="ControlAx控制yaw旋转"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721101638783.png" alt="ControlAY控制pawn的pich旋转"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721101923506.png" alt="根据springarm臂长度设置pawn移动速度"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721102110691.png" alt="弹簧臂和移动速度的转换"></p><h3 id="鼠标滚轮的缩放"><a href="#鼠标滚轮的缩放" class="headerlink" title="鼠标滚轮的缩放"></a>鼠标滚轮的缩放</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721102249966.png" alt="鼠标滚轮的缩放"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721102537617.png" alt="弹簧臂向前移动"></p><p>上面的节点表示弹簧臂在摄像头的方向上移动100个单位，即pawn往红色箭头的方向上移动</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721102937987.png" alt="移动示意图"></p><h2 id="关卡蓝图中引用"><a href="#关卡蓝图中引用" class="headerlink" title="关卡蓝图中引用"></a>关卡蓝图中引用</h2><p>在关卡蓝图中创建一个变量</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220819142718144.png" alt="image-20220819142718144"></p><p><a href="">Pawn下载地址</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>旋转</tag>
      
      <tag>pawn</tag>
      
      <tag>2022实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE控制pawn旋转</title>
    <link href="/2022/07/21/ue%E4%B8%AD%E6%8E%A7%E5%88%B6pawn%E6%97%8B%E8%BD%AC/"/>
    <url>/2022/07/21/ue%E4%B8%AD%E6%8E%A7%E5%88%B6pawn%E6%97%8B%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<center>pawn的旋转和移动问题</center><!--- more ---><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721094115579.png" alt="pawn和pawn弹簧臂上的camera"></p><p>这个pawn由弹簧臂和camera组成</p><h3 id="pawn本身旋转"><a href="#pawn本身旋转" class="headerlink" title="pawn本身旋转"></a>pawn本身旋转</h3><hr><p>想要控制pawn本身旋转可以使用set actor rotation节点，target为需要旋转pawn的引用</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721094531133.png" alt="set actor rotation节点"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721094254021.png" alt="set actor rotation旋转的节点"></p><p>最后的效果为pawn旋转而弹簧臂和camera不旋转</p><h3 id="弹簧臂和摄像头旋转"><a href="#弹簧臂和摄像头旋转" class="headerlink" title="弹簧臂和摄像头旋转"></a>弹簧臂和摄像头旋转</h3><hr><p>想要摄像机旋转需要使用 set control rotation节点，旋转效果是将摄像机以弹簧臂的端点为中心，弹簧臂的长为圆锥的长进行旋转，而pawn本生是不进行旋转的</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721094823559.png" alt="set control rotation节点"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721094942133.png" alt="set actor rotation旋转目标"></p><h3 id="单独旋转摄像头"><a href="#单独旋转摄像头" class="headerlink" title="单独旋转摄像头"></a>单独旋转摄像头</h3><hr><p>在单独旋转摄像头的时候需要先设置camera的旋转为绝对旋转</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721095522017.png" alt="camera的绝对旋转"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721095901447.png" alt="摄像头set world rotation节点"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220721100044325.png" alt="camera旋转"></p><p>最后的效果是camera以自身中心为参看进行旋转</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>旋转</tag>
      
      <tag>pawn</tag>
      
      <tag>2022实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10打包设置</title>
    <link href="/2022/07/14/UE5%E6%89%93%E5%8C%85%E8%AE%BE%E7%BD%AE/"/>
    <url>/2022/07/14/UE5%E6%89%93%E5%8C%85%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<center>visual studio install打包设置</center><!--- more ---><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220714164516415.png" alt="image-20220714164516415"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220714164534974.png" alt="image-20220714164534974"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220714164328553.png" alt="image-20220714164328553"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220714164431929.png" alt="image-20220714164431929"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220714164439383.png" alt="image-20220714164439383"></p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>打包</tag>
      
      <tag>SDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ListView的显示</title>
    <link href="/2022/07/14/%E4%BD%BF%E7%94%A8ListView/"/>
    <url>/2022/07/14/%E4%BD%BF%E7%94%A8ListView/</url>
    
    <content type="html"><![CDATA[<center>使用ListView</center><!--- more ---><h3 id="ListView关键操作"><a href="#ListView关键操作" class="headerlink" title="ListView关键操作"></a>ListView关键操作</h3><p>向listview中增加数据</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220714114516125.png" alt="image-20220714114516125"></p><p><a href="https://blog.csdn.net/WangHaoDiablo/article/details/119253381">参考链接</a></p><p>清除listview</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>交互</tag>
      
      <tag>ListView</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在点击处生成标牌</title>
    <link href="/2022/07/08/%E5%9C%A8%E7%82%B9%E5%87%BB%E5%A4%84%E7%94%9F%E6%88%90%E6%A0%87%E7%89%8C/"/>
    <url>/2022/07/08/%E5%9C%A8%E7%82%B9%E5%87%BB%E5%A4%84%E7%94%9F%E6%88%90%E6%A0%87%E7%89%8C/</url>
    
    <content type="html"><![CDATA[<center>在点击处生成标牌</center><!--- more ---><p>在相应位置生成actor并设置billbord的标牌</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220708110003844.png" alt="image-20220708110003844"></p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>交互</tag>
      
      <tag>点击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pawn标准化操作模式</title>
    <link href="/2022/07/08/%E6%A0%87%E5%87%86%E5%8C%96pawn%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/07/08/%E6%A0%87%E5%87%86%E5%8C%96pawn%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<center>设置一个pawn标准化操作模式</center><!--- more ---><h3 id="新建一个pawn"><a href="#新建一个pawn" class="headerlink" title="新建一个pawn"></a>新建一个pawn</h3><p>首先新建一个pawn并在pawn中添加以下结构</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220708094257385.png" alt="image-20220708094257385"></p><p>完成以下蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220708094856443.png" alt="image-20220708094856443"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220708094939253.png" alt="image-20220708094939253"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220708095640011.png" alt="image-20220708095640011"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220708095731595.png" alt="image-20220708095731595"></p><p>最终效果</p><iframe src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1视频.mp4" frameborder=0 allowfullscreen></iframe><p>即点击按下左键围绕弹簧臂旋转视角，松开没有操作，按下右键拖动视角，松开没有操作，滚轮缩短弹簧臂。</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>交互</tag>
      
      <tag>点击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获得鼠标点击到的actor</title>
    <link href="/2022/07/06/%E8%8E%B7%E5%BE%97%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%9A%84%E7%89%A9%E4%BD%93/"/>
    <url>/2022/07/06/%E8%8E%B7%E5%BE%97%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%9A%84%E7%89%A9%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<center>获得鼠标点击到的actor</center><!--- more ---><ul><li>使用射线检测的方式这种方式需要添加碰撞盒子，否则射线无法与物体产生碰撞</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220706125118039.png" alt="image-20220706125118039"></p><ul><li>使用鼠标碰撞检测的方式，这种方式无需添加碰撞盒子</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220706125514105.png" alt="image-20220706125514105"></p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>交互</tag>
      
      <tag>点击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高亮效果</title>
    <link href="/2022/07/06/%E9%AB%98%E4%BA%AE%E6%95%88%E6%9E%9C/"/>
    <url>/2022/07/06/%E9%AB%98%E4%BA%AE%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<center>物体高亮效果</center><!--- more ---><p>设置后期处理的volum添加后期处理的材质，参考链接处</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220708102035161.png" alt="image-20220708102035161"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220708102251274.png" alt="image-20220708102251274"></p><p>在关卡蓝图中添加一下节点，Pawn_0_click是鼠标点击事件。</p><p><img src="U:%5C%E7%AC%94%E8%AE%B0%5C%E7%AC%94%E8%AE%B0%5C%E5%8D%9A%E5%AE%A2%5Cblog2%5Csource%5C_posts%5Cupload%5Cimg1image-20220708100906947.png" alt="image-20220708100906947"></p><p>主要节点是Get Hit Result Under Cursor for Objects</p><p><img src="U:%5C%E7%AC%94%E8%AE%B0%5C%E7%AC%94%E8%AE%B0%5C%E5%8D%9A%E5%AE%A2%5Cblog2%5Csource%5C_posts%5Cupload%5Cimg1image-20220708101313574.png" alt="image-20220708101313574"></p><p>Click Highlight 函数</p><p><img src="U:%5C%E7%AC%94%E8%AE%B0%5C%E7%AC%94%E8%AE%B0%5C%E5%8D%9A%E5%AE%A2%5Cblog2%5Csource%5C_posts%5Cupload%5Cimg1image-20220708101659479.png" alt="image-20220708101659479"></p><p><a href="https://blog.csdn.net/qq_41260655/article/details/123012713?spm=1001.2014.3001.5502">参考链接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>后期处理</tag>
      
      <tag>高亮效果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将actor上添加好的tag标签导出到数据库，重新导模型后再从数据库中导入并赋值</title>
    <link href="/2022/06/30/%E5%B0%86actor%E4%B8%8A%E6%B7%BB%E5%8A%A0%E5%A5%BD%E7%9A%84tag%E6%A0%87%E7%AD%BE%E5%AF%BC%E5%87%BA%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E9%87%8D%E6%96%B0%E5%AF%BC%E6%A8%A1%E5%9E%8B%E5%90%8E%E5%86%8D%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%AF%BC%E5%85%A5%E5%B9%B6%E8%B5%8B%E5%80%BC/"/>
    <url>/2022/06/30/%E5%B0%86actor%E4%B8%8A%E6%B7%BB%E5%8A%A0%E5%A5%BD%E7%9A%84tag%E6%A0%87%E7%AD%BE%E5%AF%BC%E5%87%BA%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E9%87%8D%E6%96%B0%E5%AF%BC%E6%A8%A1%E5%9E%8B%E5%90%8E%E5%86%8D%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%AF%BC%E5%85%A5%E5%B9%B6%E8%B5%8B%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<center>将actor上添加好的tag标签导出到数据库，重新导模型后再从数据库中导入并赋值</center><!--- more ---><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png"></p><h3 id="格式化tags"><a href="#格式化tags" class="headerlink" title="格式化tags"></a>格式化tags</h3><p>首先是将场景中所有actor的tag的长度都设置为一样，方便批量给tag赋值。如果不执行此操作，tag的数量不同的actor无法同时批量选中添加tag</p><h3 id="给相应的actor添加标签"><a href="#给相应的actor添加标签" class="headerlink" title="给相应的actor添加标签"></a>给相应的actor添加标签</h3><p>这个步骤需要手动将tag添加到actor上，可以使用其他视角批量选择并添加tag</p><h3 id="导出到数据库中"><a href="#导出到数据库中" class="headerlink" title="导出到数据库中"></a>导出到数据库中</h3><p>添加好正确的tag之后就可以将tag导出到数据库中。这里为了方便操作，使用了编辑器控件，也就是在编辑器模式调用，其实就是写了一个ue插件。下面是编辑器控件中蓝图，如果这部分部署，可以学习一下普通的控件。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220630100654263.png" alt="image-20220630100654263"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220630100803999.png" alt="image-20220630100803999"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220630102523217.png" alt="image-20220630102523217"></p><p>重命名tag，目的是统一标签格式方便操作</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220630103012510.png" alt="image-20220630103012510"></p><p>将命名好的tag和id对应关系导出到数据库</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220630103748315.png" alt="image-20220630103748315"></p><p>对应fastapi</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span><br>    uid: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span><br>    floortag: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span><br>    displayname: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/OutPut&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">Out_put</span>(<span class="hljs-params">item: Item</span>):<br>    mytemp = <span class="hljs-string">&quot;INSERT INTO outputdata_withdisplayname (id,floortag,uniqueId,displayname) VALUES (&quot;</span> + <span class="hljs-string">&quot; \&quot;&quot;</span> + item.<span class="hljs-built_in">id</span> + <span class="hljs-string">&quot; \&quot;&quot;</span> + <span class="hljs-string">&quot;,\&quot;&quot;</span> + item.floortag + <span class="hljs-string">&quot;\&quot;&quot;</span> + <span class="hljs-string">&quot;,\&quot;&quot;</span> + item.uid + <span class="hljs-string">&quot;\&quot;&quot;</span> + <span class="hljs-string">&quot;,\&quot;&quot;</span> + item.displayname + <span class="hljs-string">&quot;\&quot;&quot;</span> + <span class="hljs-string">&quot;);&quot;</span><br>    conn = pymysql.connect(host=<span class="hljs-string">&quot;localhost&quot;</span>,<br>                           port=<span class="hljs-number">3306</span>,<br>                           user=<span class="hljs-string">&quot;root&quot;</span>,<br>                           password=<span class="hljs-string">&quot;YJLs13981383032&quot;</span>,<br>                           database=<span class="hljs-string">&quot;mybatis&quot;</span>,<br>                           charset=<span class="hljs-string">&quot;utf8&quot;</span>)<br><br>    <span class="hljs-comment"># 3. 获取游标对象：执行sql语句</span><br>    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br>    <span class="hljs-comment"># 4. 执行sql语句</span><br><br>    <span class="hljs-comment"># 通过游标把sql语句给到mysql服务端</span><br>    <span class="hljs-keyword">try</span>:<br>        cursor.execute(mytemp)<br><br>    <span class="hljs-comment"># 获取查询结果:mysql服务端把执行sql语句的结果通过游标返回给python程序；</span><br>        conn.commit()<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span><br>    <span class="hljs-keyword">except</span>:<br>        conn.rollback()<br>        <span class="hljs-keyword">if</span> item.floortag !=<span class="hljs-string">&quot;None&quot;</span>:<br>            mytemp =<span class="hljs-string">&quot;UPDATE outputdata_withdisplayname SET floortag=\&quot;&quot;</span> + item.floortag + <span class="hljs-string">&quot;\&quot;WHERE uniqueId=\&quot;&quot;</span>+item.uid+<span class="hljs-string">&quot;\&quot;;&quot;</span><br>        <span class="hljs-comment"># 返回的数据类型是：元组，元组其中的每条数据还是一个元组</span><br>            cursor.execute(mytemp)<br><br>        <span class="hljs-comment"># 获取查询结果:mysql服务端把执行sql语句的结果通过游标返回给python程序；</span><br>            conn.commit()<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">404</span><br><br>    <span class="hljs-comment"># 5. 关闭游标</span><br>    cursor.close()<br><br>    <span class="hljs-comment"># 6. 关闭连接</span><br>    conn.close()<br>    resultSet = SQL(mytemp)<br>    <span class="hljs-built_in">print</span>(item.floortag)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="从数据库中导入"><a href="#从数据库中导入" class="headerlink" title="从数据库中导入"></a>从数据库中导入</h3><p>——首先遍历所有actor</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220630104249037.png" alt="image-20220630104249037"></p><p>然后 <font color='red'> <strong>重写forloop如果不重写会出现问题</strong></font> ，将需要循环的逻辑整个添加到循环中并添加0.01s延迟。具体参考在foreach loop中添加延迟delar<img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220630104403771.png" alt="image-20220630104403771"></p><p>然后将loopbody中的内容直接添加到重写的loop中 其中url默认值为<a href="http://127.0.0.1:8000/GetByUrl/">http://127.0.0.1:8000/GetByUrl/</a></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220630104629436.png" alt="image-20220630104629436"></p><p>对应的fastapi对应代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">SQL</span>(<span class="hljs-params">sql</span>):<br>    <span class="hljs-comment"># sql查询语句</span><br>    conn = pymysql.connect(host=<span class="hljs-string">&quot;localhost&quot;</span>,<br>                           port=<span class="hljs-number">3306</span>,<br>                           user=<span class="hljs-string">&quot;root&quot;</span>,<br>                           password=<span class="hljs-string">&quot;YJLs13981383032&quot;</span>,<br>                           database=<span class="hljs-string">&quot;mybatis&quot;</span>,<br>                           charset=<span class="hljs-string">&quot;utf8&quot;</span>)<br><br>    <span class="hljs-comment"># 3. 获取游标对象：执行sql语句</span><br>    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br>    <span class="hljs-comment"># 4. 执行sql语句</span><br><br>    <span class="hljs-comment"># 通过游标把sql语句给到mysql服务端</span><br><br>    cursor.execute(sql)<br><br>    <span class="hljs-comment"># 获取查询结果:mysql服务端把执行sql语句的结果通过游标返回给python程序；</span><br>    conn.commit()<br>    <span class="hljs-comment"># 返回的数据类型是：元组，元组其中的每条数据还是一个元组</span><br>    result = cursor.fetchall()<br><br>    <span class="hljs-comment"># 5. 关闭游标</span><br>    cursor.close()<br><br>    <span class="hljs-comment"># 6. 关闭连接</span><br>    conn.close()<br>    <span class="hljs-keyword">return</span> result<br><br>temStr = <span class="hljs-string">&quot;SELECT * FROM outputdata_withdisplayname;&quot;</span><br><br>results = SQL(temStr)<br>state = <span class="hljs-string">&quot;200&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sql =&quot;</span>)<br><span class="hljs-built_in">print</span>(temStr)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;result = &quot;</span>)<br>restFull = &#123;&#125;<br>restFull[<span class="hljs-string">&quot;json&quot;</span>] = results<br>i = <span class="hljs-number">0</span><br>myJson = &#123;&#125;<br><br><span class="hljs-comment"># 从表2读取</span><br>temStr2 = <span class="hljs-string">&quot;SELECT * FROM excepttable;&quot;</span><br>results2 = SQL(temStr2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sql =&quot;</span>)<br><span class="hljs-built_in">print</span>(temStr2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;result = &quot;</span>)<br>restFull2 = &#123;&#125;<br>restFull2[<span class="hljs-string">&quot;json&quot;</span>] = results2<br>myJson2 = &#123;&#125;<br><br><span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:<br>    i = i + <span class="hljs-number">1</span><br><br>    myTempStr = result[<span class="hljs-string">&#x27;uniqueId&#x27;</span>]<br>    myJson[myTempStr] = result[<span class="hljs-string">&#x27;floortag&#x27;</span>]<br><br>j = json.dumps(myJson)<br><span class="hljs-built_in">print</span>(j)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(j))<br><br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/GetByUrl/&#123;uid&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">Get_by_url</span>(<span class="hljs-params">uid: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-comment"># 通过接口返回的json数据获得对应的值</span><br><br>    returJson = &#123;&#125;<br><br>    <span class="hljs-keyword">if</span> myJson.get(uid):<br>        returJson[<span class="hljs-string">&quot;floor&quot;</span>] = myJson[uid]<br>        <span class="hljs-keyword">return</span> returJson<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;None&quot;</span><br></code></pre></td></tr></table></figure><h3 id="接口完整代码"><a href="#接口完整代码" class="headerlink" title="接口完整代码"></a>接口完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><br>app = FastAPI()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SQL</span>(<span class="hljs-params">sql</span>):<br>    <span class="hljs-comment"># sql查询语句</span><br>    conn = pymysql.connect(host=<span class="hljs-string">&quot;localhost&quot;</span>,<br>                           port=<span class="hljs-number">3306</span>,<br>                           user=<span class="hljs-string">&quot;root&quot;</span>,<br>                           password=<span class="hljs-string">&quot;YJLs13981383032&quot;</span>,<br>                           database=<span class="hljs-string">&quot;mybatis&quot;</span>,<br>                           charset=<span class="hljs-string">&quot;utf8&quot;</span>)<br><br>    <span class="hljs-comment"># 3. 获取游标对象：执行sql语句</span><br>    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br>    <span class="hljs-comment"># 4. 执行sql语句</span><br><br>    <span class="hljs-comment"># 通过游标把sql语句给到mysql服务端</span><br><br>    cursor.execute(sql)<br><br>    <span class="hljs-comment"># 获取查询结果:mysql服务端把执行sql语句的结果通过游标返回给python程序；</span><br>    conn.commit()<br>    <span class="hljs-comment"># 返回的数据类型是：元组，元组其中的每条数据还是一个元组</span><br>    result = cursor.fetchall()<br><br>    <span class="hljs-comment"># 5. 关闭游标</span><br>    cursor.close()<br><br>    <span class="hljs-comment"># 6. 关闭连接</span><br>    conn.close()<br>    <span class="hljs-keyword">return</span> result<br><br><br>temStr = <span class="hljs-string">&quot;SELECT * FROM outputdata_withdisplayname;&quot;</span><br><br>results = SQL(temStr)<br>state = <span class="hljs-string">&quot;200&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sql =&quot;</span>)<br><span class="hljs-built_in">print</span>(temStr)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;result = &quot;</span>)<br>restFull = &#123;&#125;<br>restFull[<span class="hljs-string">&quot;json&quot;</span>] = results<br>i = <span class="hljs-number">0</span><br>myJson = &#123;&#125;<br><br><span class="hljs-comment"># 从表2读取</span><br>temStr2 = <span class="hljs-string">&quot;SELECT * FROM excepttable;&quot;</span><br>results2 = SQL(temStr2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sql =&quot;</span>)<br><span class="hljs-built_in">print</span>(temStr2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;result = &quot;</span>)<br>restFull2 = &#123;&#125;<br>restFull2[<span class="hljs-string">&quot;json&quot;</span>] = results2<br>myJson2 = &#123;&#125;<br><br><span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:<br>    i = i + <span class="hljs-number">1</span><br><br>    myTempStr = result[<span class="hljs-string">&#x27;uniqueId&#x27;</span>]<br>    myJson[myTempStr] = result[<span class="hljs-string">&#x27;floortag&#x27;</span>]<br><br>j = json.dumps(myJson)<br><span class="hljs-built_in">print</span>(j)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(j))<br><br><span class="hljs-keyword">for</span> result2 <span class="hljs-keyword">in</span> results2:<br>    i = i + <span class="hljs-number">1</span><br><br>    myTempStr2 = result2[<span class="hljs-string">&#x27;id&#x27;</span>]<br>    myJson2[myTempStr2] = result2[<span class="hljs-string">&#x27;floortag&#x27;</span>]<br><br>j2 = json.dumps(myJson2)<br><span class="hljs-built_in">print</span>(j2)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(j2))<br><br><br><span class="hljs-comment"># @app.get(&quot;/GetUrl/&quot;)</span><br><span class="hljs-comment"># def Get_Url():</span><br><span class="hljs-comment">#     url = &quot;http://127.0.0.1:8000/Reload/Revit.Element.UniqueId.00b5cc5b-4c62-44ba-a83d-b26e07e60ca2-002be2b5&quot;</span><br><span class="hljs-comment">#     res = requests.get(url)</span><br><span class="hljs-comment">#     print(type(res))</span><br><span class="hljs-comment">#     return res.json()</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># count_i = 0</span><br><br><br><br><br><br><span class="hljs-comment"># 从数据库中读取记录发送到ue</span><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/GetByUrl/&#123;uid&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">Get_by_url</span>(<span class="hljs-params">uid: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-comment"># 通过接口返回的json数据获得对应的值</span><br><br>    returJson = &#123;&#125;<br><br>    <span class="hljs-keyword">if</span> myJson.get(uid):<br>        returJson[<span class="hljs-string">&quot;floor&quot;</span>] = myJson[uid]<br>        <span class="hljs-keyword">return</span> returJson<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;None&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span><br>    uid: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span><br>    floortag: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span><br>    displayname: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span><br><br><br><span class="hljs-comment"># 从场景中接收id、楼层号、uid和显示名称，并存储到数据库中。如果有字段相同的判断floortag的值是否为&quot;None&quot;,如果为“None”则不进行操作，否则更新该记录</span><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/OutPut&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">Out_put</span>(<span class="hljs-params">item: Item</span>):<br>    mytemp = <span class="hljs-string">&quot;INSERT INTO outputdata_withdisplayname (id,floortag,uniqueId,displayname) VALUES (&quot;</span> + <span class="hljs-string">&quot; \&quot;&quot;</span> + item.<span class="hljs-built_in">id</span> + <span class="hljs-string">&quot; \&quot;&quot;</span> + <span class="hljs-string">&quot;,\&quot;&quot;</span> + item.floortag + <span class="hljs-string">&quot;\&quot;&quot;</span> + <span class="hljs-string">&quot;,\&quot;&quot;</span> + item.uid + <span class="hljs-string">&quot;\&quot;&quot;</span> + <span class="hljs-string">&quot;,\&quot;&quot;</span> + item.displayname + <span class="hljs-string">&quot;\&quot;&quot;</span> + <span class="hljs-string">&quot;);&quot;</span><br>    conn = pymysql.connect(host=<span class="hljs-string">&quot;localhost&quot;</span>,<br>                           port=<span class="hljs-number">3306</span>,<br>                           user=<span class="hljs-string">&quot;root&quot;</span>,<br>                           password=<span class="hljs-string">&quot;YJLs13981383032&quot;</span>,<br>                           database=<span class="hljs-string">&quot;mybatis&quot;</span>,<br>                           charset=<span class="hljs-string">&quot;utf8&quot;</span>)<br><br>    <span class="hljs-comment"># 3. 获取游标对象：执行sql语句</span><br>    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br>    <span class="hljs-comment"># 4. 执行sql语句</span><br><br>    <span class="hljs-comment"># 通过游标把sql语句给到mysql服务端</span><br>    <span class="hljs-keyword">try</span>:<br>        cursor.execute(mytemp)<br><br>    <span class="hljs-comment"># 获取查询结果:mysql服务端把执行sql语句的结果通过游标返回给python程序；</span><br>        conn.commit()<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span><br>    <span class="hljs-keyword">except</span>:<br>        conn.rollback()<br>        <span class="hljs-keyword">if</span> item.floortag !=<span class="hljs-string">&quot;None&quot;</span>:<br>            mytemp =<span class="hljs-string">&quot;UPDATE outputdata_withdisplayname SET floortag=\&quot;&quot;</span> + item.floortag + <span class="hljs-string">&quot;\&quot;WHERE uniqueId=\&quot;&quot;</span>+item.uid+<span class="hljs-string">&quot;\&quot;;&quot;</span><br>        <span class="hljs-comment"># 返回的数据类型是：元组，元组其中的每条数据还是一个元组</span><br>            cursor.execute(mytemp)<br><br>        <span class="hljs-comment"># 获取查询结果:mysql服务端把执行sql语句的结果通过游标返回给python程序；</span><br>            conn.commit()<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">404</span><br><br>    <span class="hljs-comment"># 5. 关闭游标</span><br>    cursor.close()<br><br>    <span class="hljs-comment"># 6. 关闭连接</span><br>    conn.close()<br>    resultSet = SQL(mytemp)<br>    <span class="hljs-built_in">print</span>(item.floortag)<br><br><br><br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="数据库表结构"><a href="#数据库表结构" class="headerlink" title="数据库表结构"></a>数据库表结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br> Navicat Premium Data Transfer<br><br> Source Server         : test2<br> Source Server Type    : MySQL<br> Source Server Version : 80019<br> Source Host           : localhost:3306<br> Source Schema         : mybatis<br><br> Target Server Type    : MySQL<br> Target Server Version : 80019<br> File Encoding         : 65001<br><br> Date: 06/07/2022 09:25:20<br>*/<br><br>SET NAMES utf8mb4;<br>SET FOREIGN_KEY_CHECKS = 0;<br><br>-- ----------------------------<br>-- Table structure for outputdata<br>-- ----------------------------<br>DROP TABLE IF EXISTS `outputdata`;<br>CREATE TABLE `outputdata`  (<br>  `uniqueId` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,<br>  `id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,<br>  `floortag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,<br>  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,<br>  PRIMARY KEY (`uniqueId`) USING BTREE<br>) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;<br><br>SET FOREIGN_KEY_CHECKS = 1;<br><br></code></pre></td></tr></table></figure><h3 id="刷新tag"><a href="#刷新tag" class="headerlink" title="刷新tag"></a>刷新tag</h3><hr><p>因为ue5中如果不同actor的tag数量不同，是无法统一编辑的，所以在添加tag的时候应该先将场景中的tag都刷一遍。</p><p>新建一个编辑器工具控件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220706093915962.png" alt="image-20220706093915962"></p><p>在控件中添加相应的按钮</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220706101131998.png" alt="image-20220706101131998"></p><p>添加点击事件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220706101221227.png" alt="image-20220706101221227"></p><p>最后右键运行控件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220706101320112.png" alt="image-20220706101320112"></p><p>点击控件按钮即可将所有actor长度规范为相同</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220706125830613.png" alt="image-20220706125830613"></p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>Mysql</tag>
      
      <tag>2022实习</tag>
      
      <tag>数据库</tag>
      
      <tag>批量操作</tag>
      
      <tag>接口</tag>
      
      <tag>编辑器控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给actor添加tag</title>
    <link href="/2022/06/22/%E7%BB%99actor%E6%B7%BB%E5%8A%A0tag/"/>
    <url>/2022/06/22/%E7%BB%99actor%E6%B7%BB%E5%8A%A0tag/</url>
    
    <content type="html"><![CDATA[<center>给actor添加tag</center><!--- more ---><p><a href="https://www.versluis.com/2020/10/how-to-tag-an-actor-in-unreal-engine/">参考连接</a></p><p>判断actor是否有某个对应的tag值</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220622154225708.png" alt="image-20220622154225708"></p><p>使用标签批量化操作会出现一个问题，就是tag数组长度不一致，就会出现无法对tag进行操作的问题。解决思路是把从3d软件中导出的模型中的自带的tag值先储存起来，然后将tag重新刷一遍。新建一个actor，然后在该actor中添加一个函数GetTags，在GetTags中添加以下代码。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206221755784.png" alt="image-20220622175557360"></p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>Tag</tag>
      
      <tag>编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5建立websocket连接</title>
    <link href="/2022/06/15/UE%20websocket/"/>
    <url>/2022/06/15/UE%20websocket/</url>
    
    <content type="html"><![CDATA[<p>UE建立websocket连接</p><span id="more"></span><h3 id="使用的插件"><a href="#使用的插件" class="headerlink" title="使用的插件"></a>使用的插件</h3><hr><ul><li>在虚幻商城中安装插件</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220706093436683.png" alt="image-20220706093436683"></p><ul><li>在蓝图中添加以下节点</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220706094418562.png" alt="image-20220706094418562"></p><ul><li>插件安装页面</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1image-20220706095006605.png" alt="image-20220706095006605"></p><p>可以和socket服务器进行通信</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>Websocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用flask socketio过程中遇到的问题</title>
    <link href="/2022/06/13/%E4%BD%BF%E7%94%A8flask%20socketio%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/13/%E4%BD%BF%E7%94%A8flask%20socketio%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>Python 环境配置中的问题</p><p>在配置flask中遇到的问题</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>因为要使用长连接，所以选择使用flask socketio来完成，但网上的资料很少，按照demo演示一步步做，始终报错,400。最终还是解决了网页和服务器通信。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1.版本问题，一共需要注意三个东西分别是flask-socketio、python-socketio、python-engineio，这三个包不用指定版本，使用 pipenv直接安装最新版本即可。</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206131830060.png" alt="image-20220613183051826" style="zoom:50%;" /><p>2.程序代码问题，在程序中错误的写法<code>socketio = SocketIO(app)</code>。正确的写法应该为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON">socketio = SocketIO(app, cors_allowed_origins=<span class="hljs-string">&#x27;*&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206131823634.png" alt="image-20220613182351473"></p><p>3.客户端问题，在客户端中引入时需要注意版本</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206131835516.png" alt="image-20220613183540291"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#app.py</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask_socketio <span class="hljs-keyword">import</span> SocketIO, send<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&#x27;mysecret!&#x27;</span><br>socketio = SocketIO(app, cors_allowed_origins=<span class="hljs-string">&#x27;*&#x27;</span>)<br><br><span class="hljs-meta">@socketio.on(<span class="hljs-params"><span class="hljs-string">&#x27;message&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handleMessage</span>(<span class="hljs-params">msg</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Message:&#x27;</span> + msg)<br>    send(msg,broadcast=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    socketio.run(app)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- test.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Flask-SocketIO Test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.socket.io/3.1.2/socket.io.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> socket = io.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;http://127.0.0.1:5000/&#x27;</span>);</span><br><span class="language-javascript">    socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connect&#x27;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        socket.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;user has connected!&#x27;</span>);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">&#125;);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messages&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myMessage&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendbutton&quot;</span>&gt;</span>send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">JavaScript Socket.IO version</th><th align="left">Socket.IO protocol revision</th><th align="left">Engine.IO protocol revision</th><th align="left">Flask-SocketIO version</th><th align="left">python-socketio version</th><th align="left">python-engineio version</th></tr></thead><tbody><tr><td align="left">0.9.x</td><td align="left">1, 2</td><td align="left">1, 2</td><td align="left">Not supported</td><td align="left">Not supported</td><td align="left">Not supported</td></tr><tr><td align="left">1.x and 2.x</td><td align="left">3, 4</td><td align="left">3</td><td align="left">4.x</td><td align="left">4.x</td><td align="left">3.x</td></tr><tr><td align="left">3.x and 4.x</td><td align="left">5</td><td align="left">4</td><td align="left">5.x</td><td align="left">5.x</td><td align="left">4.x</td></tr></tbody></table><table><thead><tr><th>UE4 Socket.IO 插件版本</th><th>Socket.IO 服务器版本</th></tr></thead><tbody><tr><td>1.x &#x2F; 2.x</td><td>3.x &#x2F; 4.x</td></tr><tr><td><a href="https://github.com/getnamo/SocketIOClient-Unreal/releases/tag/1.5.5">v1.5.5 及更早版本</a></td><td>是的</td></tr><tr><td><a href="https://github.com/getnamo/SocketIOClient-Unreal/releases/tag/1.6.0">v1.6.0 及更高版本</a></td><td>不</td></tr></tbody></table><p>然后是ue端使用flask io，和服务器进行连接的时候还是会报错，原因是ue中的socket.io版本和服务器版本中不一致。因为ue中使用的是已经封装好的，所以很难对内部代码进行修改。最终还花了25元在虚幻商城中购买了一个websocket插件，完成了与服务器的通讯，因为连接的服务器使用的是公司的websocket服务器，所以不太好对服务器进行截图。</p>]]></content>
    
    
    
    <tags>
      
      <tag>2022实习</tag>
      
      <tag>Python</tag>
      
      <tag>环境配置</tag>
      
      <tag>flask</tag>
      
      <tag>长连接</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5性能优化问题</title>
    <link href="/2022/06/10/UE%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2022/06/10/UE%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>Python 环境配置中的问题</p><span id="more"></span><h2 id="UE优化的几个思路"><a href="#UE优化的几个思路" class="headerlink" title="UE优化的几个思路"></a>UE优化的几个思路</h2><h3 id="1-少使用每帧更新的组件"><a href="#1-少使用每帧更新的组件" class="headerlink" title="1.少使用每帧更新的组件"></a>1.少使用每帧更新的组件</h3><p>Event Tick、Axis轴的输入事件、TimeLine组件、Event Blueprint Update Animation、UMG的绑定 。这些组件的性能消耗很高，如果复用数较多，会影响性能。</p><p>其中Event Tick 可以使用 Time计时器进行替换。</p><h3 id="2-设置垃圾回收的间隔"><a href="#2-设置垃圾回收的间隔" class="headerlink" title="2.设置垃圾回收的间隔"></a>2.设置垃圾回收的间隔</h3><p>当在场景中销毁对象时，这个对象不会被立即移除，而是被隐藏了，只是被简单标记为不应该存在，实际上并没有从游戏中删除，为了删除它，引擎会每隔一段时间查看所有的对象，然后删除隐藏起来的应该被删除的对象，这个操作可能会引起卡顿。所以可以设置垃圾回收的时间间隔。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="3-引擎的-Blueprint-Nativization"><a href="#3-引擎的-Blueprint-Nativization" class="headerlink" title="3.引擎的 Blueprint Nativization"></a>3.引擎的 <a href="https://link.zhihu.com/?target=https://docs.unrealengine.com/en-US/ProgrammingAndScripting/Blueprints/TechnicalGuide/NativizingBlueprints/index.html">Blueprint Nativization</a></h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><iframe src="//player.bilibili.com/player.html?aid=79495581&bvid=BV1sJ41167np&cid=136044767&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=79495581&bvid=BV1sJ41167np&cid=136045004&page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><a href="https://www.bilibili.com/video/BV1sJ41167np?share_source=copy_web">链接</a></p><p><a href="https://zhuanlan.zhihu.com/p/450520990">链接2</a></p><h3 id="4-笔记"><a href="#4-笔记" class="headerlink" title="4.笔记"></a>4.笔记</h3><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206130930086.png" alt="image-20220613093014365" style="zoom:50%;" /><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206130930067.png" alt="image-20220613093055033" style="zoom:50%;" /><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206130936364.png" alt="image-20220613093604170" style="zoom:50%;" /><p>上图是根据玩家的距离设置每帧更新的频率。</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206130942470.png" alt="image-20220613094230266" style="zoom:50%;" /><p>上图是关于内存加载的内容</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206130947387.png" alt="image-20220613094705415" style="zoom:50%;" /><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206130949057.png" alt="image-20220613094936911" style="zoom:50%;" /><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206130952940.png" alt="image-20220613095255952" style="zoom:50%;" /><p>使用异步加载，Async load Asset</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206131005648.png" alt="image-20220613100544272"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206131012809.png" alt="image-20220613101227758"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206131012986.png" alt="image-20220613101250067"></p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python环境配置问题</title>
    <link href="/2022/06/10/pycharm%E9%85%8D%E7%BD%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/10/pycharm%E9%85%8D%E7%BD%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>Python 环境配置中的问题</p><span id="more"></span><h2 id="Pycharm安装"><a href="#Pycharm安装" class="headerlink" title="Pycharm安装"></a>Pycharm安装</h2><p>之前使用的pip环境管理很混乱，之后可能会用到 Python 对 UE5 编辑界面进行操作，所以今天重新使用 pipenv ，因为版本问题，所以直接卸载 python3.7 和之前已经安装好的 Pycharm2019 ，重新安装 Python3.10 和 Pycharm2022 ，并对 Pycharm 进行破解。在网上找破解教程花费了很多时间，最终还是安装好了。参考了很多教程，遇到的问题也都逐个解决了。<a href="https://zhuanlan.zhihu.com/p/484073745">命令行终端使用虚拟环境报错</a>、<a href="https://www.evget.com/doclib/s/123/14689">Pipenv 的使用</a>、<a href="https://www.exception.site/essay/how-to-free-use-pycharm-2020">Pycharm 破解教程</a>。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206101654645.png" alt="image-20220610165433513"></p><p>在 Pipfile 中切换下载源为国内镜像</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206101707995.png" alt="image-20220610170754644"></p><p>setx PATH “%PATH%;C:\Users\jerem\AppData\Roaming\Python\Python37\Scripts”</p>]]></content>
    
    
    
    <tags>
      
      <tag>2022实习</tag>
      
      <tag>Python</tag>
      
      <tag>Pycahrm</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE建立Ui界面</title>
    <link href="/2022/06/09/UE%E5%BB%BA%E7%AB%8BUI%E7%95%8C%E9%9D%A2/"/>
    <url>/2022/06/09/UE%E5%BB%BA%E7%AB%8BUI%E7%95%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p>简单建立ui的过程</p><span id="more"></span><h3 id="1-效果展示"><a href="#1-效果展示" class="headerlink" title="1.效果展示"></a>1.效果展示</h3><hr><center><iframe src="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E8%A7%86%E9%A2%91/%E9%98%B6%E6%AE%B5%E6%88%90%E6%9E%9C.m4v" frameborder=0 allowfullscreen></iframe></center><h3 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h3><hr><p>​首先在content中新建一个文件夹用来存放ui界面的 widget，在这个文件夹中创建4个widget 命名 BackGrand、Button、Fade、Setting，然后在UI文件夹中建立一个子文件夹，命名为 Info ，在 Info 中新建两个<code>widget</code>命名为Infocontrol、InfoUI 。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091637296.png" alt="image-20220609163714908"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091643696.png" alt="image-20220609164307054"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091643653.png" alt="image-20220609164349400"></p><h4 id="BackGrand"><a href="#BackGrand" class="headerlink" title="BackGrand"></a>BackGrand</h4><hr><p>​首先是菜单栏的背景制作。打开 BackGrand widget 后，在设计界面的控制面板中添加画布面板、背景模糊图片和文本界面，并按图中所示层级摆放，背景板的制作完成。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091649389.png" alt="image-20220609164939601"></p><h4 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h4><hr><p>​点开 Button widget 在设计界面控制面板中添加画布面板、垂直框、三组按钮和问题组件，并按如下层级摆放。锚点都正在屏幕左上角。</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091653200.png" alt="image-20220609165343810" style="zoom:50%;" /><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091656208.png" alt="image-20220609165612472" style="zoom:50%;" /><p>​添加四组 animation 动画分别控制三个菜单按钮在鼠标悬停时的动画显示和菜单的显示隐藏动画。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091705374.png" alt="image-20220609170504912"></p><p>​首先设置动画 Hover1 ，点击 Hover1 ，点击设计界面中按钮，然后点击添加轨道，然后点击添加所属组件（文本），然后在新建立的轨道分别泰添加变换和颜色不透明度。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091710190.png" alt="image-20220609171025536" style="zoom:50%;" /><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091716751.png" alt="image-20220609171604862" style="zoom:50%;" /></p><p>​添加好之后在时间为0处打上变换、颜色和不透明度的关键帧。将时间轴移动到 0.15 秒，并设置 x ，y 的缩放为 1.1，颜色改变为蓝色，然后打上关键帧。播放查看效果。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091720715.png" alt="image-20220609172010553" style="zoom:50%;" /><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091721160.png" alt="image-20220609172155666" style="zoom:50%;" /></p><p>​可以看到动画效果正常，剩下的3个按钮的动画也是大同小异，可以直接<code>CTRL</code>+<code>D</code>复制动画，重命名为 hover…然后点击轨道上方的组件 TextBlock_0 然后选中设计界面中的需要替换的文本组件，右键点击之后选择替换为…即可。</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091727446.gif" style="zoom:50%;" /><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091737304.png" style="zoom:33%;" /><p>​最后是 fade 动画，即隐藏该界面的动画，添加轨道，然后 K 画布面板的帧</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091745888.png" alt="image-20220609174517586"></p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091747932.gif" style="zoom:33%;" /><p>​建立如下蓝图，在设计器中选中按钮，然后添加如下事件悬停事件，然后进入到图标界面，将事件与动画进行逻辑上的绑定。下面以按键一的动画绑定为例。</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091803114.png" alt="image-20220609180332689" style="zoom: 67%;" /><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091751208.png" alt="image-20220609175142018"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091754597.png" alt="image-20220609175431929"></p><p>​其中 hover1 为 上述建立的动画，play animation 为播放动画，in animation 接入动画， play mode 为 forward （快进）为正向播放 hover1 动画，play mode 为 back （翻转）为逆向播放动画。其余按钮的悬停效果绑定与此类似。</p><p>​至此，此widget组件自身的动画效果就完成了，剩余与其他组件的交互动画在其余组件自身动画效果完成之后再进行绑定。先将此组件的完整蓝图粘贴至此。</p><p>​<img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091813244.png" alt="image-20220609181313679"></p><p><a href="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E5%8D%9A%E5%AE%A2/%E5%8F%98%E7%94%B5%E7%AB%99/%E6%8C%89%E9%92%AEUI%E7%95%8C%E9%9D%A2.txt">下载链接</a></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091816069.png" alt="image-20220609181623873"></p><h4 id="Fade"><a href="#Fade" class="headerlink" title="Fade"></a>Fade</h4><hr><p>​在 Fade 设计界面添加要 image 组件，添加动画命名为fade，设置图像的颜色为黑色，不透明，然后 k 图像的不透明度的帧，由0到1。显示动画效果。</p><img src="C:%5CUsers%5Cjerem%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220609182238924.png" alt="image-20220609182238924" style="zoom: 33%;" /><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091825548.gif" style="zoom:50%;" /><h4 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h4><hr><p>​复制 Button 组件，添加缺少的按钮和文本组件，并修改文字，然后返回</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091829369.png" alt="image-20220609182934542"></p><p>​在图表界面添加如下节点，<code>Button_2</code>为 <code>画面质量极致</code>按钮，点击之后设置画面质量机制，其中Get Game User Settings，为获得游戏设置对象，可以对游戏本地机进行设置，如分辨率、窗口模式、可延展性等，Set Overall Scalability Level为设置画面效果，其中 Value值越大效果越高，一般最高位3，最低为0，其余画面质量的设置大同小异。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091831055.png" alt="image-20220609183135398"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091833256.png" alt="image-20220609183334210"></p><p>​然后是返回按钮，下面是返回功能的整体蓝图。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091838801.png" alt="image-20220609183813425"></p><p>​其中用到了 Set Visibility按钮，in visibaility 的值为非可命中测试仅自生，代表在按下返回按钮之后，禁用其余按钮。然后播放该界面消失的动画 fade ，在短暂延迟之后创建上级菜单界面，使用create Widget 组件，添加创建之前创建的 Button 按钮组件，附加到视口，然后逆向播放 Button 组件中的小时动画，在短暂延迟之后，将当前组件移除，使用 Remove from Parent组件。该组件消失后将不再占用资源。</p><h4 id="InfoControl"><a href="#InfoControl" class="headerlink" title="InfoControl"></a>InfoControl</h4><hr><p>​infoControl 界面和 Button 界面类似，可以直接复制，然后修改相关功能。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091855144.png" alt="image-20220609185508288"></p><p>​其中，显示所有变压器信息的功能按钮的蓝图。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091856374.png" alt="image-20220609185616469"></p><p>为获得所有类，然后使用循环遍历所有的实例，设置widget的显隐性。<strong>这里需要注意一下</strong>，get all actors of class 具有性能不好的问题，在需要遍历的 mesh 较多的时候可能会出翔相应的问题。</p><h4 id="InfoUi"><a href="#InfoUi" class="headerlink" title="InfoUi"></a>InfoUi</h4><hr><p>这里 Infoui 的动画，使用将整个画布面板左右移动的方式。</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206091902339.gif"/><p>在点击详细界面后显示该动画。同理也是k动画帧即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>蓝图</tag>
      
      <tag>BluePrint</tag>
      
      <tag>UI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过动态生成actor和用displayname显示名找到场景中的物体完成actor的自动创建和放置</title>
    <link href="/2022/06/06/%E9%80%9A%E8%BF%87%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90actor%E5%92%8C%E7%94%A8displayname%E6%98%BE%E7%A4%BA%E5%90%8D%E6%89%BE%E5%88%B0%E5%9C%BA%E6%99%AF%E4%B8%AD%E7%9A%84%E7%89%A9%E4%BD%93%E5%AE%8C%E6%88%90actor%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E5%92%8C%E6%94%BE%E7%BD%AE/"/>
    <url>/2022/06/06/%E9%80%9A%E8%BF%87%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90actor%E5%92%8C%E7%94%A8displayname%E6%98%BE%E7%A4%BA%E5%90%8D%E6%89%BE%E5%88%B0%E5%9C%BA%E6%99%AF%E4%B8%AD%E7%9A%84%E7%89%A9%E4%BD%93%E5%AE%8C%E6%88%90actor%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E5%92%8C%E6%94%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<center><font>动态生成蓝图类</font><center> <span id="more"></span><iframe src="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E8%A7%86%E9%A2%91/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90.m4v" frameborder=0 allowfullscreen></iframe><p>关卡蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061810280.png" alt="image-20220606181021759"></p><p><a href="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E5%8D%9A%E5%AE%A2/%E5%8F%98%E7%94%B5%E7%AB%99/%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90Actor%E5%85%B3%E5%8D%A1%E8%93%9D%E5%9B%BE.txt">下载链接</a><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061808164.png" alt="image-20220606180841138"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061813125.png" alt="image-20220606181309217"></p><p>使用<code>get all actors of class</code>获取场景中的Actor 并将返回值提升为变量<code>array element</code><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061817316.png" alt="image-20220606181717043"></p><p>对获得的<code>actor</code>进行判断，如果为目标actor的子类，就将该static mesh删除</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061820737.png" alt="image-20220606182001531"></p><p>如果为目标actor就在轴中央生成相应的蓝图类，</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061824955.png" alt="image-20220606182408528" style="zoom:150%;" /><p>在之前基础上，设备的子类，变压器中的代码也进行了相应的修改，因为将staticmesh整合，所以需要设置每个子组件的材质。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061828084.png" alt="image-20220606182827012"><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061830547.png" alt="image-20220606183017585"></p><p>然后是直接用父类设备的id变量</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061833522.png" alt="image-20220606183337299"></p><p>红色框内为父设备的变量</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>蓝图</tag>
      
      <tag>BluePrint</tag>
      
      <tag>子节点</tag>
      
      <tag>动态生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取actor子节点</title>
    <link href="/2022/06/06/UE5%E8%8E%B7%E5%8F%96Actor%E9%99%84%E5%8A%A0%E8%8A%82%E7%82%B9%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2022/06/06/UE5%E8%8E%B7%E5%8F%96Actor%E9%99%84%E5%8A%A0%E8%8A%82%E7%82%B9%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<center><font>获取actor子节点</font><center> <span id="more"></span><p>先获取到actor节点，使用<code>Get All Actors of Class</code>节点</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061404242.png" alt="image-20220606140453470"></p><p>再使用Get Attached Actors方法，获得BYQ1节点下所有子节点，最后使用get display name打印</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061405843.png" alt="image-20220606140552732"></p><p>效果图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061408299.png" alt="image-20220606140847491"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206061408813.png" alt="image-20220606140811311"></p><p>但使用这个方法进行删除会出现问题，所以解决方法是将所有物体的子组件都赋予相同的命名</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>蓝图</tag>
      
      <tag>BluePrint</tag>
      
      <tag>子节点</tag>
      
      <tag>循环获取actor子节点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用ISM提高性能</title>
    <link href="/2022/06/02/%E4%BD%BF%E7%94%A8ISM%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD/"/>
    <url>/2022/06/02/%E4%BD%BF%E7%94%A8ISM%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<center><font>找到场景中的staticmesh，并用带交互的actor</font><center><span id="more"></span>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>蓝图</tag>
      
      <tag>BluePrint</tag>
      
      <tag>优化</tag>
      
      <tag>ISM</tag>
      
      <tag>性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>找到场景中的物体</title>
    <link href="/2022/06/02/%E9%80%9A%E8%BF%87%E5%90%8D%E5%AD%97%E6%89%BE%E5%88%B0%E5%9C%BA%E6%99%AF%E4%B8%AD%E7%9A%84%E7%89%A9%E4%BD%93/"/>
    <url>/2022/06/02/%E9%80%9A%E8%BF%87%E5%90%8D%E5%AD%97%E6%89%BE%E5%88%B0%E5%9C%BA%E6%99%AF%E4%B8%AD%E7%9A%84%E7%89%A9%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<center><font>找到场景中的staticmesh，并用带交互的actor</font><center> <span id="more"></span><p><a href="https://blog.csdn.net/ljason1993/article/details/122214015">参考文章1</a> <a href="https://blog.csdn.net/sh15285118586/article/details/52299018?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-52299018-blog-122214015.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-52299018-blog-122214015.pc_relevant_default&utm_relevant_index=1">参考文章2</a> <a href="https://blog.csdn.net/sh15285118586/article/details/52299018?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-52299018-blog-122214015.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-52299018-blog-122214015.pc_relevant_default&utm_relevant_index=1">参考文章3</a> <a href="https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/HowTo/FindingActors/">官方文档</a></p><p>在参考了上述文章后，知道想要在众多物体中寻找到目标物体有多种方法可以使用：<code>get Object name</code> <code>get display name</code>  <code>get tag name</code></p><p>问题：</p><p>之前的ue版本中鼠标选中会出现id号，但ue5并没有显示id，所以使用<code>get Object name</code>节点并不方便</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021402504.png" alt="image-20220602140212717"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021402650.png" alt="image-20220602140238075"></p><p>可以添加标签的形式如下图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021413773.png" alt="image-20220602141318218"></p><p>因为想要通过标签获得物体对象首先需要手动添加标签，所以最终选择使用<code>get display name</code>的方式，获得目标对象</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021512542.png" alt="image-20220602151225465"></p><iframe src="https://blueprintue.com/render/oat9o7dm/" scrolling="no" allowfullscreen></iframe><p><a href="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E5%8D%9A%E5%AE%A2/%E5%8F%98%E7%94%B5%E7%AB%99/%E5%AF%BB%E6%89%BE%E7%89%A9%E4%BD%93.txt">下载链接</a><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021520601.png" alt="image-20220602152050594"></p><p>但有一个问题，就是staticmesh即从模型制作软件导出到ue5中时，坐标轴的位置并不是在物体中间</p><p>所以需要对坐标轴进行相应的处理。必须先把坐标轴的问题搞清楚。</p><p>搜索资料后发小在建模工具中，可以进行坐标轴位置的更改</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021656910.png" alt="image-20220602165650064"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021657441.png" alt="image-20220602165732024"></p><p>在测试过程中发现，在actor编辑界面中无论如何调整物体的方向和角度，物体坐标轴的方向和角度都不会改变。所有物体的坐标轴的方向都是统一的，由此有一个初步的判断，新生成或新放置的物体的位置和旋转应该以坐标轴的方向和这个物体的父组件的坐标轴的原点为参考。</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021557894.png" alt="image-20220602155724501" style="zoom:50%;" /><p>所以就会产生从3d软件中导入的模型坐标轴的轴心不在物体的中心，所以在这个物体上用蓝图生成子组件时就会产生位置上的偏移。</p><iframe src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021720194.mp4"frameborder=0 allowfullscreen></iframe><p>在测试过程当中，发现标牌的移动也有一些问题，就是标牌所正对的角度要高于镜头的角度</p><p>回看之前的蓝图，发现了问题</p><p>我们放大这个问题，即将标牌与物体之间的距离拉大就可以更加直观观察</p><p>其中使用<code>get actor location</code>完成的效果图</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021649973.png"/><p><code>get actor location</code>计算的是根据物体的location和观察者的location计算标牌需要旋转的角度，但问题是物体的位置和标牌的位置是有误差的</p><p>如果使用标牌的world location的效果</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021649204.png"/><p>可以正确显示，这个问题也属于坐标当中的问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>蓝图</tag>
      
      <tag>BluePrint</tag>
      
      <tag>可复用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建可复用的actor</title>
    <link href="/2022/06/02/%E5%88%9B%E5%BB%BA%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84actor/"/>
    <url>/2022/06/02/%E5%88%9B%E5%BB%BA%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84actor/</url>
    
    <content type="html"><![CDATA[<center><font>创建可复用模型发送不同</font><center> <span id="more"></span><p>创建一个actor，添加一个变量，添加一个函数，但不实现</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021011122.png" alt="image-20220602101149061"></p><p>创建该actor的子类，children actor ，在children actor蓝图中添加一下蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206020959669.png" alt="image-20220602095921709"></p><iframe src="https://blueprintue.com/render/1m79mdoe/" scrolling="no" allowfullscreen></iframe><p><a href="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E5%8D%9A%E5%AE%A2/%E5%8F%98%E7%94%B5%E7%AB%99/%E5%88%9B%E5%BB%BA%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84actor.txt">下载链接</a>：<img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021010721.png" alt="image-20220602101021305"></p><p>再新建一个actor，新建actor</p><p>在这个新建的actor中添变量，变量类型为第一步建立的actor，记得将此变量设置为可可编辑实例，然后再添加下面节点</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206021014097.png"/><p>最终效果</p><iframe src="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E8%A7%86%E9%A2%91/%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%88%9B%E5%BB%BA%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%A8%A1%E5%9E%8B%E5%8F%91%E9%80%81%E4%B8%8D%E5%90%8C%E7%9A%84%E8%AF%B7%E6%B1%82.mp4" scrolling="no" allowfullscreen></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>蓝图</tag>
      
      <tag>BluePrint</tag>
      
      <tag>可复用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态生成actor</title>
    <link href="/2022/06/01/%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90actor/"/>
    <url>/2022/06/01/%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90actor/</url>
    
    <content type="html"><![CDATA[<center><font>动态创建actor和放置actor</font><center><span id="more"></span><h3 id="创建actor"><a href="#创建actor" class="headerlink" title="创建actor"></a>创建actor</h3><p>使用节点 <code>spawnActor</code>如下图所示</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206011707378.png" alt="image-20220601170708883"></p><p><a href="https://docs.unrealengine.com/5.0/en-US/BlueprintAPI/Game/SpawnActorfromClass/">官方文档地址</a> </p><p>从官方文档（下图）中可以看到，输入接口1为需要创建的actor类，输入接口2为生成actor的位置，接口3为处理碰撞的方式，默认为用户actor的类型设定，接口4为该actor的拥有者</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206011711040.png" alt="image-20220601171139985"></p><p>销毁Actor</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206011827687.png" alt="image-20220601182723209"></p><p> 将新生成的actor放在指定位置前方，在关卡蓝图中添加如下节点</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206020925926.png" alt="image-20220602092556843"></p><iframe src="https://blueprintue.com/render/yk6psl-0/" scrolling="no" allowfullscreen></iframe><p><a href="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E5%8D%9A%E5%AE%A2/%E5%8F%98%E7%94%B5%E7%AB%99/%E7%94%9F%E6%88%90actor.txt">下载链接</a><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206020928289.png" alt="image-20220602092840251"></p><p>完成效果：按1在物体前方生成一个actor，按下2删除所有和该actor相关组件</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>蓝图</tag>
      
      <tag>BluePrint</tag>
      
      <tag>动态生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标牌设计流程</title>
    <link href="/2022/05/31/%E5%AE%8C%E6%88%90%E8%AE%BE%E5%A4%87%E6%A0%87%E7%89%8C/"/>
    <url>/2022/05/31/%E5%AE%8C%E6%88%90%E8%AE%BE%E5%A4%87%E6%A0%87%E7%89%8C/</url>
    
    <content type="html"><![CDATA[<center>标牌设计流程</center><span id="more"></span><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="第一步-绘制UI"><a href="#第一步-绘制UI" class="headerlink" title="第一步 绘制UI"></a>第一步 绘制UI</h4><p>首先建立一个widget，然后在widget中添变量，以便让关卡蓝图进行相应的操作，</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311222723.png" alt="image-20220531122207297"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311222265.png" alt="image-20220531122230268"></p><p>在widget设计界面添加画板、图片、文本等组件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311225074.png" alt="image-20220531122540128"></p><p>然后在设计器中将相应的变量绑定到文本上，调整widget(ui)的位置和大小</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311223456.png" alt="image-20220531122356028"></p><h4 id="第二步-在actor中绑定所绘制的UI"><a href="#第二步-在actor中绑定所绘制的UI" class="headerlink" title="第二步 在actor中绑定所绘制的UI"></a>第二步 在actor中绑定所绘制的UI</h4><p>先将模型转换为蓝图，然后右键浏览至资产，点击打开</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311317930.png" alt="image-20220531131753847"></p><p>在蓝图中添加<code>widget</code>组件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311320349.png" alt="image-20220531132043412"></p><p>选中刚刚添加的<code>widget</code>在右侧<code>detail</code>细节的<code>uerinterface</code>用户交互界面中将<code>widget class</code>绑定为刚刚新建的<code>widget(ui)</code>界面</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311324000.png" alt="image-20220531132401182"></p><p>在此蓝图即actor蓝图中添加如下节点，从上到下分别是使模型旋转，和点击显示和隐藏标牌。后续可以继续添加相应的功能。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311329727.png" alt="image-20220531132957720"></p><iframe src="https://blueprintue.com/render/rb4y1xar/" scrolling="no" allowfullscreen></iframe><p><a href="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E5%8D%9A%E5%AE%A2/%E5%8F%98%E7%94%B5%E7%AB%99/actor%E8%93%9D%E5%9B%BE.txt">下载链接</a><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311335960.png" alt="image-20220531133513079"></p><h4 id="第三步-关卡蓝图发送请求，并解析数据"><a href="#第三步-关卡蓝图发送请求，并解析数据" class="headerlink" title="第三步 关卡蓝图发送请求，并解析数据"></a>第三步 关卡蓝图发送请求，并解析数据</h4><p>在关卡蓝图中通过解析get请求返回的json数据对widget中新建的变量进行赋值</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311229862.png" alt="image-20220531122902971"></p><iframe src="https://blueprintue.com/render/sukw9_fh/" scrolling="no" allowfullscreen></iframe><p><a href="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E5%8D%9A%E5%AE%A2/%E5%85%B3%E5%8D%A1%E8%93%9D%E5%9B%BE.txt">下载链接</a><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311234156.png" alt="image-20220531123407993"></p><p>对于请求之前的文档已经描述过，关键在于根据接口返回的json数据进行进行解析</p><p>使用postman查看请求的数据，以下为例，可以看到后台接口我已经修改成<code>&#123;</code>开头</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;json&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;设备名称&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;变压器&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;电压&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4744.0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;当前温度&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38.9</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;设备名称&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;变压器2&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;电压&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6000.0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;当前温度&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">79.0</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;设备名称&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;变压器3&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;电压&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5500.0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;当前温度&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60.0</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;设备名称&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;变压器4&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;电压&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6000.0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;当前温度&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">55.0</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;设备名称&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;变压器5&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;电压&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5600.0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;当前温度&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">50.0</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>但接口从数据库读取数据时原始的数据格式为下，以<code>[</code>开头。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;设备名称&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;变压器&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;电压&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4744.0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;当前温度&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38.9</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;设备名称&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;变压器2&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;电压&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6000.0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;当前温度&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">79.0</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;设备名称&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;变压器3&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;电压&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5500.0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;当前温度&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60.0</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;设备名称&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;变压器4&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;电压&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6000.0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;当前温度&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">55.0</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;设备名称&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;变压器5&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;电压&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5600.0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;当前温度&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">50.0</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>蓝图接收到下面这种数据会出现问题。所以我在接口上增加了将原本sql返回之后的值再复制给一个json，即将reslut赋值给restFull。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python代码</span><br>result = SQL(<span class="hljs-string">&quot;select * from `schema` ;&quot;</span>,todo_id )<br>restFull = &#123;&#125;<br>restFull[<span class="hljs-string">&quot;json&quot;</span>] = result<br></code></pre></td></tr></table></figure><p>返回值就为<code>restFull</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;json&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span>...<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-punctuation">&#123;</span>...<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      ...<br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>想要获得json键的值，需要使用<code>get Object Array Field</code>，<code>Return Value</code>为数组</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311304545.png" alt="image-20220531130409854"></p><p>上面例子的数组<code>[]</code>中共有5个json对象<code>&#123;&#125;</code> ，所以使用<code>get copy</code>节点，获得数组0的json对象，之后便可以正常解析</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311310348.png" alt="image-20220531131012925"></p><p>还有一个重点，想要在关卡蓝图中设置<code>actor</code>子组件<code>widget</code>上绑定的<code>ui</code>界面中的变量需要进行如下操作</p><p><img src="C:%5CUsers%5Cjerem%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220531133955285.png" alt="image-20220531133955285"></p><p>先获得<code>actor</code>对象，然后获得acotr子组件<code>widget</code>对象，然后使用cast to转换为绑定的UI对象，之后便可以使用<code>set </code>节点</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205311342979.png" alt="image-20220531134210002"></p><h4 id="附接口、数据库、传感器模拟上报代码"><a href="#附接口、数据库、传感器模拟上报代码" class="headerlink" title="附接口、数据库、传感器模拟上报代码"></a>附接口、数据库、传感器模拟上报代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#接口代码</span><br><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask_restful <span class="hljs-keyword">import</span> reqparse, abort, Api, Resource, marshal_with<br><br><br><span class="hljs-comment"># 数据库q</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SQL</span>(<span class="hljs-params">sql,<span class="hljs-built_in">id</span></span>):<br>    conn = pymysql.connect(host=<span class="hljs-string">&quot;localhost&quot;</span>,<br>                               port=<span class="hljs-number">3306</span>,<br>                               user=<span class="hljs-string">&quot;root&quot;</span>,<br>                               password=<span class="hljs-string">&quot;YJLs13981383032&quot;</span>,<br>                               database=<span class="hljs-string">&quot;mybatis&quot;</span>,<br>                               charset=<span class="hljs-string">&quot;utf8&quot;</span>)<br><br>    <span class="hljs-comment"># 3. 获取游标对象：执行sql语句</span><br>    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br>    <span class="hljs-comment"># 4. 执行sql语句</span><br><br>    <span class="hljs-comment"># 通过游标把sql语句给到mysql服务端</span><br>    <span class="hljs-built_in">print</span>(sql)<br>    cursor.execute(sql)<br><br>    <span class="hljs-comment"># 获取查询结果:mysql服务端把执行sql语句的结果通过游标返回给python程序；</span><br>    <span class="hljs-comment"># 返回的数据类型是：元组，元组其中的每条数据还是一个元组</span><br>    result = cursor.fetchall()<br><br>    <span class="hljs-comment"># 5. 关闭游标</span><br>    cursor.close()<br><br>    <span class="hljs-comment"># 6. 关闭连接</span><br>    conn.close()<br>    <span class="hljs-keyword">return</span> result<br><br><br><br><br><br><br><br>app = Flask(__name__)<br>api = Api(app)<br><br>TODOS = &#123;<br>    <span class="hljs-string">&#x27;todo1&#x27;</span>: &#123;<span class="hljs-string">&#x27;task&#x27;</span>: <span class="hljs-string">&#x27;build an API&#x27;</span>&#125;,<br>    <span class="hljs-string">&#x27;todo2&#x27;</span>: &#123;<span class="hljs-string">&#x27;task&#x27;</span>: <span class="hljs-string">&#x27;?????&#x27;</span>&#125;,<br>    <span class="hljs-string">&#x27;todo3&#x27;</span>: &#123;<span class="hljs-string">&#x27;task&#x27;</span>: <span class="hljs-string">&#x27;profit!&#x27;</span>&#125;,<br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">abort_if_todo_doesnt_exist</span>(<span class="hljs-params">todo_id</span>):<br>    <span class="hljs-keyword">if</span> todo_id <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> TODOS:<br>        abort(<span class="hljs-number">404</span>, message=<span class="hljs-string">&quot;Todo &#123;&#125; doesn&#x27;t exist&quot;</span>.<span class="hljs-built_in">format</span>(todo_id))<br><br>parser = reqparse.RequestParser()<br>parser.add_argument(<span class="hljs-string">&#x27;task&#x27;</span>)<br><br><br><span class="hljs-comment"># Todo</span><br><span class="hljs-comment"># shows a single todo item and lets you delete a todo item</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Todo</span>(<span class="hljs-title class_ inherited__">Resource</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, todo_id</span>):<br>        <span class="hljs-comment">#abort_if_todo_doesnt_exist(todo_id)</span><br>        result = SQL(<span class="hljs-string">&quot;select * from `schema` ;&quot;</span>,todo_id )<br>        restFull = &#123;&#125;<br>        restFull[<span class="hljs-string">&quot;json&quot;</span>] = result<br>        <span class="hljs-built_in">print</span>(restFull)<br>        <span class="hljs-keyword">return</span> restFull<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self, todo_id</span>):<br>        abort_if_todo_doesnt_exist(todo_id)<br>        <span class="hljs-keyword">del</span> TODOS[todo_id]<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">204</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, todo_id</span>):<br>        args = parser.parse_args()<br>        task = &#123;<span class="hljs-string">&#x27;task&#x27;</span>: args[<span class="hljs-string">&#x27;task&#x27;</span>]&#125;<br>        TODOS[todo_id] = task<br>        <span class="hljs-keyword">return</span> task, <span class="hljs-number">201</span><br><br><br><span class="hljs-comment"># TodoList</span><br><span class="hljs-comment"># shows a list of all todos, and lets you POST to add new tasks</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TodoList</span>(<span class="hljs-title class_ inherited__">Resource</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> TODOS<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self</span>):<br>        args = parser.parse_args()<br>        todo_id = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">max</span>(TODOS.keys()).lstrip(<span class="hljs-string">&#x27;todo&#x27;</span>)) + <span class="hljs-number">1</span><br>        todo_id = <span class="hljs-string">&#x27;todo%i&#x27;</span> % todo_id<br>        TODOS[todo_id] = &#123;<span class="hljs-string">&#x27;task&#x27;</span>: args[<span class="hljs-string">&#x27;task&#x27;</span>]&#125;<br>        <span class="hljs-keyword">return</span> TODOS[todo_id], <span class="hljs-number">201</span><br><br><span class="hljs-comment">##</span><br><span class="hljs-comment">## Actually setup the Api resource routing here</span><br><span class="hljs-comment">##</span><br>api.add_resource(TodoList, <span class="hljs-string">&#x27;/todos&#x27;</span>)<br>api.add_resource(Todo, <span class="hljs-string">&#x27;/todos/&lt;todo_id&gt;&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#传感器模拟上报代码</span><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">round</span>(random.uniform(<span class="hljs-number">1000.0</span>, <span class="hljs-number">6000.0</span>), <span class="hljs-number">1</span>)))<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br>cancel_tmr = <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>():<br>    <span class="hljs-comment"># 具体任务执行内容</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">heart_beat</span>():<br>    <span class="hljs-comment"># 打印当前时间</span><br>    <span class="hljs-built_in">print</span>(time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>))<br>    conn = pymysql.connect(host=<span class="hljs-string">&quot;localhost&quot;</span>,<br>                           port=<span class="hljs-number">3306</span>,<br>                           user=<span class="hljs-string">&quot;root&quot;</span>,<br>                           password=<span class="hljs-string">&quot;YJLs13981383032&quot;</span>,<br>                           database=<span class="hljs-string">&quot;mybatis&quot;</span>,<br>                           charset=<span class="hljs-string">&quot;utf8&quot;</span>)<br><br>    <span class="hljs-comment"># 3. 获取游标对象：执行sql语句</span><br>    cursor = conn.cursor()<br>    sql = <span class="hljs-string">&quot;update `schema`  set 电压=&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">round</span>(random.uniform(<span class="hljs-number">1000.0</span>, <span class="hljs-number">6000.0</span>), <span class="hljs-number">1</span>)) + <span class="hljs-string">&quot; ,当前温度 = &quot;</span> + <span class="hljs-built_in">str</span>(<br>        <span class="hljs-built_in">round</span>(random.uniform(<span class="hljs-number">10.0</span>, <span class="hljs-number">95.0</span>), <span class="hljs-number">1</span>)) + <span class="hljs-string">&quot; where id=1 ;&quot;</span><br>    <span class="hljs-comment"># 通过游标把sql语句给到mysql服务端</span><br>    <span class="hljs-built_in">print</span>(sql)<br>    cursor.execute(sql)<br>    conn.commit()<br>    result = cursor.fetchall()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result))<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> result:<br>        <span class="hljs-built_in">print</span>(row)<br><br>    <span class="hljs-comment"># 5. 关闭游标</span><br>    cursor.close()<br><br>    <span class="hljs-comment"># 6. 关闭连接</span><br>    conn.close()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cancel_tmr:<br>        start()<br>        <span class="hljs-comment"># 每隔3秒执行一次</span><br>        threading.Timer(<span class="hljs-number">1</span>, heart_beat).start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    heart_beat()<br>    <span class="hljs-comment"># 一小时后停止定时器</span><br>    time.sleep(<span class="hljs-number">3600</span>)<br>    cancel_tmr = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">sql</span><br><span class="hljs-comment"> Navicat Premium Data Transfer</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Source Server         : test2</span><br><span class="hljs-comment"> Source Server Type    : MySQL</span><br><span class="hljs-comment"> Source Server Version : 80019</span><br><span class="hljs-comment"> Source Host           : localhost:3306</span><br><span class="hljs-comment"> Source Schema         : mybatis</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Target Server Type    : MySQL</span><br><span class="hljs-comment"> Target Server Version : 80019</span><br><span class="hljs-comment"> File Encoding         : 65001</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Date: 31/05/2022 13:45:00</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for schema</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `schema`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `schema`  (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `设备名称` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `电压` <span class="hljs-keyword">double</span>(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `当前温度` <span class="hljs-type">float</span>(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of schema</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `schema` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;变压器&#x27;</span>, <span class="hljs-number">4744</span>, <span class="hljs-number">38.9</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `schema` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;变压器2&#x27;</span>, <span class="hljs-number">6000</span>, <span class="hljs-number">79.0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `schema` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;变压器3&#x27;</span>, <span class="hljs-number">5500</span>, <span class="hljs-number">60.0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `schema` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;变压器4&#x27;</span>, <span class="hljs-number">6000</span>, <span class="hljs-number">55.0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `schema` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;变压器5&#x27;</span>, <span class="hljs-number">5600</span>, <span class="hljs-number">50.0</span>);<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>蓝图</tag>
      
      <tag>BluePrint</tag>
      
      <tag>标牌</tag>
      
      <tag>Bilbord</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建光照问题</title>
    <link href="/2022/05/30/%E6%9E%84%E5%BB%BA%E5%85%89%E7%85%A7%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/30/%E6%9E%84%E5%BB%BA%E5%85%89%E7%85%A7%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<center>3DUI制作时在场景中变黑</center><span id="more"></span><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><hr><p>在actor中添加了一个只用image的widget</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205301111702.png" alt="image-20220530111124580"></p><p>将这个acotr托入场景中无法正常渲染</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205301112053.png" alt="image-20220530111158037"></p><h3 id="寻找原因"><a href="#寻找原因" class="headerlink" title="寻找原因"></a>寻找原因</h3><hr><p>首先在构建光照时会报错</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205301113044.png" alt="image-20220530111305863"></p><p>其次在场景中关闭光照可以正常显示</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205301115872.png" alt="image-20220530111539369"></p><p>我想可能是光照引起的问题。</p><p>然后我便把环境中的光照都删了，就是删除了<code>sun and sky(太阳和天空)</code>组件，手动添加了以下三个光照组件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205301120548.png" alt="image-20220530112003096"></p><p>之后便可以正常显示。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><hr><p>不使用太阳和天空组件，手动添加光源</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>使用光照组件时要小心。</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>组件</tag>
      
      <tag>光照</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在md中添加视频</title>
    <link href="/2022/05/27/%E5%9C%A8md%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%A7%86%E9%A2%91/"/>
    <url>/2022/05/27/%E5%9C%A8md%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<center>在Markdown中添加视频</center><span id="more"></span><p>有两种方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span>  <span class="hljs-attr">controls</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E9%80%9A%E8%BF%87flask%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93.mp4&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">height</span>=<span class="hljs-string">498</span> <span class="hljs-attr">width</span>=<span class="hljs-string">510</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E9%80%9A%E8%BF%87flask%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93.mp4&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">0</span> <span class="hljs-attr">allowfullscreen</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><video width="480" height="320" controls><source src="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E9%80%9A%E8%BF%87flask%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93.mp4"></video><iframe height=498 width=510 src="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E9%80%9A%E8%BF%87flask%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93.mp4" frameborder=0 allowfullscreen></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ue通过flask接口读取数据库</title>
    <link href="/2022/05/27/ue%E9%80%9A%E8%BF%87flask%E6%8E%A5%E5%8F%A3%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/05/27/ue%E9%80%9A%E8%BF%87flask%E6%8E%A5%E5%8F%A3%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<center>打通ue访问接口再通过接口间接访问数据库</center><!--- more ---><p>先展示效果</p><center><iframe src="http://jeremy233.oss-cn-beijing.aliyuncs.com/doc/%E9%80%9A%E8%BF%87flask%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93.mp4" frameborder=0 allowfullscreen></iframe></center><p>首先在数据库中新建一个表，下面代码是建表字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> Navicat Premium Data Transfer</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Source Server         : test2</span><br><span class="hljs-comment"> Source Server Type    : MySQL</span><br><span class="hljs-comment"> Source Server Version : 80019</span><br><span class="hljs-comment"> Source Host           : localhost:3306</span><br><span class="hljs-comment"> Source Schema         : mybatis</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Target Server Type    : MySQL</span><br><span class="hljs-comment"> Target Server Version : 80019</span><br><span class="hljs-comment"> File Encoding         : 65001</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Date: 27/05/2022 09:46:28</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for schema</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `schema`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `schema`  (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `pwd` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>然后再编写一个flask接口，下面接口代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask_restful <span class="hljs-keyword">import</span> reqparse, abort, Api, Resource, marshal_with<br><br><br><span class="hljs-comment"># 数据库q</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SQL</span>(<span class="hljs-params">sql,<span class="hljs-built_in">id</span></span>):<br>    conn = pymysql.connect(host=<span class="hljs-string">&quot;localhost&quot;</span>,<br>                               port=<span class="hljs-number">3306</span>,<br>                               user=<span class="hljs-string">&quot;用户名&quot;</span>,<br>                               password=<span class="hljs-string">&quot;密码&quot;</span>,<br>                               database=<span class="hljs-string">&quot;新建表名&quot;</span>,<br>                               charset=<span class="hljs-string">&quot;utf8&quot;</span>)<br><br>    <span class="hljs-comment"># 3. 获取游标对象：执行sql语句</span><br>    cursor = conn.cursor()<br><br>    <span class="hljs-comment"># 4. 执行sql语句</span><br>    sql = sql + <span class="hljs-built_in">id</span>+<span class="hljs-string">&#x27;;&#x27;</span>;//将sql语句连接<br>    <span class="hljs-comment"># 通过游标把sql语句给到mysql服务端</span><br>    <span class="hljs-built_in">print</span>(sql)<br>    cursor.execute(sql)<br><br>    <span class="hljs-comment"># 获取查询结果:mysql服务端把执行sql语句的结果通过游标返回给python程序；</span><br>    <span class="hljs-comment"># 返回的数据类型是：元组，元组其中的每条数据还是一个元组</span><br>    result = cursor.fetchall()<br><br>    <span class="hljs-comment"># 5. 关闭游标</span><br>    cursor.close()<br><br>    <span class="hljs-comment"># 6. 关闭连接</span><br>    conn.close()<br>    <span class="hljs-keyword">return</span> result<br><br><br>app = Flask(__name__)<br>api = Api(app)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">abort_if_todo_doesnt_exist</span>(<span class="hljs-params">todo_id</span>):<br>    <span class="hljs-keyword">if</span> todo_id <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> TODOS:<br>        abort(<span class="hljs-number">404</span>, message=<span class="hljs-string">&quot;Todo &#123;&#125; doesn&#x27;t exist&quot;</span>.<span class="hljs-built_in">format</span>(todo_id))<br><br>parser = reqparse.RequestParser()<br>parser.add_argument(<span class="hljs-string">&#x27;task&#x27;</span>)<br><br><br><span class="hljs-comment"># Todo</span><br><span class="hljs-comment"># shows a single todo item and lets you delete a todo item</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Todo</span>(<span class="hljs-title class_ inherited__">Resource</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, todo_id</span>):<br>        <span class="hljs-comment">#abort_if_todo_doesnt_exist(todo_id)</span><br>        result = SQL(<span class="hljs-string">&quot;select * from `schema` where id = &quot;</span> , todo_id)<br>        resultjson = &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: result[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],<br>    <span class="hljs-string">&quot;name&quot;</span>: result[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],<br>    <span class="hljs-string">&quot;pwd&quot;</span>: result[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>],<br>&#125;<br>        <span class="hljs-built_in">print</span>(resultjson)<br>        <span class="hljs-keyword">return</span> resultjson<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self, todo_id</span>):<br>        abort_if_todo_doesnt_exist(todo_id)<br>        <span class="hljs-keyword">del</span> TODOS[todo_id]<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">204</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, todo_id</span>):<br>        args = parser.parse_args()<br>        task = &#123;<span class="hljs-string">&#x27;task&#x27;</span>: args[<span class="hljs-string">&#x27;task&#x27;</span>]&#125;<br>        TODOS[todo_id] = task<br>        <span class="hljs-keyword">return</span> task, <span class="hljs-number">201</span><br><br><br><span class="hljs-comment"># TodoList</span><br><span class="hljs-comment"># shows a list of all todos, and lets you POST to add new tasks</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TodoList</span>(<span class="hljs-title class_ inherited__">Resource</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> TODOS<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self</span>):<br>        args = parser.parse_args()<br>        todo_id = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">max</span>(TODOS.keys()).lstrip(<span class="hljs-string">&#x27;todo&#x27;</span>)) + <span class="hljs-number">1</span><br>        todo_id = <span class="hljs-string">&#x27;todo%i&#x27;</span> % todo_id<br>        TODOS[todo_id] = &#123;<span class="hljs-string">&#x27;task&#x27;</span>: args[<span class="hljs-string">&#x27;task&#x27;</span>]&#125;<br>        <span class="hljs-keyword">return</span> TODOS[todo_id], <span class="hljs-number">201</span><br><br><span class="hljs-comment">##</span><br><span class="hljs-comment">## Actually setup the Api resource routing here</span><br><span class="hljs-comment">##</span><br>api.add_resource(TodoList, <span class="hljs-string">&#x27;/todos&#x27;</span>)<br>api.add_resource(Todo, <span class="hljs-string">&#x27;/todos/&lt;todo_id&gt;&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>在需要控制的组件中添加如下蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205271009085.png" alt="image-20220527100955869"></p><p>将url和请求方式通过引脚传入<code>apply url</code>在content typer中选择 request body</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205271010311.png" alt="image-20220527101036205"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205271010796.png" alt="image-20220527101048694"></p><p><code>apply url</code>返回的是字json类型<br>在关卡蓝图中设置相关蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205271012778.png" alt="image-20220527101217159"></p><p>编译运行完成上述效果</p><p>蓝图代码 <a href="">下载连接</a></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205271025793.png" alt="image-20220527102502724"></p><iframe src="https://blueprintue.com/render/5wdv2yqb/" scrolling="no" allowfullscreen></iframe><p>导出时可能有一些错误</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220623153323388.png" alt="image-20220623153323388"></p><p>element.id.4354147有重复</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>Mysql</tag>
      
      <tag>2022实习</tag>
      
      <tag>flask</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现文字Bilboard效果</title>
    <link href="/2022/05/25/%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E9%9D%A2%E5%90%91%E9%95%9C%E5%A4%B4%E6%95%88%E6%9E%9C/"/>
    <url>/2022/05/25/%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E9%9D%A2%E5%90%91%E9%95%9C%E5%A4%B4%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="实现文字面向镜头效果"><a href="#实现文字面向镜头效果" class="headerlink" title="实现文字面向镜头效果"></a>实现文字面向镜头效果</h3><p>UE5 文字转向</p><span id="more"></span><hr><p>效果图：</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251740319.gif"/><p>首先将模型转换为蓝图，然后添加<code>text render</code>组件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251606404.png" alt="image-20220525160628148"></p><p>设置<code>horizental aliment</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251614313.png" alt="image-20220525161439075"></p><p>新建变量<code>LableName</code>变量类型为<code>text(文本)</code>类型，变量名为<code>Label</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251614683.png" alt="image-20220525161421781"></p><p>并选中<code>instance editable(可编辑实例)</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251616518.png" alt="image-20220525161648828"></p><p>在<code>ConstructionScript</code>中添加<code>set text </code>节点</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251608609.png" alt="image-20220525160807077"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251608974.png" alt="image-20220525160821425"></p><p>并将<code>text</code>框的值设置为刚刚新建的变量<code>lablename</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251620646.png" alt="image-20220525162044684"></p><p>然后再在变压器蓝图中建立如下蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251744482.png" alt="image-20220525174429685"></p><p>上图中<code>get player camera Manager</code>为所朝向的镜头方向，<code>Find Look at Rotation</code>之前没有遇到过，左上第一个引脚为字体组件的初始位置，左下引脚为需要朝向的角度，输出值为初始位置到需要朝向的位置所移动的角度，然后调用event tick实时调整角度。</p><p>因为字体原因，需要导入中文字体，否则，只能显示方框。新建字体。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251634963.png" alt="image-20220525163445326"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251639797.png" alt="image-20220525163955533"></p><p>在char输入窗口输入以下常用字体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs \">一乙二十丁厂七卜人入八九几儿了力乃刀又三于干亏士工土才寸下大丈与万上小口巾山千乞川亿个勺久凡及夕丸么广亡门义之尸弓己已子卫也女飞刃习叉马乡丰王井开夫天无元专云扎艺木五支厅不太犬区历尤友匹车巨牙屯比互切瓦止少日中冈贝内水见午牛手毛气升长仁什片仆化仇币仍仅斤爪反介父从今凶分乏公仓月氏勿欠风丹匀乌凤勾文六方火为斗忆订计户认心尺引丑巴孔队办以允予劝双书幻玉刊示末未击打巧正扑扒功扔去甘世古节本术可丙左厉右石布龙平灭轧东卡北占业旧帅归且旦目叶甲申叮电号田由史只央兄叼叫另叨叹四生失禾丘付仗代仙们仪白仔他斥瓜乎丛令用甩印乐句匆册犯外处冬鸟务包饥主市立闪兰半汁汇头汉宁穴它讨写让礼训必议讯记永司尼民出辽奶奴加召皮边发孕圣对台矛纠母幼丝式刑动扛寺吉扣考托老执巩圾扩扫地扬场耳共芒亚芝朽朴机权过臣再协西压厌在有百存而页匠夸夺灰达列死成夹轨邪划迈毕至此贞师尘尖劣光当早吐吓虫曲团同吊吃因吸吗屿帆岁回岂刚则肉网年朱先丢舌竹迁乔伟传乒乓休伍伏优伐延件任伤价份华仰仿伙伪自血向似后行舟全会杀合兆企众爷伞创肌朵杂危旬旨负各名多争色壮冲冰庄庆亦刘齐交次衣产决充妄闭问闯羊并关米灯州汗污江池汤忙兴宇守宅字安讲军许论农讽设访寻那迅尽导异孙阵阳收阶阴防奸如妇好她妈戏羽观欢买红纤级约纪驰巡寿弄麦形进戒吞远违运扶抚坛技坏扰拒找批扯址走抄坝贡攻赤折抓扮抢孝均抛投坟抗坑坊抖护壳志扭块声把报却劫芽花芹芬苍芳严芦劳克苏杆杠杜材村杏极李杨求更束豆两丽医辰励否还歼来连步坚旱盯呈时吴助县里呆园旷围呀吨足邮男困吵串员听吩吹呜吧吼别岗帐财针钉告我乱利秃秀私每兵估体何但伸作伯伶佣低你住位伴身皂佛近彻役返余希坐谷妥含邻岔肝肚肠龟免狂犹角删条卵岛迎饭饮系言冻状亩况床库疗应冷这序辛弃冶忘闲间闷判灶灿弟汪沙汽沃泛沟没沈沉怀忧快完宋宏牢究穷灾良证启评补初社识诉诊词译君灵即层尿尾迟局改张忌际陆阿陈阻附妙妖妨努忍劲鸡驱纯纱纳纲驳纵纷纸纹纺驴纽奉玩环武青责现表规抹拢拔拣担坦押抽拐拖拍者顶拆拥抵拘势抱垃拉拦拌幸招坡披拨择抬其取苦若茂苹苗英范直茄茎茅林枝杯柜析板松枪构杰述枕丧或画卧事刺枣雨卖矿码厕奔奇奋态欧垄妻轰顷转斩轮软到非叔肯齿些虎虏肾贤尚旺具果味昆国昌畅明易昂典固忠咐呼鸣咏呢岸岩帖罗帜岭凯败贩购图钓制知垂牧物乖刮秆和季委佳侍供使例版侄侦侧凭侨佩货依的迫质欣征往爬彼径所舍金命斧爸采受乳贪念贫肤肺肢肿胀朋股肥服胁周昏鱼兔狐忽狗备饰饱饲变京享店夜庙府底剂郊废净盲放刻育闸闹郑券卷单炒炊炕炎炉沫浅法泄河沾泪油泊沿泡注泻泳泥沸波泼泽治怖性怕怜怪学宝宗定宜审宙官空帘实试郎诗肩房诚衬衫视话诞询该详建肃录隶居届刷屈弦承孟孤陕降限妹姑姐姓始驾参艰线练组细驶织终驻驼绍经贯奏春帮珍玻毒型挂封持项垮挎城挠政赴赵挡挺括拴拾挑指垫挣挤拼挖按挥挪某甚革荐巷带草茧茶荒茫荡荣故胡南药标枯柄栋相查柏柳柱柿栏树要咸威歪研砖厘厚砌砍面耐耍牵残殃轻鸦皆背战点临览竖省削尝是盼眨哄显哑冒映星昨畏趴胃贵界虹虾蚁思蚂虽品咽骂哗咱响哈咬咳哪炭峡罚贱贴骨钞钟钢钥钩卸缸拜看矩怎牲选适秒香种秋科重复竿段便俩贷顺修保促侮俭俗俘信皇泉鬼侵追俊盾待律很须叙剑逃食盆胆胜胞胖脉勉狭狮独狡狱狠贸怨急饶蚀饺饼弯将奖哀亭亮度迹庭疮疯疫疤姿亲音帝施闻阀阁差养美姜叛送类迷前首逆总炼炸炮烂剃洁洪洒浇浊洞测洗活派洽染济洋洲浑浓津恒恢恰恼恨举觉宣室宫宪突穿窃客冠语扁袄祖神祝误诱说诵垦退既屋昼费陡眉孩除险院娃姥姨姻娇怒架贺盈勇怠柔垒绑绒结绕骄绘给络骆绝绞统耕耗艳泰珠班素蚕顽盏匪捞栽捕振载赶起盐捎捏埋捉捆捐损都哲逝捡换挽热恐壶挨耻耽恭莲莫荷获晋恶真框桂档桐株桥桃格校核样根索哥速逗栗配翅辱唇夏础破原套逐烈殊顾轿较顿毙致柴桌虑监紧党晒眠晓鸭晃晌晕蚊哨哭恩唤啊唉罢峰圆贼贿钱钳钻铁铃铅缺氧特牺造乘敌秤租积秧秩称秘透笔笑笋债借值倚倾倒倘俱倡候俯倍倦健臭射躬息徒徐舰舱般航途拿爹爱颂翁脆脂胸胳脏胶脑狸狼逢留皱饿恋桨浆衰高席准座脊症病疾疼疲效离唐资凉站剖竞部旁旅畜阅羞瓶拳粉料益兼烤烘烦烧烛烟递涛浙涝酒涉消浩海涂浴浮流润浪浸涨烫涌悟悄悔悦害宽家宵宴宾窄容宰案请朗诸读扇袜袖袍被祥课谁调冤谅谈谊剥恳展剧屑弱陵陶陷陪娱娘通能难预桑绢绣验继球理捧堵描域掩捷排掉堆推掀授教掏掠培接控探据掘职基著勒黄萌萝菌菜萄菊萍菠营械梦梢梅检梳梯桶救副票戚爽聋袭盛雪辅辆虚雀堂常匙晨睁眯眼悬野啦晚啄距跃略蛇累唱患唯崖崭崇圈铜铲银甜梨犁移笨笼笛符第敏做袋悠偿偶偷您售停偏假得衔盘船斜盒鸽悉欲彩领脚脖脸脱象够猜猪猎猫猛馅馆凑减毫麻痒痕廊康庸鹿盗章竟商族旋望率着盖粘粗粒断剪兽清添淋淹渠渐混渔淘液淡深婆梁渗情惜惭悼惧惕惊惨惯寇寄宿窑密谋谎祸谜逮敢屠弹随蛋隆隐婚婶颈绩绪续骑绳维绵绸绿琴斑替款堪搭塔越趁趋超提堤博揭喜插揪搜煮援裁搁搂搅握揉斯期欺联散惹葬葛董葡敬葱落朝辜葵棒棋植森椅椒棵棍棉棚棕惠惑逼厨厦硬确雁殖裂雄暂雅辈悲紫辉敞赏掌晴暑最量喷晶喇遇喊景践跌跑遗蛙蛛蜓喝喂喘喉幅帽赌赔黑铸铺链销锁锄锅锈锋锐短智毯鹅剩稍程稀税筐等筑策筛筒答筋筝傲傅牌堡集焦傍储奥街惩御循艇舒番释禽腊脾腔鲁猾猴然馋装蛮就痛童阔善羡普粪尊道曾焰港湖渣湿温渴滑湾渡游滋溉愤慌惰愧愉慨割寒富窜窝窗遍裕裤裙谢谣谦属屡强粥疏隔隙絮嫂登缎缓编骗缘瑞魂肆摄摸填搏塌鼓摆携搬摇搞塘摊蒜勤鹊蓝墓幕蓬蓄蒙蒸献禁楚想槐榆楼概赖酬感碍碑碎碰碗碌雷零雾雹输督龄鉴睛睡睬鄙愚暖盟歇暗照跨跳跪路跟遣蛾蜂嗓置罪罩错锡锣锤锦键锯矮辞稠愁筹签简毁舅鼠催傻像躲微愈遥腰腥腹腾腿触解酱痰廉新韵意粮数煎塑慈煤煌满漠源滤滥滔溪溜滚滨粱滩慎誉塞谨福群殿辟障嫌嫁叠缝缠静碧璃墙撇嘉摧截誓境摘摔聚蔽慕暮蔑模榴榜榨歌遭酷酿酸磁愿需弊裳颗嗽蜻蜡蝇蜘赚锹锻舞稳算箩管僚鼻魄貌膜膊膀鲜疑馒裹敲豪膏遮腐瘦辣竭端旗精歉熄熔漆漂漫滴演漏慢寨赛察蜜谱嫩翠熊凳骡缩慧撕撒趣趟撑播撞撤增聪鞋蕉蔬横槽樱橡飘醋醉震霉瞒题暴瞎影踢踏踩踪蝶蝴嘱墨镇靠稻黎稿稼箱箭篇僵躺僻德艘膝膛熟摩颜毅糊遵潜潮懂额慰劈操燕薯薪薄颠橘整融醒餐嘴蹄器赠默镜赞篮邀衡膨雕磨凝辨辩糖糕燃澡激懒壁避缴戴擦鞠藏霜霞瞧蹈螺穗繁辫赢糟糠燥臂翼骤鞭覆蹦镰翻鹰警攀蹲颤瓣爆疆壤耀躁嚼嚷籍魔灌蠢霸露囊罐匕刁丐歹戈夭仑讥冗邓艾夯凸卢叭叽皿凹囚矢乍尔冯玄邦迂邢芋芍吏夷吁吕吆屹廷迄臼仲伦伊肋旭匈凫妆亥汛讳讶讹讼诀弛阱驮驯纫玖玛韧抠扼汞扳抡坎坞抑拟抒芙芜苇芥芯芭杖杉巫杈甫匣轩卤肖吱吠呕呐吟呛吻吭邑囤吮岖牡佑佃伺囱肛肘甸狈鸠彤灸刨庇吝庐闰兑灼沐沛汰沥沦汹沧沪忱诅诈罕屁坠妓姊妒纬玫卦坷坯拓坪坤拄拧拂拙拇拗茉昔苛苫苟苞茁苔枉枢枚枫杭郁矾奈奄殴歧卓昙哎咕呵咙呻咒咆咖帕账贬贮氛秉岳侠侥侣侈卑刽刹肴觅忿瓮肮肪狞庞疟疙疚卒氓炬沽沮泣泞泌沼怔怯宠宛衩祈诡帚屉弧弥陋陌函姆虱叁绅驹绊绎契贰玷玲珊拭拷拱挟垢垛拯荆茸茬荚茵茴荞荠荤荧荔栈柑栅柠枷勃柬砂泵砚鸥轴韭虐昧盹咧昵昭盅勋哆咪哟幽钙钝钠钦钧钮毡氢秕俏俄俐侯徊衍胚胧胎狰饵峦奕咨飒闺闽籽娄烁炫洼柒涎洛恃恍恬恤宦诫诬祠诲屏屎逊陨姚娜蚤骇耘耙秦匿埂捂捍袁捌挫挚捣捅埃耿聂荸莽莱莉莹莺梆栖桦栓桅桩贾酌砸砰砾殉逞哮唠哺剔蚌蚜畔蚣蚪蚓哩圃鸯唁哼唆峭唧峻赂赃钾铆氨秫笆俺赁倔殷耸舀豺豹颁胯胰脐脓逛卿鸵鸳馁凌凄衷郭斋疹紊瓷羔烙浦涡涣涤涧涕涩悍悯窍诺诽袒谆祟恕娩骏琐麸琉琅措捺捶赦埠捻掐掂掖掷掸掺勘聊娶菱菲萎菩萤乾萧萨菇彬梗梧梭曹酝酗厢硅硕奢盔匾颅彪眶晤曼晦冕啡畦趾啃蛆蚯蛉蛀唬唾啤啥啸崎逻崔崩婴赊铐铛铝铡铣铭矫秸秽笙笤偎傀躯兜衅徘徙舶舷舵敛翎脯逸凰猖祭烹庶庵痊阎阐眷焊焕鸿涯淑淌淮淆渊淫淳淤淀涮涵惦悴惋寂窒谍谐裆袱祷谒谓谚尉堕隅婉颇绰绷综绽缀巢琳琢琼揍堰揩揽揖彭揣搀搓壹搔葫募蒋蒂韩棱椰焚椎棺榔椭粟棘酣酥硝硫颊雳翘凿棠晰鼎喳遏晾畴跋跛蛔蜒蛤鹃喻啼喧嵌赋赎赐锉锌甥掰氮氯黍筏牍粤逾腌腋腕猩猬惫敦痘痢痪竣翔奠遂焙滞湘渤渺溃溅湃愕惶寓窖窘雇谤犀隘媒媚婿缅缆缔缕骚瑟鹉瑰搪聘斟靴靶蓖蒿蒲蓉楔椿楷榄楞楣酪碘硼碉辐辑频睹睦瞄嗜嗦暇畸跷跺蜈蜗蜕蛹嗅嗡嗤署蜀幌锚锥锨锭锰稚颓筷魁衙腻腮腺鹏肄猿颖煞雏馍馏禀痹廓痴靖誊漓溢溯溶滓溺寞窥窟寝褂裸谬媳嫉缚缤剿赘熬赫蔫摹蔓蔗蔼熙蔚兢榛榕酵碟碴碱碳辕辖雌墅嘁踊蝉嘀幔镀舔熏箍箕箫舆僧孵瘩瘟彰粹漱漩漾慷寡寥谭褐褪隧嫡缨撵撩撮撬擒墩撰鞍蕊蕴樊樟橄敷豌醇磕磅碾憋嘶嘲嘹蝠蝎蝌蝗蝙嘿幢镊镐稽篓膘鲤鲫褒瘪瘤瘫凛澎潭潦澳潘澈澜澄憔懊憎翩褥谴鹤憨履嬉豫缭撼擂擅蕾薛薇擎翰噩橱橙瓢蟥霍霎辙冀踱蹂蟆螃螟噪鹦黔穆篡篷篙篱儒膳鲸瘾瘸糙燎濒憾懈窿缰壕藐檬檐檩檀礁磷了瞬瞳瞪曙蹋蟋蟀嚎赡镣魏簇儡徽爵朦臊鳄糜癌懦豁臀藕藤瞻嚣鳍癞瀑襟璧戳攒孽蘑藻鳖蹭蹬簸簿蟹靡癣羹鬓攘蠕巍鳞糯譬霹躏髓蘸镶瓤矗<br></code></pre></td></tr></table></figure><p>编译保存运行即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5学习</title>
    <link href="/2022/05/16/UE5/"/>
    <url>/2022/05/16/UE5/</url>
    
    <content type="html"><![CDATA[<p>UE5学习记录</p><center>UE5学习记录</center><span id="more"></span><h3 id="UE5学习记录"><a href="#UE5学习记录" class="headerlink" title="UE5学习记录"></a>UE5学习记录</h3><p>[TOC]</p><h3 id="使用蓝图进行操作"><a href="#使用蓝图进行操作" class="headerlink" title="使用蓝图进行操作"></a>使用蓝图进行操作</h3><hr><p>在UE5中使B<code>BluePrint</code>移动<code>static mesh</code></p><p>任务：使操控者控制任务移动到指定地点之后，所在地点的模块下降，并使另一块模块上升</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517103458033.png" alt="image-20220517103458033"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517103636348.png" alt="image-20220517103636348"></p><p>下面是本程序使用的蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517164757033.png" alt="image-20220517164757033"></p><iframe src="https://blueprintue.com/render/0o4fp0rp/" scrolling="no" allowfullscreen></iframe><p>操作流程如下</p><p>首先在outliner中选择到目标物体右键点击右侧栏中的所选物体</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517104254316.png" alt="image-20220517104254316"></p><p>点击Browse to Aseet<img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517104527409.png" alt="image-20220517104527409"></p><p>在弹出的<code>contentdraw</code>框中双击蓝色高亮的模块</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517104631621.png" alt="image-20220517104631621"></p><p>然后便会出现该界面,点击<code>event Graph</code>将上述蓝图代码粘贴到此处。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517104915957.png" alt="image-20220517104915957"></p><p>切换到<code>Viewpoint</code>界面，点击<code>add</code>添加<code>Box collision</code><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517105330471.png" alt="image-20220517105330471"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517105310964.png" alt="image-20220517105310964"></p><p>确定选中碰撞盒子<code>Box</code>之后再右侧栏<code>Details</code>选项框中下拉，找到<code>on component Begin Overlap</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517105530707.png" alt="image-20220517105530707"></p><h4 id="On-Componet-Begin-Overlap"><a href="#On-Componet-Begin-Overlap" class="headerlink" title="On Componet Begin Overlap"></a>On Componet Begin Overlap</h4><hr><p>点击完成后成功添加，此模块的功能是对碰撞盒子的功能进行相应的操作。其中<code>other Actor</code>表示检测碰撞盒子是否与其他模块重叠，也就是<code>other Actor</code> 所连的模块 <code>cast to ...</code>。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517105919314.png" alt="image-20220517105919314"></p><p>返回场景中找到控制人物的标签</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517110427922.png" alt="image-20220517110427922"></p><h4 id="Cast-To转换节点"><a href="#Cast-To转换节点" class="headerlink" title="Cast To转换节点"></a>Cast To转换节点</h4><hr><p>返回蓝图右键添加刚刚找到的控制任务的标签，输入<code>Cast To BP_ThirdPersonCharactor</code>然后将两个模块按前文蓝图中的连接方式连接。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517110537722.png" alt="image-20220517110537722"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517110742506.png" alt="image-20220517110742506"></p><p>在<a href="https://docs.unrealengine.com/4.26/zh-CN/ProgrammingAndScripting/Blueprints/UserGuide/CastNodes/">官方文档中</a>这个模块具有以下功能</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517112309025.png" alt="image-20220517112309025"></p><p>可以看到灯的控制可以使用该节点</p><h4 id="Move-component-to"><a href="#Move-component-to" class="headerlink" title="Move component to"></a>Move component to</h4><hr><p>添加节点，该节点的功能是移动绑定到compont上的节点，移动目标位置为黄色点，目标旋转角度为紫色点所，移动时间示。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517112544237.png" alt="image-20220517112544237"></p><h4 id="if条件判断节点"><a href="#if条件判断节点" class="headerlink" title="if条件判断节点"></a>if条件判断节点</h4><hr><p>右键分别输入<code>greater</code>和<code>branch</code>添加两个节点。</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517114900453.png" alt="image-20220517114900453"  /><p>两个节点表示条件判断：如果上方绿色节点的输入值大于下方的-30固定值，那么就执行<code>True</code>所连接的节点操作，否则执行<code>False</code>。</p><h4 id="加减乘除运算的添加"><a href="#加减乘除运算的添加" class="headerlink" title="加减乘除运算的添加"></a>加减乘除运算的添加</h4><hr><p>可以直接右键输入相应的运算符，也可以输入相应的英文，下面以减法为例子，乘除法同理。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517115543953.png" alt="image-20220517115543953"></p><h4 id="坐标的输入"><a href="#坐标的输入" class="headerlink" title="坐标的输入"></a>坐标的输入</h4><hr><p>坐标的输入有两种方式：一种是添加<code>Make Vector</code>中间坐标将<code>Return Value</code>直接连接目标节点；</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517120230737.png" alt="image-20220517120230737"></p><p>二是将坐标节点进行拆分，右键点击目标坐标点击<code>split struct Pin</code>将坐标拆分。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517120616579.png" alt="image-20220517120616579"></p><h4 id="变量的添加"><a href="#变量的添加" class="headerlink" title="变量的添加"></a>变量的添加</h4><hr><p>在左侧导航栏中点击加号可以添加变量。<img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517122910339.png" alt="image-20220517122910339"></p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><hr><p>在左侧栏中点击<code>＋</code>新建函数，在函数编辑界面右侧选项框<code>input</code>选项中选择<code>static mesh component</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517132020479.png" alt="image-20220517132020479"></p><p><code>output</code>选项中则选择<code>Vector</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517132116896.png" alt="image-20220517132116896"></p><p>按如下连接<code>rise</code>节点</p><p><code>rise</code>函数：</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517133322640.png" alt="image-20220517133322640"></p><p><code>fall</code>函数：</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517133439221.png" alt="image-20220517133439221"></p><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><hr><p>两种调用方式：方式一，由<code>Event BeginPlay</code>直接调用：</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517134602094.png" alt="image-20220517134602094"></p><p>方式二，间接调用：</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517134312773.png" alt="image-20220517134312773"></p><p>使用第二种方式可以完成循环，在蓝图的末端，添加<code>Custom Event0</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517135404730.png" alt="image-20220517135404730"></p><h4 id="设置角色收到的伤害"><a href="#设置角色收到的伤害" class="headerlink" title="设置角色收到的伤害"></a>设置角色收到的伤害</h4><hr><p>在角色<code>BP_ThirdPersonCharacter</code>蓝图中添加如下内容            <img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517142727423.png" alt="image-20220517142727423"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517145855212.png" alt="image-20220517145855212"></p><p>上部分的功能计算角色伤害，如果角色生命值小于等于0那么久判断该角色死亡。</p><p>选择<code>Ragdoll</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518181118542.png" alt="image-20220518181118542"></p><p><img src="C:%5CUsers%5Cjerem%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220518182314895.png" alt="image-20220518182314895"></p><p>上部分功能为设置角色死亡</p><p>在物体<code>BP_smash</code>蓝图中添加 如下内容                                       <img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517142916738.png" alt="image-20220517142916738"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517143018090.png" alt="image-20220517143018090"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517143501777.png" alt="image-20220517143501777"></p><p>上图中红色方框内为新添加的最后一个节点，为计算角色伤害即  <img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517142727423.png" alt="image-20220517142727423">蓝图中的自定义事件</p><p>之后再增加对收到伤害的显示功能，添加<code>Print String</code>节点</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517144310361.png" alt="image-20220517144310361"></p><h3 id="开发第一个第三人称游戏"><a href="#开发第一个第三人称游戏" class="headerlink" title="开发第一个第三人称游戏"></a>开发第一个第三人称游戏</h3><hr><h4 id="Materials-Function"><a href="#Materials-Function" class="headerlink" title="Materials Function"></a>Materials Function</h4><p>新建Material         <img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517172520222.png" alt="image-20220517172520222"></p><p>进入<code>Material</code>后新建四个<code>layer Blend</code> ( <code>Sand</code>、<code>Rock</code>、<code>Grass</code>、<code>Auto</code> )</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517162737561.png" alt="image-20220517162737561"></p><p>接着新建<code>Materials Function </code> </p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517163153120.png" alt="image-20220517163153120"></p><p>再<code>Materials Function </code> 中建立以下蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517171543442.png" alt="image-20220517171543442"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517171827612.png" alt="image-20220517171827612"></p><p>用相同的方法，分别建立<code>MR_Rock</code>和<code>MR_Sand</code>另外两个<code>Material fuction</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517174448379.png" alt="image-20220517174448379"></p><p>然后点击<code>landscape</code>，在其中建立如下蓝图。其中上半部分所示区域是从<code>gold</code>材质中截取出来的</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517180028580.png" alt="image-20220517180028580"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517180228817.png" alt="image-20220517180228817"></p><p>之后再点击右键创建材质<code>Landscape</code>实例</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517180339289.png" alt="image-20220517180339289"></p><p>点击进入实例，并选中下图中红框部分选项，并适当调整。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517180507169.png" alt="image-20220517180507169"></p><p>选择<code>selectMode</code>，选择全部<code>landscape</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518092218576.png" alt="image-20220518092218576"></p><p>如下图所示，选中下方<code>landsscape</code>将<code>landsscape material</code>拖入到目标区域<img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220517181251096.png" alt="image-20220517181251096"></p><p>然后进行如下操作。注意，　<font color='red'> <strong>此处一定要先<code>paintauto</code>类型的材质，否则拉取地形不会自动绘制不同的地形</strong></font></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518092715797.png" alt="image-20220518092715797"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518092822808.png" alt="image-20220518092822808"></p><p>然后点击<code>Sculpt</code>就可以绘制</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518092953959.png" alt="image-20220518092953959"></p><p>将<code>Landscape</code>中<code>enable edit layer</code>选中</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518102305530.png" alt="image-20220518102305530"></p><p>添加<code>water</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518102146292.png" alt="image-20220518102146292"></p><h4 id="添加植物"><a href="#添加植物" class="headerlink" title="添加植物"></a>添加植物</h4><hr><p>从<code>QuixelBridge</code></p><p>中下载需要的植物模型<img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518110621670.png" alt="image-20220518110621670"></p><p>在<code>Foliage</code>中全选，就可以添加植物</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518110533362.png" alt="image-20220518110533362"></p><p>常用选项</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518111044603.png" alt="image-20220518111044603" style="zoom:50%;" /><p><strong>scale x</strong>：用于设置植物的随机大小取值范围。</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518111216120.png" alt="image-20220518111216120" style="zoom:50%;" /><p><strong>Density</strong>：用于设置植物的密度。</p><h4 id="添加碰撞"><a href="#添加碰撞" class="headerlink" title="添加碰撞"></a>添加碰撞</h4><hr><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518140112455.png" alt="image-20220518140112455"></p><h4 id="制作HUD"><a href="#制作HUD" class="headerlink" title="制作HUD"></a>制作HUD</h4><hr><p>首先在角色蓝图中添加变量，并在编译之后添加默认值</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518141833989.png" alt="image-20220518141833989"></p><p>新建<code>user widget Buleprint</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518142041286.png" alt="image-20220518142041286"></p><p>这里有一个坑，就是须自行添加<code>CanvasPanel</code>组件，之后在<code>CanvasPanel</code>组件中进行操作，</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518144720809.png" alt="image-20220518144720809"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518145613022.png" alt="image-20220518145613022"></p><p>绑定<code>Function</code>到<code>progressBar</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518145903497.png" alt="image-20220518145903497"></p><p>将四个进度条进行重命名</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518155322793.png" alt="image-20220518155322793"></p><p>添加如下蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518155434443.png" alt="image-20220518155434443"></p><p>将蓝图存储到<code>HUDhealth.txt</code>文档中</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518155623705.png" alt="image-20220518155623705"></p><p>其余三个进度条显示也同理</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518155926420.png" alt="image-20220518155926420"></p><p>但需要修改红色框内的节点，其中框内的标量表示在制作HUD的第一步在人物蓝图中添加的四个变量</p><p>最后编译运行，可以正常显示，初始值为第一步中设置的默认值。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518160331334.png" alt="image-20220518160331334"></p><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><hr><p>从<code>bridge</code>中下载好相应的模型之后，拖到场景中</p><p>点击<code>add</code>，输入<code>rotating movement</code>并设置 Z 轴旋转速度为180。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518163329750.png" alt="image-20220518163329750"></p><h4 id="添加粒子效果"><a href="#添加粒子效果" class="headerlink" title="添加粒子效果"></a>添加粒子效果</h4><hr><p>右键添加</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518163825615.png" alt="image-20220518163825615"></p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518164008610.png" alt="image-20220518164008610" style="zoom:50%;" /><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518164148820.png" alt="image-20220518164148820" style="zoom:50%;" /><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518164136969.png" style="zoom:50%;" /><p>最后将效果拖到场景中</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518164730695.png" alt="image-20220518164730695"></p><p>在<code>outline</code>中将粒子效果拖到物体下方，拖动物体，物体所带的效果也会随之移动</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519102623971.png" alt="image-20220519102623971"></p><p>在详细设置页面，可以看到<code>spawn rate</code>表示设置粒子密度</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220518172850653.png" alt="image-20220518172850653"></p><h4 id="建立逻辑"><a href="#建立逻辑" class="headerlink" title="建立逻辑"></a>建立逻辑</h4><hr><p>目标：在玩家控制人物移动到椰子处时，玩家将获得生命值。</p><p>在人物蓝图中分别添加以下方法</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519100515708.png" alt="image-20220519100515708"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519100546008.png" alt="image-20220519100546008"></p><p>给椰子添加碰撞盒子，让玩家控制人物触碰到时恢复饥饿值和口渴值。</p><p>点击到椰子将椰子转换为蓝图类</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519102842278.png" alt="image-20220519102842278"></p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519103218782.png" alt="image-20220519103218782" style="zoom:50%;" /><p>重命名，然后在蓝图中添加碰撞盒子</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519103900305.png" alt="image-20220519103900305"></p><p>右键碰撞盒子，添加<code>BeginOverlap</code>和<code>EndOverlap</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519104030141.png" alt="image-20220519104030141"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519104921374.png" alt="image-20220519104921374"></p><p>从上图中可以看到，多了一个<code>Destroy Actor</code>节点，此节点的功能为删除物体。保存编译便完成了椰子和饥饿直之间的逻辑交互。当人物与椰子碰撞时Hunger值会增加。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519110136281.png" alt="image-20220519110136281"></p><p>然后添加水和口渴值之间的交互。添加<code>triggle volume</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519105539676.png" alt="image-20220519105539676"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519110020704.png" alt="image-20220519110020704"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519105938137.png" alt="image-20220519105938137"></p><p>添加以下蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519110721424.png" alt="image-20220519110721424"></p><h4 id="使用EventTick进行定时"><a href="#使用EventTick进行定时" class="headerlink" title="使用EventTick进行定时"></a>使用EventTick进行定时</h4><hr><p>如图，在<code>charactor</code>蓝图中添加以下内容</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519115405896.png" alt="image-20220519115405896"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519115421388.png" alt="image-20220519115421388"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519115436684.png" alt="image-20220519115436684"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519115451884.png" alt="image-20220519115451884"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519115513870.png" alt="image-20220519115513870"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519115529634.png" alt="image-20220519115529634"></p><h4 id="设置角色死亡或过关的动画"><a href="#设置角色死亡或过关的动画" class="headerlink" title="设置角色死亡或过关的动画"></a>设置角色死亡或过关的动画</h4><hr><p>这里使用了<code>Remove all widgets</code>节点</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519121517659.png" alt="image-20220519121517659"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519121615948.png" alt="image-20220519121615948"></p><h3 id="蓝图的分类"><a href="#蓝图的分类" class="headerlink" title="蓝图的分类"></a>蓝图的分类</h3><hr><p>主要有以下蓝图类</p><p>关卡蓝图、角色 pawn 控制器 游戏模式、Actor蓝图、界面蓝图</p><p>交互蓝图功能设计步骤：时间、条件、步骤</p><h4 id="鼠标点击"><a href="#鼠标点击" class="headerlink" title="鼠标点击"></a>鼠标点击</h4><p>在关卡蓝图中添加以下内容，表示显示鼠标和使能点击事件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519151511678.png" alt="image-20220519151511678"></p><p>然后在场景中点击选择的物体</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519151642391.png" alt="image-20220519151642391"></p><p>在关卡蓝图中右键添加节点</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519151805627.png" alt="image-20220519151805627"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519152211589.png" alt="image-20220519152211589"></p><p>运行之后点击建筑物，就可以打印</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519152142019.png" alt="image-20220519152142019"></p><p>进行如下操作，添加所选目标的蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519152558956.png" alt="image-20220519152558956"></p><p>添加模型或其他交互组件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519160818021.png" alt="image-20220519160818021"></p><p>在关卡蓝图中添加如下蓝图，其中Flip flop的功能是点一下执行A，再点一下执行B</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519161801535.png" alt="image-20220519161801535"></p><h4 id="公告板组件"><a href="#公告板组件" class="headerlink" title="公告板组件"></a>公告板组件</h4><hr><p>公告板组件可以跟随视角移动。</p><p>添加<code>Bilboard</code>组件为<code>cube</code>组件的子组件</p><p>设置<code>visible</code>和<code>hide in game</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519162748975.png" alt="image-20220519162748975"></p><p>在关卡蓝图中设置中选择<code>propergate to children</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519163108861.png" alt="image-20220519163108861"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519163402733.png" alt="image-20220519163402733"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519163425641.png" alt="image-20220519163425641"></p><h4 id="鼠标悬停事件"><a href="#鼠标悬停事件" class="headerlink" title="鼠标悬停事件"></a>鼠标悬停事件</h4><hr><p>在关卡蓝图中设置鼠标悬停事件<code>Enable Mouse Events</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519165123181.png" alt="image-20220519165123181"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519165410116.png" alt="image-20220519165410116"></p><p>因为这套流程使用频率很高，所以在关卡蓝图中只保存图一部分的内容，其中选定节点后按<code>c</code>键可以直接添加<code>comment</code></p><p>新建一个<code>actor</code>把这个actor当作父级做基础设置，然后其子集替换模型，也就是将鼠标点击和上图中鼠标悬停的逻辑放入新建的<code>actor</code>中。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519170028732.png" alt="image-20220519170028732"></p><p>添加场景组件方便控制变换信息</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519170406866.png" alt="image-20220519170406866"></p><p>然后在场景中添加相应的骨骼网格体或静态网格体</p><p>其中需要进行设置和添加描边效果</p><p>在场景中添加两个相同的<code>static mesh</code>，在第二个<code>static mesh</code>中添加</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519171610843.png" alt="image-20220519171610843"></p><p><code>static mesh1</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519172707151.png" alt="image-20220519172707151"></p><p><code>static mesh2</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519172821855.png" alt="image-20220519172821855"></p><p>之后主要是设置<code>static mesh2</code>中<code>render</code>栏下<code>visible</code>选项</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519173027346.png" alt="image-20220519173027346"></p><p>为了避免出现在实际操作中，出现鼠标悬停BUG，比如鼠标悬停的效果时有时无，需要添加碰撞盒子</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519173413735.png" alt="image-20220519173413735"></p><p>最后，最重要的一点是设置碰撞，否则悬停和点击将不会起作用。</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220519174823736.png" alt="image-20220519174823736"  /><p>接着完成以下蓝图</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220520092743436.png"/><h4 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h4><hr><p>添加时间轴</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220520093309311.png" alt="image-20220520093309311"></p><p>双击</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220520093343354.png" alt="image-20220520093343354"></p><p>选择添加浮点型轨道</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220520093404188.png" alt="image-20220520093404188"></p><p>添加关键帧，按住<code>shift</code>键点击</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220520093618665.png" alt="image-20220520093618665"></p><p>选择两个点之后，按数字1键，使两个点的数值变换更加平滑</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220520094137404.png" alt="image-20220520094137404"></p><p>连接各个节点</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220520094158428.png" alt="image-20220520094158428"></p><p>添加<code>set world 3d(scene)</code>并连接该节点</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220520094527078.png" alt="image-20220520094527078"></p><p>最后的执行效果</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/测试4.gif"/><p>右键点击创建子蓝图类</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/image-20220520104325534.png" alt="image-20220520104325534"></p><p>在子蓝图中，已经继承了父类蓝图中的方法，只需要修改<code>static mesh</code>即可</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201052728.png" alt="image-20220520105159365"></p><p>完成效果</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201101388.gif"/><h4 id="PAWN"><a href="#PAWN" class="headerlink" title="PAWN"></a>PAWN</h4><hr><h5 id="一、鼠标控制旋转"><a href="#一、鼠标控制旋转" class="headerlink" title="一、鼠标控制旋转"></a>一、鼠标控制旋转</h5><p>新建一个pawn</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201109902.png" alt="image-20220520110933966"></p><p>添加<code>Camera</code>组件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201111418.png" alt="image-20220520111103359"></p><p>设置好之后直接将<code>pawn</code>放拖到场景当中</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201115375.png" alt="image-20220520111544750"></p><p>设置相机自动控制玩家 </p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201120979.png" alt="image-20220520112035482"></p><p>之后在项目设置，引擎，输入中添加轴映射。轴映射类似于鼠标的移动，上移为1下移为-1，不是通过按键操作的。而操作映射类似于按键。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201127387.png" alt="image-20220520112704027"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201131200.png" alt="image-20220520113151845"></p><p>然后再<code>pawn</code>编辑蓝图，然后再点击使用<code>pawn</code>控制旋转</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201139128.png" alt="image-20220520113928019"></p><p><strong>InputAxis Turn</strong>:输入轴向的转向</p><p><strong>InputAxisLookUp</strong>：输入轴向向上看</p><p><strong>Add Controller Yaw Input</strong>:屏幕视口左右</p><p><strong>Add Controller Pitch Input</strong>:屏幕视口上下</p><p>按住鼠标左键，可以进行转动但可以看到此时摄像机的选装并不是围绕物体进行旋转，所以需要添加弹簧臂组件。</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201147341.gif"/><h5 id="二、插入弹簧臂"><a href="#二、插入弹簧臂" class="headerlink" title="二、插入弹簧臂"></a>二、插入弹簧臂</h5><p>将弹簧臂组件添加为摄像机的父级，并取消摄像机<code>pawn</code>控制旋转，在弹簧臂上勾选上<code>pawn</code>控制旋转。然后调整目标臂长度</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201152824.png" alt="image-20220520115230547"></p><p>最终的效果</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201203593.gif"/><h5 id="三、使用鼠标滚轮控制远近"><a href="#三、使用鼠标滚轮控制远近" class="headerlink" title="三、使用鼠标滚轮控制远近"></a>三、使用鼠标滚轮控制远近</h5><p>在设置中添加操作映射</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201209867.png" alt="image-20220520120939480"></p><p>添加以下蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201223326.png" alt="image-20220520122343035"></p><p>其中事件线设置和之前选中物体变大的时间线设置相似</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201224639.png" alt="image-20220520122443510"></p><p>最终效果</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201222442.gif"/><h5 id="四、场景交互的转换"><a href="#四、场景交互的转换" class="headerlink" title="四、场景交互的转换"></a>四、场景交互的转换</h5><p>在关卡蓝图进行如下交互设置</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201315301.png" alt="image-20220520131528787"></p><p>原有的基本操作也修改为如下所示</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201316031.png" alt="image-20220520131615367"></p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201311410.gif"/><h5 id="五、摄像机延迟"><a href="#五、摄像机延迟" class="headerlink" title="五、摄像机延迟"></a>五、摄像机延迟</h5><p>调整摄像机的旋转延迟</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201321298.png" alt="image-20220520132128269"></p><h5 id="六、限制旋转角度"><a href="#六、限制旋转角度" class="headerlink" title="六、限制旋转角度"></a>六、限制旋转角度</h5><p>在<code>pawn</code>蓝图中进行编辑</p><p>重新设置鼠标控制旋转部分的蓝图，注意红色方框内<code>Add Controller Yaw Input</code>应该改为<code>Set Control Rotation</code>。由<code>inputAxis MouseY_Axis</code>获得鼠标轴移动，当鼠标向上移时返回值为负，向下时候返回值为正</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201437434.png" alt="image-20220520143745857"></p><h5 id="七、设置滚轮的细腻程度"><a href="#七、设置滚轮的细腻程度" class="headerlink" title="七、设置滚轮的细腻程度"></a>七、设置滚轮的细腻程度</h5><p>在原有滚轮缩放蓝图中添加一个延迟即可，其中<code>duration</code>表示细腻程度，值越小，越细腻</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201446505.png" alt="image-20220520144628166"></p><p>效果</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201453649.gif"/><p>小技巧：折叠节点</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201457691.png" alt="image-20220520145754320"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201458104.png" alt="image-20220520145806907"></p><h5 id="八、设置鼠标的初始位置"><a href="#八、设置鼠标的初始位置" class="headerlink" title="八、设置鼠标的初始位置"></a>八、设置鼠标的初始位置</h5><p>在关卡蓝图中设置鼠标</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201519021.png" alt="image-20220520151907531"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201519408.png" alt="image-20220520151941439"></p><h5 id="九、设置wasd前后移动"><a href="#九、设置wasd前后移动" class="headerlink" title="九、设置wasd前后移动"></a>九、设置wasd前后移动</h5><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201605265.png" alt="image-20220520160502106"></p><p>添加<code>FloatingPawnMovent</code>组件用于控制移动速度</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201606129.png" alt="image-20220520160618851"></p><p>然后限制镜头移动距离，让镜头保持在某一固定区域移动</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205201621759.png" alt="image-20220520162142177"></p><h5 id="十、视角平移至鼠标点击位置"><a href="#十、视角平移至鼠标点击位置" class="headerlink" title="十、视角平移至鼠标点击位置"></a>十、视角平移至鼠标点击位置</h5><p>首先需要在场景蓝图中设置使能点击事件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205240936871.png" alt="image-20220524093654896"></p><p>在<code>pawn</code>中进行详细蓝图设计</p><p>新建函数</p><p>这里使用到了设置场景位置的函数</p><p><code>setworldlocation</code></p><p>添加的时候选择根节点</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205240914166.png" alt="image-20220524091445988"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205240938762.png" alt="image-20220524093800016"></p><p>然后在actor蓝图中添加点击事件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205240939097.png" alt="image-20220524093940106"></p><p>至此可以完成基本的点击跳转操作</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205240943727.gif"/><p>但转换很生硬，如果想让移动更加顺滑，我们需要在actor蓝图中进行编辑。添加<code>get world location</code>、<code>lerp</code>。然后将pawn的world location 连接lerp的a脚，static mesh 的location连接b脚。Lerp表示从a到b移动，移动的比例为alpha。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205240947204.png" alt="image-20220524094743131"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205240949259.png" alt="image-20220524094934755"></p><p>接着再添加一个时间线</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205240958527.png" alt="image-20220524095821870"></p><p>但时间线还未重置，当所有节点都移动了一次之后，移动将会变为直接跳转。所以需要设置一个判断条件来重置时间线</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241003605.png" alt="image-20220524100301629"></p><p>其中，判断条件的最后一个输入引脚表示为容差率。或者直接连接时间轴的<code>play form start</code></p><h4 id="使用结构struct"><a href="#使用结构struct" class="headerlink" title="使用结构struct"></a>使用结构struct</h4><hr><p>结构的使用方式</p><p>1.先建立一个结构</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241028969.png" alt="image-20220524102842806"></p><p>编辑结构，添加变量</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241029796.png" alt="image-20220524102902661"></p><p>在蓝图中创建变量，并将变量类型设置为刚刚创建的结构</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241031439.png" alt="image-20220524103149161"></p><p>编译蓝图之后在右侧栏中可以看到结构中设置的默认值。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241033279.png" alt="image-20220524103343274"></p><p>其中打印类似于append节点</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241037958.png" alt="image-20220524103720223"></p><p>两种设置结构中变量值的方式，<code>make struct</code>和<code>set member in struct</code></p><p>前者默认全选</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241040408.png" alt="image-20220524104023252"></p><h4 id="使用函数库"><a href="#使用函数库" class="headerlink" title="使用函数库"></a>使用函数库</h4><hr><h4 id="宏库"><a href="#宏库" class="headerlink" title="宏库"></a>宏库</h4><hr><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><hr><p>首先新建接口</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241238391.png" alt="image-20220524123802695"></p><p>接着在需要使用接口的地方点击类设置并添加创建的接口</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241237128.png" alt="image-20220524123659300"></p><p>点击完之后在左侧可以看到已经添加接口</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241241298.png" alt="image-20220524124154858"></p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>创建枚举蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241435942.png" alt="image-20220524143511244"></p><p>在actor中设置相应的按键</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241428697.png" alt="image-20220524142808238"></p><p>记得设置actor的接收输入设置为玩家0，否则在actor中编写蓝图输入按键将无效</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241445386.png" alt="image-20220524142549510"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241429777.png" alt="image-20220524142932112"></p><p>在actor中编写蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241444496.png" alt="image-20220524144457289"></p><p>完成按键事件的切换</p><h4 id="事件分发器"><a href="#事件分发器" class="headerlink" title="事件分发器"></a>事件分发器</h4><hr><p>首先添加事件分发器</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241502607.png" alt="image-20220524150226156"></p><p>在actor中添加按键调用</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241515429.png" alt="image-20220524151544180"></p><p>然后在场景中选中需要添加事件分发的物体</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241501344.png" alt="image-20220524150151864"></p><p>在关卡蓝图中添加</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241503849.png" alt="image-20220524150303920"></p><p>然后绑定，并添加自定义事件，连接引脚。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241505105.png" alt="image-20220524150533151"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241516825.png" alt="image-20220524151331799"></p><p>可以看到，按下3键之后同时答应了两条信息</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241518096.png" alt="image-20220524151812808"></p><p>所以分发事件就是一个操作可以由事件分发器，同时分发多个事件。</p><p>应用：控制灯的亮度</p><p>右键用户界面选择控件蓝图</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241527210.png" alt="image-20220524152735660"></p><p>添加滑条模块并设置最大值和最小值</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241531448.png" alt="image-20220524153058631"></p><p>在图标中添加使事件分发器</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241533274.png" alt="image-20220524153258542"></p><p>添加浮点型变量</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241538399.png" alt="image-20220524153806203"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241539685.png" alt="image-20220524153900768"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241540135.png" alt="image-20220524154009898"></p><p>最后连接</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241540404.png" alt="image-20220524154022025"></p><p>然后在关卡蓝图中创建控件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241542200.png" alt="image-20220524154248696"></p><p>选择创建的ui界面</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241544856.png" alt="image-20220524154443806"></p><p>然后再继续添加 add view port</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241546289.png" alt="image-20220524154559262"></p><p>右键此处，将此引脚提升为变量</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241548842.png" alt="image-20220524154828380"></p><p>重新连接</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241550975.png" alt="image-20220524155058456"></p><p>将新建变量拖出，绑定light control，即再ui界面中设置好的事件分发器。而light control中的 light strenth输出值即为控制光线的亮度值，从滑条获取来的输出值。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241557515.png" alt="image-20220524155744932"></p><p>之后新建序列将两条执行线相连</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241601634.png" alt="image-20220524160132508"></p><p>在场景添加灯光</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241608858.png" alt="image-20220524160810600"></p><p>然后对灯光进行引用</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241609042.png" alt="image-20220524160943913"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241609690.png" alt="image-20220524160934507"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241609698.png" alt="image-20220524160952844"></p><p>设置灯光强度，数据为lightcontrol事件中 light strenth</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241618643.png" alt="image-20220524161814408"></p><p>最终成果</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205241620430.gif"/><p>同理，也可以控制太阳的自动升起。</p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251226135.gif"/><p>变化只是将蓝图中需要操作的控件改为directlight</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251229410.png" alt="image-20220525122933814"></p><p>在浏览<a href="https://docs.unrealengine.com/5.0/zh-CN/sun-and-sky-actor-in-unreal-engine/">官方文档</a>后，发现可以安装插件自动根据位置定位太阳的位置</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251243032.png" alt="image-20220525124306079"></p><p>不使用自己添加的天空光源，添加下图所示<code>太阳和天空</code>光源</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251251787.png" alt="image-20220525125143981"></p><p>之后便可以在右侧细节修改详细设置</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251254161.png" alt="image-20220525125421440"></p><p>由于光照的使用频率高，可设置属性较多，所以将此组件单独进行详细研究。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><hr><h4 id="sunsky（太阳和天空组件）"><a href="#sunsky（太阳和天空组件）" class="headerlink" title="sunsky（太阳和天空组件）"></a>sunsky（太阳和天空组件）</h4><hr><p>组件的添加，在事件分发器中提到过。</p><p>在关卡蓝图中添加以下组件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202205251439353.png" alt="image-20220525143932920"></p>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
      <tag>2022实习</tag>
      
      <tag>蓝图</tag>
      
      <tag>BluePrint</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows</title>
    <link href="/2022/04/25/windows/"/>
    <url>/2022/04/25/windows/</url>
    
    <content type="html"><![CDATA[<p>windows bugs</p><span id="more"></span><h3 id="Windows资源管理器莫名其妙崩溃"><a href="#Windows资源管理器莫名其妙崩溃" class="headerlink" title="Windows资源管理器莫名其妙崩溃"></a>Windows资源管理器莫名其妙崩溃</h3><hr><p><strong>（1)问题描述</strong>：</p><p>windows资源管理器经常崩溃</p><p><strong>（2）解决方法</strong></p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220425215816.png"  style="zoom:67%;" /><p>红色方框内的东西不要选取。</p>]]></content>
    
    
    
    <tags>
      
      <tag>windows 系统报错</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis编写基础步骤</title>
    <link href="/2022/04/24/mybatis%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E6%AD%A5%E9%AA%A4/"/>
    <url>/2022/04/24/mybatis%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<p>mybatis</p><span id="more"></span><h3 id="mybatis编写步骤"><a href="#mybatis编写步骤" class="headerlink" title="mybatis编写步骤"></a>mybatis编写步骤</h3><hr><p><strong>（1）编写util工具类</strong>：如下图所示</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424103644.png" alt="image-20220424103644558"></p><p><code>MybatisUtils.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> util;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br>    <span class="hljs-keyword">static</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<span class="hljs-comment">//第二部需要写的配置文件</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">//关键步骤1</span><br>            inputStream = Resources.getResourceAsStream(resource);<span class="hljs-comment">//关键步骤2</span><br>           sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<span class="hljs-comment">//关键步骤3，此三步都是固定步骤</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>       &#125;<br><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getsqlSession</span><span class="hljs-params">()</span>&#123;<br><br>           <span class="hljs-keyword">return</span>  sqlSessionFactory.openSession();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>（2）写配置文件</strong></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424104222.png" alt="image-20220424104222146"></p><p><code>mybatis-config.xml</code>:我使用的市 mysql 8 所以配置文件可能会不一样。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;YJLs13981383032&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;dao/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>（3）写实体类</strong></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424104503.png" alt="image-20220424104503644"></p><p><code>User.java</code> : 使用 <code>alt</code> + <code>Insert</code> 再点击 <code>construct</code>可以快速构造实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPwd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPwd</span><span class="hljs-params">(String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（4）接口</strong></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424114036.png" alt="image-20220424114036269"></p><p><code>UserDao</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<br><br><span class="hljs-keyword">import</span> pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><span class="hljs-comment">//    获取全部用户</span><br>    List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//根据id查询</span><br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//insert user</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br>    <span class="hljs-comment">//第二种add方式</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addUser2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span>;<br>    <span class="hljs-comment">//修改用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br>    <span class="hljs-comment">//删除一个用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>    <span class="hljs-comment">//查询</span><br>    User <span class="hljs-title function_">getUserById2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span>;<br><br>    <span class="hljs-comment">//模糊查询</span><br>    List&lt;User&gt; <span class="hljs-title function_">getUserLike</span><span class="hljs-params">(String value)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>(5)xml</strong></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424114223.png" alt="image-20220424114223434"></p><p><code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--绑定一个对应的dao/mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;dao.UserDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.schema<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.schema where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>        insert into mybatis.schema(id, name, pwd) value (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>        update mybatis.schema set name =#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from mybatis.schema where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>        insert into mybatis.schema(id, name, pwd) value (#&#123;userid&#125;,#&#123;username&#125;,#&#123;userpwd&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.schema where id = #&#123;id&#125; and  name = #&#123;name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike&quot;</span>  <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.schema where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>（6）test</strong></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424114356.png" alt="image-20220424114356023"></p><p><code>test.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<br><br><br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> pojo.User;<br><span class="hljs-keyword">import</span> util.MybatisUtils;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getsqlSession();<br><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br>        List&lt;User&gt; userList = mapper.getUserList();<br>        <span class="hljs-keyword">for</span> (User user : userList)&#123;<br>            System.out.println(user);<br>        &#125;<br>        sqlSession.close();<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getsqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">userById</span> <span class="hljs-operator">=</span> mapper.getUserById(<span class="hljs-number">1</span>);<br><br>        System.out.println(userById);<br><br>        sqlSession.close();<br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getsqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.addUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-string">&quot;YJLs13981383032&quot;</span>));<br><br>        System.out.println(i);<br>        sqlSession.commit();<br>        sqlSession.close();<br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getsqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        mapper.updateUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-string">&quot;YJLs13981383032&quot;</span>));<br><br><br>        sqlSession.commit();<br>        sqlSession.close();<br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getsqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        mapper.deleteUser(<span class="hljs-number">1</span>);<br><br><br>        sqlSession.commit();<br>        sqlSession.close();<br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUsermap</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getsqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br>        Map&lt;String, Object&gt; objectObjectHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        objectObjectHashMap.put(<span class="hljs-string">&quot;userid&quot;</span>,<span class="hljs-number">1</span>);<br>        objectObjectHashMap.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>);<br>        objectObjectHashMap.put(<span class="hljs-string">&quot;userpwd&quot;</span>,<span class="hljs-string">&quot;YJLs13981383032&quot;</span>);<br><br>        mapper.addUser2(objectObjectHashMap);<br><br>        sqlSession.commit();<br>        sqlSession.close();<br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserById2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getsqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br>        Map&lt;String, Object&gt; objectObjectHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        objectObjectHashMap.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>);<br>        objectObjectHashMap.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>);<br><br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">userById2</span> <span class="hljs-operator">=</span> mapper.getUserById2(objectObjectHashMap);<br>        System.out.println(userById2);<br><br>        sqlSession.close();<br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserLike</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getsqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        List&lt;User&gt; userList = mapper.getUserLike(<span class="hljs-string">&quot;小&quot;</span>);<br>        <span class="hljs-keyword">for</span> ( User user:<br>             userList) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>        sqlSession.close();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>(7) 配置pom</strong></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220427092534.png" alt="image-20220427092534456"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-comment">&lt;!--父工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mybatis-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mybatis-02<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-comment">&lt;!--导入依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>dao.test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="CRUD编写步骤"><a href="#CRUD编写步骤" class="headerlink" title="CRUD编写步骤"></a>CRUD编写步骤</h3><hr>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unity</title>
    <link href="/2022/02/25/unity/"/>
    <url>/2022/02/25/unity/</url>
    
    <content type="html"><![CDATA[<center>Unity增量时间Time.deltaTime</center><!---more---><h2 id="1-deltaTime-——增量时间"><a href="#1-deltaTime-——增量时间" class="headerlink" title="1.deltaTime ——增量时间"></a>1.deltaTime ——增量时间</h2><p><strong>增量时间 &#x3D; 1 &#x2F; 帧数；</strong></p><p>让一个物体每秒移动10米的核心代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span>&#123;<br>    transform.Translate(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,Time.deltaTime * <span class="hljs-number">10</span>);<span class="hljs-comment">//物体沿着自生z轴方向，每秒移动物体10米运动</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="乘以时间增量-deltaTime-的原因"><a href="#乘以时间增量-deltaTime-的原因" class="headerlink" title="乘以时间增量 deltaTime 的原因"></a>乘以时间增量 deltaTime 的原因</h3><p>假设没有<code>deltaTime</code>即</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span>&#123;<br>    transform.Translate(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p> <code>update</code>是每一帧执行一次，如果1秒内60帧那么update就执行60次，那么每秒就移动60米，问题是不同的设备每秒的帧数可能不一样，那么每秒移动的距离就不一样。</p><hr><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>增加<code>deltaTime</code>即让移动距离 <strong>10</strong> 乘 当前帧数分之一</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span>&#123;<br>    transform.Translate(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,Time.deltaTime * <span class="hljs-number">10</span>);<span class="hljs-comment">//物体沿着自生z轴方向，每秒移动物体10米运动</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>update</code>每一帧执行一次，如果1秒内60帧那么update就执行60次，移动距离为10 * 帧数分之一即1&#x2F;60,那么每秒就移动10米。如此，即使帧数不同也能保证移动的距离相同。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>问题的关键在于 Update 每一帧执行一次，而帧数的不同则会带来一些问题，如移动的距离不同。</p><h2 id="2-关于官网教程实验2中发射的食物飞出设定范围后被销毁后无法再次发射食物"><a href="#2-关于官网教程实验2中发射的食物飞出设定范围后被销毁后无法再次发射食物" class="headerlink" title="2.关于官网教程实验2中发射的食物飞出设定范围后被销毁后无法再次发射食物"></a>2.关于官网教程实验2中发射的食物飞出设定范围后被销毁后无法再次发射食物</h2><p><strong>（1）发射食物</strong></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424224331.png" alt="image-20220424224331444"></p><p><strong>（2）按空格可以连续发射</strong></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424224414.png" alt="image-20220424224414525"></p><p><strong>（3）在第一个食物被销毁之后，按空格无法发出食物</strong></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424224814.png" alt="image-20220424224814881"></p><p><code>问题代码</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Destroy</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// Start is called before the first frame update</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-comment">// Update is called once per frame</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(transform.position.z &gt; <span class="hljs-number">30</span>)<br>        &#123;<br>            Destroy(gameObject);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424225228.png" alt="image-20220424225227991"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424225357.png"></p><p>在第一颗弹丸被销毁前</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424225616.png" alt="image-20220424225616186"></p><p>在第一颗弹丸被销毁后，可以看到，第一颗被销毁的弹丸也就是<code>Food_Pizza_01</code>被销毁后，</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424225722.png" alt="image-20220424225721936"></p><h3 id="出错原因"><a href="#出错原因" class="headerlink" title="出错原因"></a>出错原因</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220424230552.png" alt="image-20220424230552381"></p><p>上下两个组件是有明显差别的</p><p>所以该怎么托一目了然</p><p>只能把下面的预制对象拖到prefab栏中才不会出现上述问题</p>]]></content>
    
    
    
    <tags>
      
      <tag>unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每次hexo d之后都会清除CHAME文件导致自定义域名不可用</title>
    <link href="/2022/01/13/%E6%AF%8F%E6%AC%A1hexo-d%E4%B9%8B%E5%90%8E%E9%83%BD%E4%BC%9A%E6%B8%85%E9%99%A4CHAME%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%8F%AF%E7%94%A8/"/>
    <url>/2022/01/13/%E6%AF%8F%E6%AC%A1hexo-d%E4%B9%8B%E5%90%8E%E9%83%BD%E4%BC%9A%E6%B8%85%E9%99%A4CHAME%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%8F%AF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><hr><p>将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220113223557.png" alt="image-20220113223557643"></p><p>然后记得在项目设置的page页面设置域名</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20220113231809.png" alt="image-20220113231809000"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客部署出错</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>erro</title>
    <link href="/2021/12/27/erro/"/>
    <url>/2021/12/27/erro/</url>
    
    <content type="html"><![CDATA[<center>博客报错`Please make sure you have the correct access rights`</center><span id="more"></span><h3 id="太久没使用自建博客，当执行-deploy-命令时报错"><a href="#太久没使用自建博客，当执行-deploy-命令时报错" class="headerlink" title="太久没使用自建博客，当执行  deploy 命令时报错"></a>太久没使用自建博客，当执行  deploy 命令时报错</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20211227230750.png" alt="image-20211227230750912"></p><p>解决方法：</p><p>重置 ssh</p><ol><li>重置用户名和邮箱 git config –global <a href="http://user.name/">user.name</a> “yourname” git config –global user.email“<a href="mailto:&#x79;&#111;&#117;&#114;&#x40;&#101;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;">&#x79;&#111;&#117;&#114;&#x40;&#101;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a>“ 注：yourname是你要设置的名字，your@email是你要设置的邮箱。</li></ol><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20211227231758.png" alt="image-20211227231758794"></p><ol start="2"><li><p>删除.ssh文件夹下的known_hosts </p></li><li><p>git输入命令 $ ssh-keygen -t rsa -C <a href="https://blog.csdn.net/mailto:%22your@email.com">“your@email.com</a>“（请填你设置的邮箱地址） 一路yes和回车 然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打开id_rsa.pub 将全部的内容复制 </p></li><li><p>打开<a href="https://github.com/%EF%BC%8C%E7%99%BB%E9%99%86%E4%BD%A0%E7%9A%84%E8%B4%A6%E6%88%B7%EF%BC%8C%E8%BF%9B%E5%85%A5%E8%AE%BE%E7%BD%AE">https://github.com/，登陆你的账户，进入设置</a> 进入ssh设置 在key中将刚刚复制的粘贴进去 点击add ssh key，</p></li></ol><p><strong><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20211227231144.png" alt="image-20211227231144455"></strong></p><p> ok！</p><ol start="5"><li>在git中输入命令： ssh -T <a href="https://blog.csdn.net/mailto:git@github.com">git@github.com</a> 然后。。</li></ol><p> 输入命令：yes 回车</p><hr><ol start="6"><li><p>完成上面步骤还需要将网站设置为https</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20211231015853.png" alt="image-20211231015853253"></p></li></ol><p>最后可以用https的访问方式访问</p><p><a href="https://cloud.tencent.com/developer/article/1572090">参考链接1</a><br><a href="https://blog.csdn.net/qq_43705131/article/details/107965888">参考链接2</a><br><a href="https://blog.csdn.net/qq_43705131/article/details/107965888">参考链接3</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>博客部署出错</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>time</title>
    <link href="/2021/12/27/time%E7%AE%A1%E7%90%86/"/>
    <url>/2021/12/27/time%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<center>任务池</center><span id="more"></span><h3 id="任务池是什么"><a href="#任务池是什么" class="headerlink" title="任务池是什么"></a>任务池是什么</h3><p>任务池是从 CodeSheep 学到概念，将需要完成的任务分为大概 7 种类型</p><ol><li><p>任务计划池：放了未来想做的任何可能的事情，不计大小，不论优先级，也不管任务粒度的划分是否合理，任何凌空闪现的idea都及时地丢进去。这么做的原因：无法在列计划的时候，就立即确定当下这条计划是合理的，更偏向于收藏夹和备忘录。</p></li><li><p>任务就绪池：从计划池李筛选出来等待执行的<strong>确定性</strong>任务，选择时需要反复问自己这个任务真的重要吗？这个任务紧急吗？这个任务需要切分吗？这个任务需要在这周做吗？这个任务能做出结果吗？······总之需要深入思考做这个任务的原因。参考图1</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20211227222051.png" alt="image-20211227222051217"></p><center>图1<p> 紧急且重要需要优先搞定，重要但不紧急的事就特别适合做计划（拆分任务，按章执行），紧急但不重要（回复信息，例行要做）</p></li><li><p>任务执行池，只排一天之内的执行任务，3~5个就足够了</p></li><li><p>任务验收池：复盘、总结、对比、输出、记录（作为缓冲的池子）<br>例如：这个代码完成了后，功能也实现了，但后续的一些总结工作还没有完成，遇到了bug记录和踩到的坑，下一个迭代还有哪些任务需要优化呢 。目的：为了让自己对于已经完成的任务能够增加一个简单的复盘和回味的环节。<br>方法：每天晚上把任务验收池的任务过一遍，该写博客的写博客，该写备注的写备注，该做笔记的做笔记，可以有堆积，尽量做到一周内清空一次。</p></li><li><p>任务完成池：每天最爽的事就是把完成的任务卡片依次托到这个池中来，最直接的正向激励</p></li><li><p>任务阻塞池：持续时间比较长的学习任务，比如系统的学习某一个大的知识点或花一个月搞定某个开源项目等</p></li><li><p>任务酱油池：很零碎的任务点，主要用来打法打酱油的时间。比如需要取一个快递，或接收一封邮件，但不是特别紧急，就可以将这个任务放在酱油池中</p></li></ol><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20211227233158.png" alt="image-20211227233158440"></p>]]></content>
    
    
    
    <tags>
      
      <tag>任务池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mirai</title>
    <link href="/2020/12/15/mirai/"/>
    <url>/2020/12/15/mirai/</url>
    
    <content type="html"><![CDATA[<center>mirai是使用过程中遇到的一些问题</center><!---more---><h3 id="出现“无法登录，请更新qq版本”的问题"><a href="#出现“无法登录，请更新qq版本”的问题" class="headerlink" title="出现“无法登录，请更新qq版本”的问题"></a>出现“无法登录，请更新qq版本”的问题</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">dependencies &#123;<br>    implementation <span class="hljs-string">&#x27;net.mamoe:mirai-core-qqandroid:1.3.0&#x27;</span><span class="hljs-comment">//此处版本应替换为当前最新</span><br>    implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;</span><br>    testCompile group: <span class="hljs-string">&#x27;junit&#x27;</span>, name: <span class="hljs-string">&#x27;junit&#x27;</span>, version: <span class="hljs-string">&#x27;4.12&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过更换版本解决</p><h3 id="出现异常"><a href="#出现异常" class="headerlink" title="出现异常"></a>出现异常</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">An exception was thrown under <span class="hljs-selector-tag">a</span> coroutine of Bot<br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassCastException</span>: net<span class="hljs-selector-class">.mamoe</span><span class="hljs-selector-class">.mirai</span><span class="hljs-selector-class">.qqandroid</span><span class="hljs-selector-class">.contact</span><span class="hljs-selector-class">.FriendImpl</span> cannot be cast to net<span class="hljs-selector-class">.mamoe</span><span class="hljs-selector-class">.mirai</span><span class="hljs-selector-class">.contact</span>.Member<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mirai</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>技术文档写作规范（Markdown）</title>
    <link href="/2020/07/11/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83%EF%BC%88Markdown%EF%BC%89/"/>
    <url>/2020/07/11/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83%EF%BC%88Markdown%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<center><font>学习文档规范中的笔记</font><center><span id="more"></span><p><a href="https://www.jianshu.com/p/3b638180e42c">参考</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于 Tomcat 的问题</title>
    <link href="/2020/07/11/Intellij-idea-%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE%E5%90%8E%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AETomcat%E4%B8%BB%E9%A1%B5/"/>
    <url>/2020/07/11/Intellij-idea-%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE%E5%90%8E%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AETomcat%E4%B8%BB%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<center>Intellij idea 成功运行项目后无法访问 Tomcat 主页</center><span id="more"></span><h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>运行项目启动 Tomcat 后，发现无法访问 Tomcat 首页，输入<code>http://localhost:8080</code>时无法访问 Tomcat 首页，但可以正确访问项目的其他页面。</p><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>​出现该问题的原因是：项目的工件输出目录在我们指定的目录下，而不是在 Tomcat 的 webapps 目录下。</p><p>​IDEA 在 ”项目目录\out\artifacts” 下虚拟了一个 Tomcat，而在该目录下没有 Tomcat 首页的工程，所以此时并没有把 Tomcat 首页的应用部署到服务器，所以就访问不到 Tomcat 首页。</p><p>​当我们访问项目里的其他页面时，因为在 ”项目目录\out\artifacts” 目录下已经有相应的工程，所以可以访问其他页面</p><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>​解决办法是将 Tomcat 的首页工程部署到 Tomcat 服务器上，部署步骤如下：选择菜单栏 ” Run–&gt;Edit Configuration…–&gt;Deployment “ ，选择右上角 “ + ” ,选择 ” External Sourse… “，将 Tomcat 的 webapps 目录下的 ROOT 文件夹选中，点击ok，完成 Tomcat 首页的部署。部署时选择 Application Context 可不填写。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20200711221352.png" alt="image-20200711221352668"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20200711221724.png" alt="image-20200711221724581"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20200711221743.png" alt="image-20200711221743891"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20200711221832.png" alt="image-20200711221832595"></p><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p>​再次运行，成功访问 <code>http://localhost:8080/</code></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20200711222114.png" alt="image-20200711222114535"></p>]]></content>
    
    
    
    <tags>
      
      <tag>问题</tag>
      
      <tag>Tomcat</tag>
      
      <tag>服务器</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql</title>
    <link href="/2020/05/29/Mysql-1/"/>
    <url>/2020/05/29/Mysql-1/</url>
    
    <content type="html"><![CDATA[<center>一些数据库学习中的笔记</center><span id="more"></span><h1 id="Mysql基础"><a href="#Mysql基础" class="headerlink" title="Mysql基础"></a>Mysql基础</h1><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><blockquote><p>数值</p></blockquote><ul><li>tinyint  十分小的数据  1个字节</li><li>smallint   较小的数据  2个字节</li><li>mediumint  中等大小的数据  3个字节</li><li>int  标准的准数  4个字节</li><li>bigint  较大的数据  8个字节</li><li>float  浮点数  4个字节</li><li>double  浮点数  8个字节</li><li>decimal  字符串形式的浮点数  进行金融计算</li></ul><blockquote><p>字符串</p></blockquote><ul><li>char  字符串固定大小  0~255</li><li><strong>varchar  可变字符串  0~65535</strong></li><li>tinytext  微型文本  2<sup>8</sup>~1</li><li>text  文本串  2<sup>16</sup>~1</li></ul><blockquote><p>时间和日期</p></blockquote><p>java.util.Date</p><ul><li>date  yyyy-MM-dd  日期</li><li>time  HH：mm：ss  时间格式</li><li>datetime  yyyy-MM-dd  HH：mm：ss  最常用的时间格式</li><li>timestamp  时间戳（例：1970.1.1到现在的毫秒数）</li><li>year  年份表示</li></ul><blockquote><p>null</p></blockquote><ul><li>没有值，未知</li><li>注意：不要使用NUll将进行运算，结果为Null</li></ul><h3 id="数据库的字段类型（重点）"><a href="#数据库的字段类型（重点）" class="headerlink" title="数据库的字段类型（重点）"></a>数据库的字段类型（重点）</h3><p>Unsigned: </p><ul><li>无符号的整数</li><li>声明了该列不能声明为负数</li></ul><p>zerpfill:</p><ul><li>0填充</li><li>不足的位数，使用0填充</li></ul><p>自增：</p><ul><li>通常理解为自增，自动在上一条记录的基础上+1（默认）</li><li>通常用来设置唯一的主键，必须是整数类型</li><li>可以自定义设计主键自增的起始值和步长</li></ul><p>非空  Null &#x2F;not Null </p><ul><li>如果不赋值，则会报错</li><li>Null，如果不填写值，默认就是null！</li></ul><p>默认</p><ul><li>设置默认值！</li></ul><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><ul><li>插入：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名 (字段<span class="hljs-number">1</span>，字段<span class="hljs-number">2</span>,...) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;值1&#x27;</span>,<span class="hljs-string">&#x27;值2&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>修改</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span>  表名 <span class="hljs-keyword">set</span> 属性名 <span class="hljs-operator">=</span> 值 <span class="hljs-keyword">where</span> 判断条件<br></code></pre></td></tr></table></figure><p>不指定条件情况下，会改动所有表</p><table><thead><tr><th>操作符</th><th>含义</th><th>范围</th><th>结果</th></tr></thead><tbody><tr><td>&#x3D;</td><td>等于</td><td>5&#x3D;6</td><td>false</td></tr><tr><td>&lt;&gt;或!&#x3D;</td><td>不等于</td><td>5!&#x3D;6</td><td>true</td></tr><tr><td>&lt;</td><td></td><td></td><td></td></tr><tr><td>&gt;</td><td></td><td></td><td></td></tr><tr><td>&lt;&#x3D;</td><td></td><td></td><td></td></tr><tr><td>&gt;&#x3D;</td><td></td><td></td><td></td></tr><tr><td>between  …and…</td><td>在某个范围内</td><td>[2,5]</td><td></td></tr><tr><td>and</td><td>&amp;&amp;</td><td>5&gt;1and1&gt;2</td><td>false</td></tr><tr><td>or</td><td>||</td><td>5&gt;1or1&gt;2</td><td>true</td></tr></tbody></table><ul><li>删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 属性名 <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>清空表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">truncate</span> 表名<br></code></pre></td></tr></table></figure><h3 id="DQL查询语句"><a href="#DQL查询语句" class="headerlink" title="DQL查询语句"></a>DQL查询语句</h3><blockquote><p>select完整语法</p></blockquote><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20200530145834.png"></p><ul><li>查询语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段<span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> 给查询结果起的别名 <span class="hljs-keyword">from</span> 表名,字段<span class="hljs-number">2</span> <span class="hljs-keyword">AS</span> 名 <span class="hljs-keyword">from</span> 表名 ... <br></code></pre></td></tr></table></figure><ul><li>concat函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> concat(&quot;姓名：&quot;,StudentName) <span class="hljs-keyword">as</span> 新名字 <span class="hljs-keyword">FROM</span> student<br></code></pre></td></tr></table></figure><ul><li>distinct去重</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 属性名 <span class="hljs-keyword">From</span> 表名<br></code></pre></td></tr></table></figure><p>查询将所有学院成绩+1查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 属性名 <span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">as</span> 命名查询结果 <span class="hljs-keyword">from</span> 表名<br></code></pre></td></tr></table></figure><h3 id="where条件子句"><a href="#where条件子句" class="headerlink" title="where条件子句"></a>where条件子句</h3><p>作用：检索数据中符合条件的值</p><p>搜索条件由一个或者多个表达式组成，结果为布尔值</p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20200530151559.png" alt="image-20200530150045911"></p><h3 id="联表查询"><a href="#联表查询" class="headerlink" title="联表查询"></a>联表查询</h3><ul><li>inner join</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> s.studentNo,studentName,SubjectNo,StudentResult<br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">as</span> s<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">as</span> r<br><span class="hljs-keyword">where</span> s.studentNo <span class="hljs-operator">=</span> r.studentNo<br></code></pre></td></tr></table></figure><ul><li>right join</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> s.studentNo,studentName,SubjectNo,StudentResult<br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">as</span> s<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">as</span> r<br><span class="hljs-keyword">where</span> s.studentNo <span class="hljs-operator">=</span> r.studentNo<br></code></pre></td></tr></table></figure><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>inner join</td><td>如果表中至少有一个匹配，就返回行</td></tr><tr><td>left join</td><td>会从左表中返回所有值即使右表没有匹配</td></tr><tr><td>right join</td><td>会从右表中返回所有的值，即使左表中没有匹配</td></tr></tbody></table><h3 id="分页和排序"><a href="#分页和排序" class="headerlink" title="分页和排序"></a>分页和排序</h3><ul><li>排序方式：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 表名 排序方式<br></code></pre></td></tr></table></figure><ol><li>升序：asc</li><li>降序：desc</li></ol><ul><li>分页：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">limit 当前页,页面的大小<br></code></pre></td></tr></table></figure><h3 id="事务的ACID原则"><a href="#事务的ACID原则" class="headerlink" title="事务的ACID原则"></a>事务的ACID原则</h3><p>原子性、一致性、独立性、持续性</p><h3 id="JDBC程序"><a href="#JDBC程序" class="headerlink" title="JDBC程序"></a>JDBC程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.lesson01;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcFirstDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;<br>            <span class="hljs-comment">//1.加载驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><br><br>            <span class="hljs-comment">//2.用户信息和url</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;YJLs13981383032&quot;</span>;<br><br><br>            <span class="hljs-comment">//3.连接成功，数据库对象 Connection代表数据库</span><br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,username,password);<br><br><br>            <span class="hljs-comment">//4.执行sql的对象 Statement 执行sql 的对象</span><br>            <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>            <span class="hljs-comment">//statement.executeQuery();//查询操作 返回resultSet结果集</span><br>            <span class="hljs-comment">//statement.execute();//执行任何SQL</span><br>            <span class="hljs-comment">//statement.executeUpdate();//更新、插入、删除，受影响的行数</span><br><br>            <span class="hljs-comment">//5.执行sql的对象去执行SQL,可能存在结果，查看返回结果</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM student&quot;</span>;<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<span class="hljs-comment">//返回结果集,结果集中分装了全部查询的结果</span><br>            <span class="hljs-keyword">while</span>(resultSet.next())&#123;<br>                System.out.println(<span class="hljs-string">&quot;id:&quot;</span> + resultSet.getObject(<span class="hljs-string">&quot;Sname&quot;</span>));<br>            &#125;<br><br><br>            <span class="hljs-comment">//6。释放连接</span><br>            resultSet.close();<br>            statement.close();<br>            connection.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="statement对象"><a href="#statement对象" class="headerlink" title="statement对象"></a>statement对象</h3><blockquote><p>CRUD操作-create</p></blockquote><p>使用executeUpdate(String sql)方法完成数据添加操作，示例操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into user(...) values(...)&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> st.executeUpdate(sql);<br><span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;插入成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>CRUD操作-delete</p></blockquote><p>使用executeUpdate(String sql)方法完成数据删除操作，示例操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from user where id=1&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> st.executeUpdate(sql);<br><span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>CRUD操作-create</p></blockquote><p>使用executeUpdate(String sql)方法完成数据修改操作，示例操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update user set name=&#x27;&#x27;where name = &#x27;&#x27;&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> st.executeUpdate(sql);<br><span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>CRUD操作-read</p></blockquote><p>使用executeUpdate(String sql)方法完成数据查询操作，示例操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from user where id=1&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> st.executeQuery(sql);<br><span class="hljs-keyword">while</span>(rs.next())&#123;<br>    <span class="hljs-comment">//根据获取列的数据类型，分别调用rs的相应方法映射到java对象中</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>本质时非法将sql进行拼接</p><p>防止sql注入的方法：</p><h4 id="Java方面："><a href="#Java方面：" class="headerlink" title="Java方面："></a>Java方面：</h4><ol><li><p>使用正则表达式过滤掉非法字符：</p><p>将包含有 单引号(‘)，分号(;) 和 注释符号(–)的语句给替换掉来防止SQL注入</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">TransactSQLInjection</span><span class="hljs-params">(String str)</span><br> <br>&#123;<br> <br>      <span class="hljs-keyword">return</span> str.replaceAll(<span class="hljs-string">&quot;.*([&#x27;;]+|(--)+).*&quot;</span>, <span class="hljs-string">&quot; &quot;</span>);<br> <br>&#125;<br> <br> <br> <br>userName=TransactSQLInjection(userName);<br> <br>password=TransactSQLInjection(password);<br> <br> <br> <br>String sql=<span class="hljs-string">&quot;select * from users where username=&#x27;&quot;</span>+userName+<span class="hljs-string">&quot;&#x27; and password=&#x27;&quot;</span>+password+<span class="hljs-string">&quot;&#x27; &quot;</span><br> <br><span class="hljs-type">Statement</span> <span class="hljs-variable">sta</span> <span class="hljs-operator">=</span> conn.createStatement();<br> <br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> sta.executeQuery(sql);<br></code></pre></td></tr></table></figure><ol start="2"><li>采用预编译语句集</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>String sql= <span class="hljs-string">&quot;select * from users where username=? and password=?&quot;</span>;<br> <br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preState</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br> <br>preState.setString(<span class="hljs-number">1</span>, userName);<br> <br>preState.setString(<span class="hljs-number">2</span>, password);<br> <br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> preState.executeQuery();...<br><br></code></pre></td></tr></table></figure><p>3.使用一些特定框架</p><h1 id="知识树"><a href="#知识树" class="headerlink" title="知识树"></a>知识树</h1><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206101021399.png"/>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaGUI</title>
    <link href="/2020/05/19/JavaGUI/"/>
    <url>/2020/05/19/JavaGUI/</url>
    
    <content type="html"><![CDATA[<center>学习GUI编程的笔记</center><span id="more"></span><h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><p>GUI核心技术：Swing AWT</p><p>JavaGUI不流行的原因</p><ol><li>因为界面不美观</li><li>因为需要jre环境！</li></ol><p>学习GUI的原因</p><ol><li>可以写出一些小工具</li><li>工作的时候，可能需要维护swing界面，虽然概率极小！</li><li>了解MVC架构，了解监听</li></ol><h2 id="AWT（abstract-window-tool）"><a href="#AWT（abstract-window-tool）" class="headerlink" title="AWT（abstract window tool）"></a>AWT（abstract window tool）</h2><h3 id="组件和容器"><a href="#组件和容器" class="headerlink" title="组件和容器"></a>组件和容器</h3><h3 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-comment">//GUI的第一个界面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFrame</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>   <span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;我的java第一个图像界面窗口&quot;</span>);<br>    <span class="hljs-comment">//需要设置可见性</span><br>   frame.setVisible(<span class="hljs-literal">true</span>);<br>   <span class="hljs-comment">//设置窗口大小</span><br>        frame.setSize(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);<br>        <span class="hljs-comment">//设置背景颜色 color</span><br>        frame.setBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">85</span>,<span class="hljs-number">150</span>,<span class="hljs-number">68</span>));<br>        <span class="hljs-comment">//弹出的初始位置</span><br>        frame.setLocation(<span class="hljs-number">200</span>,<span class="hljs-number">200</span>);<br>        <span class="hljs-comment">//设置大小固定</span><br>        frame.setResizable(<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200519112934035.png" alt="image-20200519112934035"></p><h3 id="Panel面板"><a href="#Panel面板" class="headerlink" title="Panel面板"></a>Panel面板</h3><p>将一个窗口封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFrame2</span>  &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//展示多个窗口</span><br>        <span class="hljs-type">MyFrame</span> <span class="hljs-variable">myframe1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFrame</span>(<span class="hljs-number">100</span> , <span class="hljs-number">100</span>, <span class="hljs-number">200</span>,<span class="hljs-number">200</span>,Color.blue);<br>        <span class="hljs-type">MyFrame</span> <span class="hljs-variable">myframe2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFrame</span>(<span class="hljs-number">300</span> , <span class="hljs-number">100</span>, <span class="hljs-number">200</span>,<span class="hljs-number">200</span>,Color .yellow);<br>        <span class="hljs-type">MyFrame</span> <span class="hljs-variable">myframe3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFrame</span>(<span class="hljs-number">100</span> , <span class="hljs-number">300</span>, <span class="hljs-number">200</span>,<span class="hljs-number">200</span>,Color.gray);<br>        <span class="hljs-type">MyFrame</span> <span class="hljs-variable">myframe4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFrame</span>(<span class="hljs-number">300</span> , <span class="hljs-number">300</span>, <span class="hljs-number">200</span>,<span class="hljs-number">200</span>,Color.red);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Frame</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//可能存在的窗口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyFrame</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> w,<span class="hljs-type">int</span> h ,Color color)</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;Myframe&quot;</span>+(++id)) ;<br>        setBackground(color);<br>        setBounds(x,y,w,h) ;<br>        setVisible(<span class="hljs-literal">true</span>); ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200519114120222.png" alt="image-20200519114120222"></p><p>面板关闭事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.WindowAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.WindowEvent;<br><span class="hljs-keyword">import</span> java.awt.event.WindowListener;<br><br><span class="hljs-comment">//Panel可以看成是一个空间</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPanel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>() ;<br>        <span class="hljs-comment">//布局的概念</span><br>        <span class="hljs-type">Panel</span> <span class="hljs-variable">panel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>() ;<br>        <span class="hljs-comment">//设置布局</span><br>        frame.setLayout(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//坐标</span><br>        frame.setBounds(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>,<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>        frame.setBackground((<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">20</span>)));<br>        <span class="hljs-comment">//panel设置坐标，相对于frame</span><br>        panel.setBounds(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">400</span>,<span class="hljs-number">400</span>) ;<br>        panel.setBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">30</span>,<span class="hljs-number">30</span>,<span class="hljs-number">49</span>));<br>        <span class="hljs-comment">//frame.add()</span><br>        frame.add(panel) ;<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//监听事件,监听窗口关闭事件 System.exit(0) ;</span><br>        <span class="hljs-comment">//适配器模式：</span><br>        frame.addWindowListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>() &#123;<br>            <span class="hljs-comment">//窗口点击关闭的时候要做的事情</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent windowEvent)</span> &#123;<br>                <span class="hljs-comment">//结束程序</span><br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h3><ul><li>流式布局</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFlowLayout</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>() ;<br>        <span class="hljs-comment">//组件-按钮</span><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button1</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button1&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button2&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button3&quot;</span>) ;<br>        <span class="hljs-comment">//设置为流式布局</span><br>        <span class="hljs-comment">//frame.setLayout(new FlowLayout());</span><br>        frame.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FlowLayout</span>(FlowLayout.LEFT));<br>        <br>        frame.setSize(<span class="hljs-number">200</span>,<span class="hljs-number">200</span>);<br>        <span class="hljs-comment">//把按钮加上去</span><br>        frame.add(button1) ;<br>        frame.add(button2) ;<br>        frame.add(button3) ;<br>        frame.setVisible(<span class="hljs-literal">true</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200519121533402.png" alt="image-20200519121533402" style="zoom:50%;" /><ul><li>东西南北中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBorderLayout</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;TestBorderLayout&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">east</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;East&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">west</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;west&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">south</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;south&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">north</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;North&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">center</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;center&quot;</span>) ;<br><br>        frame.add(east,BorderLayout.EAST) ;<br>        frame.add(west,BorderLayout.WEST) ;<br>        frame.add(south,BorderLayout.SOUTH) ;<br>        frame.add(north,BorderLayout.NORTH) ;<br>        frame.add(center,BorderLayout.CENTER) ;<br><br>        frame.setSize(<span class="hljs-number">200</span>,<span class="hljs-number">200</span>);<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200519122809055.png" alt="image-20200519122809055"></p><ul><li>表格布局</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestGridLayout</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;TestGridLayout&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">btn1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;btn1&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">btn2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;btn2&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">btn3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;btn3&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">btn4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;btn4&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">btn5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;btn5&quot;</span>) ;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">btn6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;btn6&quot;</span>) ;<br><br>        frame.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GridLayout</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>));<br><br><br>        frame.add(btn1) ;<br>        frame.add(btn2) ;<br>        frame.add(btn3) ;<br>        frame.add(btn4) ;<br>        frame.add(btn5) ;<br>        frame.add(btn6) ;<br>        frame.pack() ;<span class="hljs-comment">//Java函数</span><br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200519124225137.png" alt="image-20200519124225137"></p><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.WindowAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.WindowEvent;<br><span class="hljs-keyword">import</span> java.awt.event.WindowListener;<br><br><span class="hljs-comment">//联系Demo</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//总Frame</span><br>        <span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>() ;<br>        frame.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GridLayout</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>));<br>        frame.setVisible(<span class="hljs-literal">true</span>) ;<br>        frame.setSize(<span class="hljs-number">400</span>,<span class="hljs-number">300</span>);<br>        frame.setLocation(<span class="hljs-number">300</span>,<span class="hljs-number">400</span>);<br>        frame.setBackground(Color.blue);<br>        <span class="hljs-comment">//四个面板</span><br>        <span class="hljs-type">Panel</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BorderLayout</span>());<br>        <span class="hljs-type">Panel</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GridLayout</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)) ;<br>        <span class="hljs-type">Panel</span> <span class="hljs-variable">p3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BorderLayout</span>());<br>        <span class="hljs-type">Panel</span> <span class="hljs-variable">p4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GridLayout</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)) ;<br><br>        p1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;EAST-1&quot;</span>),BorderLayout.EAST) ;<br>        p1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;WEST-1&quot;</span>),BorderLayout.WEST) ;<br><br>        p2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;p2-btn1&quot;</span>)) ;<br>        p2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;p2-btn2&quot;</span>)) ;<br>        p1.add(p2,BorderLayout.CENTER) ;<br><br>        p3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;EAST-1&quot;</span>),BorderLayout.EAST) ;<br>        p3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;WEST-1&quot;</span>),BorderLayout.WEST) ;<br><br>        p4.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;p4-btn1&quot;</span>)) ;<br>        p4.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;p4-btn2&quot;</span>)) ;<br>        p4.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;p4-btn3&quot;</span>)) ;<br>        p4.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;p4-btn4&quot;</span>)) ;<span class="hljs-comment">//此处可以用for循环</span><br>        p3.add(p4,BorderLayout.CENTER) ;<br><br>        frame.add(p1) ;<br>        frame.add(p3) ;<br>        frame.addWindowListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent windowEvent)</span> &#123;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200519132459883.png" alt="image-20200519132459883"></p><h2 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h2>]]></content>
    
    
    
    <tags>
      
      <tag>GUI</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>latex学习</title>
    <link href="/2020/04/09/latex%E7%BC%96%E8%BE%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/04/09/latex%E7%BC%96%E8%BE%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<center>学习如何插入数学公式的笔记。开始学习前的准备：在主题配置文件中enable mathjax</center><span id="more"></span><h1 id="一、公式使用参考"><a href="#一、公式使用参考" class="headerlink" title="一、公式使用参考"></a>一、公式使用参考</h1><h2 id="1-如何插入公式"><a href="#1-如何插入公式" class="headerlink" title="1.如何插入公式"></a>1.如何插入公式</h2><p>$LaTeX$地数学公式有两种：行中公式和独立公式。行中公式放在文中与其他文字混编，独立公式单独成行。<br><strong>行中公式：</strong>  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$数学公式$<br></code></pre></td></tr></table></figure><p><strong>独立公式：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$ 数学公式 $$<br></code></pre></td></tr></table></figure><p><strong>编号地公式：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$ a := x^2-y^3 \tag&#123;<span class="hljs-emphasis">*&#125;\label&#123;*</span>&#125; $$<br></code></pre></td></tr></table></figure><p><strong>自动编号后地公式可在全文任意处使用<code>\eqref&#123;eq:公式名&#125;</code>语句引用</strong></p><ul><li>例子：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$ J<span class="hljs-emphasis">_\alpha(x) = \sum_</span>&#123;m=0&#125;^\infty \frac&#123;(-1)^m&#125;&#123;m! \Gamma (m + \alpha + 1)&#125; &#123;\left(&#123; \frac&#123;x&#125;&#123;2&#125; &#125;\right)&#125;^&#123;2m + \alpha&#125; \text &#123;，行内公式示例&#125; $<br></code></pre></td></tr></table></figure><ul><li><p>显示$ J_\alpha(x) &#x3D; \sum_{m&#x3D;0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，行内公式示例} $  </p></li><li><p>例子:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$ J<span class="hljs-emphasis">_alpha(x) = \sum_</span>&#123;m=0&#125;^\infty \frac&#123;(-1)^m&#125;&#123;m! \Gama&#123;m + \alpha + 1&#125;&#125;$$<br></code></pre></td></tr></table></figure></li><li><p>显示:<br>$$<br>J_alpha(x) &#x3D; \sum_{m&#x3D;0}^\infty \frac{(-1)^m}{m! \Gamma{m + \alpha + 1}}<br>$$</p></li><li><p>例子:  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$ a := x^2-y^3 \tag&#123;<span class="hljs-emphasis">*&#125;\label&#123;*</span>&#125; $$<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$引用：a+y^3 \stackrel&#123;\eqref&#123;1&#125;&#125;= x^2$$<br></code></pre></td></tr></table></figure></li><li><p>显示<br>$$<br>a &#x3D; x^2-y^3 \tag{*}\label{1}<br>$$</p></li></ul><p>$$<br>引用:a+y^3 \stackrel{\eqref{1}}&#x3D; x^2<br>$$</p><h2 id="2-输入上下标"><a href="#2-输入上下标" class="headerlink" title="2.输入上下标"></a>2.输入上下标</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\left(\frac&#123;\alpha^\infty&#125;&#123;\lambda^\infty&#125;\right)$<br></code></pre></td></tr></table></figure><p>$$<br>\left(\frac{\alpha^\infty}{\lambda^\infty}\right)<br>$$</p><h2 id="3-输入括号和分隔符"><a href="#3-输入括号和分隔符" class="headerlink" title="3.输入括号和分隔符"></a>3.输入括号和分隔符</h2><p>()、[]和|表示本身，使用<code>\&#123;\&#125;</code>表示{}，当要显示大括号或分隔符是，要用<code>\left</code>和<code>\right</code>命令</p><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center"><code>\lbrace</code></td><td align="center">{</td><td align="center"><code>\rbrace</code></td><td align="center">}</td></tr></tbody></table><h2 id="4-输入分数"><a href="#4-输入分数" class="headerlink" title="4.输入分数"></a>4.输入分数</h2><p>使用命令<code>\frac&#123;分子&#125;&#123;分母&#125;</code>或<code>分子 \over 分母</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$\frac&#123;1&#125;&#123;2&#125;\quad  or  \quad &#123;1\over 2&#125;$//注意：over用法中的大括号&#123;&#125;<br></code></pre></td></tr></table></figure><p>$\frac{1}{2}\quad  or  \quad {1\over 2}$</p><h2 id="5-输入开方"><a href="#5-输入开方" class="headerlink" title="5.输入开方"></a>5.输入开方</h2><p><code>\sqrt[根指数、默认为2]&#123;被开方数&#125;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$\sqrt[2]&#123;2&#125;$<br></code></pre></td></tr></table></figure><p>显示：$\sqrt[2]{2}$</p><h2 id="6-省略号"><a href="#6-省略号" class="headerlink" title="6.省略号"></a>6.省略号</h2><p>文本底线对齐的省略号<code>\ldots</code>，文本中线对齐的省略号<code>\cdots</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>X<span class="hljs-emphasis">_1+X_</span>2+\underbrace&#123;\cdots&#125;<span class="hljs-emphasis">_&#123;\rm cdots&#125;+X_</span>n<br>$$<br></code></pre></td></tr></table></figure><p>$$<br>X_1+X_2+\underbrace{\cdots}_{ \rm cdots}+X_n<br>$$</p><h2 id="7-矢量"><a href="#7-矢量" class="headerlink" title="7.矢量"></a>7.矢量</h2><p><code>\vec&#123;矢量&#125;c</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\vec&#123;a&#125; \cdot \vec&#123;b&#125;<br>$$<br></code></pre></td></tr></table></figure><p>$$<br>\vec{a} \cdot \vec{b}<br>$$</p><h2 id="8-积分"><a href="#8-积分" class="headerlink" title="8.积分"></a>8.积分</h2><p><code>\int_积分下限^积分上限&#123;被积表达式&#125;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\int<span class="hljs-emphasis">_&#123;-\infty&#125;^&#123;+\infty&#125;&#123;xdx&#125;</span><br><span class="hljs-emphasis">$$</span><br></code></pre></td></tr></table></figure><p>$$<br>\int_{-\infty}^{+\infty}{xdx}<br>$$</p><h2 id="9-极限"><a href="#9-极限" class="headerlink" title="9.极限"></a>9.极限</h2><p><code>\lim_&#123;变量\to表达式&#125;表达式</code>其中<code>\to</code>可以改为任意符号</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\lim<span class="hljs-emphasis">_&#123;n\to +\infty&#125;\frac&#123;1&#125;&#123;n&#125;</span><br><span class="hljs-emphasis">$$</span><br></code></pre></td></tr></table></figure><p>$$<br>\lim_{n\to +\infty}\frac{1}{n}<br>$$</p><h2 id="10-累加"><a href="#10-累加" class="headerlink" title="10.累加"></a>10.累加</h2><p><code>\sum_&#123;下标&#125;^&#123;上标&#125;&#123;累加表达式&#125;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\sum<span class="hljs-emphasis">_&#123;x=0&#125;^&#123;x=n&#125;&#123;x^2&#125;</span><br><span class="hljs-emphasis">$$</span><br></code></pre></td></tr></table></figure><p>$$<br>\sum_{x&#x3D;0}^{n}{x^2}<br>$$</p><h2 id="11-常用希腊字母"><a href="#11-常用希腊字母" class="headerlink" title="11.常用希腊字母"></a>11.常用希腊字母</h2><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th>输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center"><code>\alpha</code></td><td align="center">$\alpha$</td><td align="center"><code>A</code></td><td align="center">$A$</td><td><code>\beta</code></td><td align="center">$\beta$</td><td align="center"><code>B</code></td><td align="center">$B$</td></tr><tr><td align="center"><code>\lambda</code></td><td align="center">$\lambda$</td><td align="center"><code>\lambda</code></td><td align="center">$\Lambda$</td><td><code>\pi</code></td><td align="center">$\pi$</td><td align="center"><code>\Pi</code></td><td align="center">$\Pi$</td></tr></tbody></table><p>部分字母有变量专用形式，以<code>\var-</code>开头</p><table><thead><tr><th align="center">小写形式</th><th align="center">大写形式</th><th align="center">标量形式</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center"><code>\phi</code></td><td align="center"><code>\Phi</code></td><td align="center"><code>\varphi</code></td><td align="center">$\phi\mid\Phi\mid\varphi$</td></tr></tbody></table><p align = 'right'>to be continued</p>]]></content>
    
    
    
    <tags>
      
      <tag>Latex</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习</title>
    <link href="/2020/04/07/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <url>/2020/04/07/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<center>包括Java基础、中级高级用法的学习过程中的笔记</center><span id="more"></span><h1 id="一-java基础"><a href="#一-java基础" class="headerlink" title="一. java基础"></a>一. java基础</h1><h2 id="1-初识java"><a href="#1-初识java" class="headerlink" title="1.初识java"></a>1.初识java</h2><h3 id="1-编程起步"><a href="#1-编程起步" class="headerlink" title="(1). 编程起步"></a>(1). 编程起步</h3><p>.在一个.Java文件里可以有多个class定义，并且编译完后会有多个*.class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>主方法所在的类叫主类,都用public定义</p><p>JVM解释语言的时候需要得到CLASSPATH的支持,</p><p>CLASSPATH的默认设置为当前目录加载类文件.</p><p>PATH:是操作系统提供的路径配置,定义所有可执行程序的配置</p><p>CLASSPATH:是由JRE提供的,用于定义JAVA程序解释时类加载路径</p><p>JVM → CLASSPATH定义的路径→加载字节码文件</p><h2 id="2-JAVA基本概念"><a href="#2-JAVA基本概念" class="headerlink" title="2.JAVA基本概念"></a>2.JAVA基本概念</h2><h3 id="1-关键字"><a href="#1-关键字" class="headerlink" title="(1).关键字"></a>(1).关键字</h3><p>未使用到的关键字: goto const</p><p>true、fauth、null严格来讲不算关键字</p><h2 id="三-java的基本数据类型"><a href="#三-java的基本数据类型" class="headerlink" title="三.java的基本数据类型"></a>三.java的基本数据类型</h2><h3 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h3><h4 id="1-数值型"><a href="#1-数值型" class="headerlink" title="(1).数值型"></a>(1).数值型</h4><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>byte、short、int、long</td><td>0</td></tr><tr><td>float、double</td><td>0.0</td></tr></tbody></table><h5 id="整型数据类型"><a href="#整型数据类型" class="headerlink" title="整型数据类型"></a>整型数据类型</h5><p>！数据溢出：数字在处理的时候超过了其最大的保存范围，将出现循环的问题。这样的问题在java中叫做数据溢出。</p><p>解决方式：</p><ol><li>定义long型的变量储存</li><li>处理常量：追加”L“或（long）强制转化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>；<br></code></pre></td></tr></table></figure><p>java对byte类型做了特殊处理，如果没超出byte范围的常量可以自动由int变为byte</p><p>如果超过了，就只能强制类型转化</p><p>对于常量可以自动适配转化，但对于变量只能强制类型转化</p><h5 id="浮点型数据"><a href="#浮点型数据" class="headerlink" title="浮点型数据"></a>浮点型数据</h5><p>在java里小数型数据常量定义为double</p><h4 id="2-布尔型"><a href="#2-布尔型" class="headerlink" title="(2).布尔型"></a>(2).布尔型</h4><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>boolean</td><td>false</td></tr></tbody></table><h5 id="布尔型数据类型"><a href="#布尔型数据类型" class="headerlink" title="布尔型数据类型"></a>布尔型数据类型</h5><p>布尔是一位数学家的名字</p><h4 id="3-字符型"><a href="#3-字符型" class="headerlink" title="(3).字符型"></a>(3).字符型</h4><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>char</td><td>“\u0000”</td></tr></tbody></table><h5 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h5><p>在java中单引号中代表的时字符型变量</p><p>注意：在任何编程语言中字符型都可以和（int）</p><pre><code class="hljs">大写字母范围A（65）~Z（90）；小写字母范围a（97）~z（122）；数字范围 ‘0‘（48）~9（57）；</code></pre><p>大小写字母之间查了32个数字的长度</p><p>char最大的优势在于可以保存中文</p><p>java使用的时Unicode的十六进制编码，这种编码的优势在于可以</p><h3 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型"></a>2.引用数据类型</h3><pre><code class="hljs">                                            默认值null</code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果要进行数据传输或者进行文件编码转化使用byte类型（二进制处理操作）</p><p>描述内存或文件大小、描述主键列（自动增长）可使用long</p><h3 id="3-String字符串"><a href="#3-String字符串" class="headerlink" title="3.String字符串"></a>3.String字符串</h3><p>用“”双引号定义</p><p>字任何语言都没有提供字符串这种数据，各个编程语言为了方便开发都提供字符串的相应描述，在java中使用的是String类作为字符串的定义</p><p>在进行字符串变量使用的时候也可以用“+”进行字符串的连接处理</p><p>对于“+”由两种描述：1.字符串的连接；2.加法计算</p><p>注意：如果在+运算中，如果由String类型那所有类型先无条件转化为String类型</p><p>转义字符TAB(\n) </p><h2 id="4-java运算符"><a href="#4-java运算符" class="headerlink" title="4.java运算符"></a>4.java运算符</h2><h3 id="1-数学运算符"><a href="#1-数学运算符" class="headerlink" title="(1).数学运算符"></a>(1).数学运算符</h3><h3 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="(2).关系运算符"></a>(2).关系运算符</h3><h3 id="3-逻辑预算符"><a href="#3-逻辑预算符" class="headerlink" title="(3).逻辑预算符"></a>(3).逻辑预算符</h3><p>关系运算：</p><p>三目（赋值）运算</p><pre><code class="hljs">    关系运算？关系满足时的内容：关系不满足时的内容</code></pre><p>三目运算本身可以嵌套处理</p><h3 id="4-位操作"><a href="#4-位操作" class="headerlink" title="(4).位操作"></a>(4).位操作</h3><p>与（&amp;）或（|）异或（^）.反码(~)</p><p>&amp;和&amp;&amp;、|和||的区别</p><pre><code class="hljs">&amp;和|可以进行位运算和逻辑运算：    在进行逻辑运算的时候所由判断条件都要执行    在进行位运算的时候只针对当前的数据进行与和或处理：在逻辑运算中还可以使用&amp;&amp;和||    &amp;&amp; 在若干条件进行判断的时候如果前面条件返回了false后面的条件判断不再执行    || 在若干条件进行判断的时候如果前面条件返回了true后面的条件判断不再执行</code></pre><h2 id="5-java程序逻辑控制"><a href="#5-java程序逻辑控制" class="headerlink" title="5.java程序逻辑控制"></a>5.java程序逻辑控制</h2><h3 id="1-IF分支"><a href="#1-IF分支" class="headerlink" title="(1).IF分支"></a>(1).IF分支</h3><pre><code class="hljs">语句</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>()&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="2-SWITCH开关语句"><a href="#2-SWITCH开关语句" class="headerlink" title="(2).SWITCH开关语句"></a>(2).SWITCH开关语句</h3><p>如果在case后面没有追加break语句那么会一直执行直到switch语句执行结束或遇到break</p><p>从jdk 1.7sun公司被甲骨文公司收购才将字符串判断加入</p><h3 id="3-while循环"><a href="#3-while循环" class="headerlink" title="(3).while循环"></a>(3).while循环</h3><h3 id="4-for循环"><a href="#4-for循环" class="headerlink" title="(4).for循环"></a>(4).for循环</h3><p>在明确知道循环次数的情况下优先选择for循环</p><p>在不知道循环次数但知道循环结束条件的情况下使用while循环</p><h3 id="5-循环控制"><a href="#5-循环控制" class="headerlink" title="(5).循环控制"></a>(5).循环控制</h3><p>break和continue</p><h2 id="6-方法的定义"><a href="#6-方法的定义" class="headerlink" title="6.方法的定义"></a>6.方法的定义</h2><p>方法的基本定义时方法名第一个字母小写,后面的字母大写</p><p>如果返回的类型为void，也可以用return</p><h3 id="1-方法的重载"><a href="#1-方法的重载" class="headerlink" title="(1).方法的重载"></a>(1).方法的重载</h3><p>定义：变量名相同，参数的类型或个数不同</p><p>方法的重载和方法的返回类型没有关系</p><p>但实际开发中为了方便，方法重载的发挥类型应该相同</p><h3 id="2-方法的递归调用"><a href="#2-方法的递归调用" class="headerlink" title="(2).方法的递归调用"></a>(2).方法的递归调用</h3><pre><code class="hljs">一定要设置方法的结束条件每次调用过程中一定要修改传递的参数的条件</code></pre><p>递归的使用容易溢出</p><h1 id="二-java面向对象编程"><a href="#二-java面向对象编程" class="headerlink" title="二.java面向对象编程"></a>二.java面向对象编程</h1><h2 id="1-面向对象简介"><a href="#1-面向对象简介" class="headerlink" title="1.面向对象简介"></a>1.面向对象简介</h2><p>面向对象考虑的时模块化设计，而在使用的时候进行拼装。</p><p>面向对象的主要特征：</p><ol><li>封装性:内部操作对外部而言不可见,当内部操作都不可直接使用的时候才算叫安全</li><li>继承性:在已有结构的基础上继续进行功能的扩充</li><li>多态性:在继承的基础上扩充而来的概念,指的是类型的转化处理</li></ol><p>程序开发的三个步骤</p><pre><code class="hljs">OOA:面向对象分析OOD:面向对象设计OOP:面向对象编程</code></pre><h2 id="2-类和对象"><a href="#2-类和对象" class="headerlink" title="2.类和对象"></a>2.类和对象</h2><p>类是对某一类事物的共性的抽象概念,而对象描述的是一个具体产物.。</p><h2 id="3-类和对象的定义及使用"><a href="#3-类和对象的定义及使用" class="headerlink" title="3.类和对象的定义及使用"></a>3.类和对象的定义及使用</h2><p>类用class定义</p><p>产生对象的两种方式</p><ul><li><p>声明并实例化对象:类名称对象名称 &#x3D; new 类名称();</p></li><li><p>分步骤完成</p><ol><li><p>声明对象：类名称 对象名称 &#x3D; null；</p></li><li><p>实例化对象：对象名称 &#x3D; new 类名称()  ；</p></li></ol></li></ul><p>对象类中的调用：</p><ul><li>调用类中的属性：实例化对象.成员属性；</li><li>调用类中的方法：实例化对象.方法名称();</li></ul><p>如果此时的程序没有设置对象属性内容的设置，则该数据内容为其对应的数据类型的默认值</p><p><strong>String是引用数据类型默认值为null</strong></p><h2 id="4-对象内存分析"><a href="#4-对象内存分析" class="headerlink" title="4.对象内存分析"></a>4.对象内存分析</h2><p>Java之中的类属于引用数据类型，需要进行内存管理，在操作时会发生内存关系的变化</p><p>常用的内存空间</p><ul><li><strong>堆内存：保存对象的具体信息，在程序中在程序之中对内存空间的开辟是通过new完成的；</strong></li><li><strong>栈内存：保存的是一块堆内存的地址。可以简单的理解为对象的名称保存在栈中</strong></li></ul><p>只有引用数据类型才有java.lang.NullPointerException异常</p><h2 id="5-对象引用的分析"><a href="#5-对象引用的分析" class="headerlink" title="5.对象引用的分析"></a>5.对象引用的分析</h2><p>类本身引用数据类型，同一块内存空间可以被不同的栈内存空间指向</p><p>如果Person是一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">per1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">Person</span> <span class="hljs-variable">per2</span> <span class="hljs-operator">=</span> per1;<span class="hljs-comment">//引用传递</span><br></code></pre></td></tr></table></figure><p>引用传递可以发生在方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">per1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(Person per)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="6-引用与垃圾产生分析"><a href="#6-引用与垃圾产生分析" class="headerlink" title="6.引用与垃圾产生分析"></a>6.引用与垃圾产生分析</h2><p>垃圾空间:没有任何栈内存空间指向的堆内存空间GC(Garbage Collector)垃圾收集器不定期进行回收并释放无用空间，但是如果垃圾过多，一定影响GC的处理性能，从而降低整体的性能，所以在实际开发中垃圾空间越少越好。</p><h2 id="7-成员属性封装"><a href="#7-成员属性封装" class="headerlink" title="7.成员属性封装"></a>7.成员属性封装</h2><p>用<code>private</code>关键字追加在属性前就可以封装属性，即对外部不可见，但是对类的内部是可见的。其中Java开发标准有以下要求：</p><ul><li>用setXxx()、getXxx()方法</li></ul><h2 id="8-构造方法与匿名对象"><a href="#8-构造方法与匿名对象" class="headerlink" title="8.构造方法与匿名对象"></a>8.构造方法与匿名对象</h2><p>可以通过构造方法实现实例化对象中的属性初始化处理</p><p>Java中构造方法的定义：</p><ul><li>构造方法名称必须与类名称保持一致</li><li>构造方法不允许设置任何返回值类型。即没有返回值定义；</li><li>构造方法是在使用关键字new实例化对象的时候自动调用的。</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    Private String name;<br>    Private <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span> <span class="hljs-params">(String n, <span class="hljs-type">int</span> a)</span>&#123;<br>        name = n;<br>        age = a;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>  <span class="hljs-comment">/*①*/</span>Person<span class="hljs-comment">/*②*/</span> per =<span class="hljs-comment">/*③*/</span> <span class="hljs-keyword">new</span> <span class="hljs-comment">/*④*/</span>Person(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>①：主要是定义对象的所属类型，类型决定了可以调用的方法；  </p><p>②：实例化对象名称，所用的操作通过对象来进行访问；</p><p>③：开辟一块新的堆内存空间；</p><p>④：调用有参构造。<strong>在Java程序里面考虑到程序结构的完整性，所以有的类都会提供构造方法，如果现在类中没有定义构造方法，那么会在程序<em>编译的时候</em> 自动创建一个什么都不做的无参的构造方法</strong>。但如果现在已经在类中定义构造方法时，这个默认的构造方法不会被默认创建；</p><p>所以一个类至少存在一个构造方法，永恒存在。</p><ul><li><p><font color = red>既然构造方法时一个方法，为什么不定义返回类型？||既然构造方法不会返回数据，为什么不使用void定义？</font></p><p>分析：程序编译器时根据代码结构来进行编译处理的，执行的时候也是根据代码结构来处理的。</p><p>所以如果在构造方法上使用void，那么此结构就与普通方法结构完全相同了，这样编译器会认为次方法是一个普通方法。</p></li><li><p>普通方法与构造方法最大的区别：构造方法实在类对象实例化的时候调用的，而普通方法是在类对象实例化产生之后调用的。</p></li><li><p>构造方法重载时只需要考虑参数类型及个数即可。：在构造方法定义的时候最好根据参数个数进行安排定义顺序。</p></li><li><p>匿名对象 ：<br>定义对象的名称：类名称 对象名称 &#x3D; null；</p><p>实例化对象：对象名称 &#x3D; new 类名称（）；</p><p>此时也可以通过实例化对象来进行类的操作。由于这种形式的对象由于没有名字就称为匿名对象。</p><p>由于匿名对象没有任何的引用名称，所以该对象使用一次之后就将称为垃圾，而所有的垃圾将被GC进行回收与释放。</p></li></ul><h2 id="9-this调用本类属性"><a href="#9-this调用本类属性" class="headerlink" title="9.this调用本类属性"></a>9.this调用本类属性</h2><p>this：当前对象</p><p>this可以描述以下三类结构:</p><ul><li>当前类中的属性：this.属性；</li><li>当前类中的方法（普通方法、构造方法）this()、this.方法名（）；</li><li>描述当前对象；</li></ul><h2 id="10-this调用方法"><a href="#10-this调用方法" class="headerlink" title="10.this调用方法"></a>10.this调用方法</h2><ul><li>构造方法调用(this()): 使用关键字new实例化对象的时候会调用构造方法</li><li>普通方法的调用(this.方法名称()): 实例化对象产生后就可以调用普通方法</li></ul><p>对于本类构造方法的相互调用需要注意:</p><ul><li>构造方法必须在实例化新对象的时候调用, 所以”this()”语句只允许放在构造方法首行</li><li>构造方法互相调用时应保留程序出口</li></ul><h2 id="11-简单Java类"><a href="#11-简单Java类" class="headerlink" title="11.简单Java类"></a>11.简单Java类</h2><p>简单java类指的是可以描述某一类信息的程序类，并且在这个类之中并没有特别复杂的逻辑操作。</p><p>简单java类的核心开发结构</p><ul><li>类名称一定有意义，可以明确描述某一类事物</li><li>类之中的所有属性都必须使用private进行封装，封装后的属性必须提供setter、getter</li><li>类之中必须有无参构造方法</li><li>类中不许出现任何输出语句，所有内容的获取必须返回</li><li>【非必须】可以提供有一个获取对象详细信息的方法</li></ul><p>例定义一个简单java类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> deptno ;<br>    <span class="hljs-keyword">private</span> String dname ;<br>    <span class="hljs-keyword">private</span> String loc;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dept</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">dept</span> <span class="hljs-params">(<span class="hljs-type">long</span> deptno,String dname,String loc)</span>&#123;<br>        <span class="hljs-built_in">this</span>.deptno = deptno ;<br>      <span class="hljs-built_in">this</span>.dname = dname ;<br>        <span class="hljs-built_in">this</span>.loc = loc ;<br>    &#125;<br>    pubcli String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[部门信息]部门编号&quot;</span>+<span class="hljs-built_in">this</span>.deptno+<span class="hljs-string">&quot;、部门名称&quot;</span>+<span class="hljs-built_in">this</span>.denaem+<span class="hljs-string">&quot;、部门位置&quot;</span>+<span class="hljs-built_in">this</span>.loc;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDname</span><span class="hljs-params">(String dname)</span>&#123;<br>        <span class="hljs-built_in">this</span>.dname = dname ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoc</span><span class="hljs-params">(String loc)</span>&#123;<br>        <span class="hljs-built_in">this</span>.loc = loc;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDeptno</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.deptno = deptno ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getDeptno</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.deptno ;<br>     &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDname</span><span class="hljs-params">()</span>&#123;<br>        retrun <span class="hljs-built_in">this</span>.dname ;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLoc</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.loc = loc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="13-声明static属性"><a href="#13-声明static属性" class="headerlink" title="13.声明static属性"></a>13.声明static属性</h2><p>static属性最好通过所有对象的最高代表（类）来访问.。</p><p>static属性可以在对象未实例化的时候使用（与非static属性的主要区别）</p><p>在类的设计的时候，主要考虑非static属性，</p><h2 id="14-声明static方法"><a href="#14-声明static方法" class="headerlink" title="14.声明static方法"></a>14.声明static方法</h2><p>主要特点：可直接由类名称调用</p><ul><li><p>static方法只允许调用static属性或static方法；</p></li><li><p>非static方法允许带哦用static属性或static方法；</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(Sting args[])</span>&#123;   <br>print();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br>&#125;<span class="hljs-comment">//此种写法正确</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(Sting args[])</span>&#123;   <br>print();<span class="hljs-comment">//main无法调用非static方法</span><br>&#125;<br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br>&#125;<span class="hljs-comment">//此种写法错误</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(Sting args[])</span>&#123;   <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaDemo</span>().print();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br>&#125;<span class="hljs-comment">//此种写法正确</span><br></code></pre></td></tr></table></figure><p>所以，只有在回避实例化调用时才会主要考虑用static</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> 方法名称（）&#123;<br>    <span class="hljs-built_in">this</span>（）;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="15-代码块"><a href="#15-代码块" class="headerlink" title="15.代码块"></a>15.代码块</h2><p>在程序中使用“{}”定义的结构称为代码块</p><ul><li>普通代码块</li></ul><p>特点：定义在一个方法之中的代码块。可以在一个方法中进行结构拆分，以防止相同变量名互相影响。</p><ul><li>构造代码块</li></ul><p>特点：构造快会先于构造方法执行，且每一次实例化新对象时都会调用构造快中的方法</p><ul><li>静态代码块</li></ul><p>静态代码块会优先于构造块执行，并只会执行一次，主要目的时为了金泰程序的初始化</p><p>静态代码块优先于主方法执行。</p><h2 id="16-数组的基本定义"><a href="#16-数组的基本定义" class="headerlink" title="16.数组的基本定义"></a>16.数组的基本定义</h2><p>java中将数据定义为引用数据类型</p><p>定义格式</p><ul><li>数组的动态初始化 ;声明并初始化数组: <ul><li>数组类型 数组名称[] &#x3D; new 数据类型[长度];</li><li>数组类型 [] 数组名称&#x3D; new 数据类型[长度];</li></ul></li><li>数组的静态初始化:在数组定义的时候就为其设置好内容<ul><li>简化格式: 数据类型 数组名称 [] &#x3D; {数据1,数据2…}</li><li>完整格式: 数据类型 数组名称 [] &#x3D; new 数据类型[]{数据1,数据2….}</li></ul></li></ul><p>数组的使用方式：通过脚标进行每一个元素的访问，<font color = red>如果数组越界，则会出现异常”ArrayIndexOutOfBoundsException“</font></p><p>对于数组长度也可以使用<code>数组名称.length</code>获得数组长度</p><h2 id="17-数组引用传递分析"><a href="#17-数组引用传递分析" class="headerlink" title="17.数组引用传递分析"></a>17.数组引用传递分析</h2><p>因为数组属于应用数据类型，所以如果使用未开辟堆内存空间的数组会出现”NullPointerException“异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">main()&#123;<br>    <span class="hljs-type">int</span> [] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>    <span class="hljs-type">int</span> temp [] = arr;<span class="hljs-comment">//引用传递</span><br>    temp[<span class="hljs-number">0</span>] = <span class="hljs-number">99</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="18-foreach输出"><a href="#18-foreach输出" class="headerlink" title="18.foreach输出"></a>18.foreach输出</h2><p>jdk1.5之后为了减少下标对数组的影响，引入了foreach</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(数据类型 变量 :数组|集合)&#123;&#125;<br></code></pre></td></tr></table></figure><p>特点可以激动将数组中的元素取出保存在变量里，这样就能避免用下标的方式取出。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">main()&#123;<br>    <span class="hljs-type">int</span> data[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> temp:data)&#123;<span class="hljs-comment">//自动将data数组中的每一个内容交给</span><br>        System.out.println(temp);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="19-二维数组"><a href="#19-二维数组" class="headerlink" title="19.二维数组"></a>19.二维数组</h2><p>定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">动态初始化<br>数据类型 数组名称 [] [] = <span class="hljs-keyword">new</span> 数据类型 [行个数] [列个数]；<br>静态初始化：<br>数据类型 数组名称[] [] = <span class="hljs-keyword">new</span> 数据类型 [] []&#123;&#123;数据,数据,数据...&#125;,&#123;数据,数据,数据...&#125;...&#125;<br></code></pre></td></tr></table></figure><h2 id="20-数组与方法"><a href="#20-数组与方法" class="headerlink" title="20.数组与方法"></a>20.数组与方法</h2><p>方法接收数组,例:<code>public void example(int data[])&#123;&#125; </code></p><p>返回类型为数组的方法,例:<code>public int[] example ()&#123;&#125;</code></p><h2 id="21-数组排序"><a href="#21-数组排序" class="headerlink" title="21.数组排序"></a>21.数组排序</h2><p>简单排序分析:</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200416232026351.png" alt="image-20200416232026351"></p><p>在数组转置中只使用一个数组可以产生较少的垃圾</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200417001315762.png" alt="image-20200417001315762"></p><h2 id="22-数组相关的操作方法"><a href="#22-数组相关的操作方法" class="headerlink" title="22.数组相关的操作方法"></a>22.数组相关的操作方法</h2><ol><li>数组排序方法:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//java.util.Arrays.sort(arrname);数组排序</span><br></code></pre></td></tr></table></figure><ol start="2"><li>数组拷贝(变形):</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//System.arraycopy(源数组,源数组开始点,目标数组,目标数组开始点,拷贝长度);数组拷贝</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>        <span class="hljs-type">int</span> dataA [] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-type">int</span> dataB [] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> []&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>,<span class="hljs-number">66</span>,<span class="hljs-number">77</span>,<span class="hljs-number">88</span>,<span class="hljs-number">99</span>&#125;;<br>        System.arraycopy(dataA,<span class="hljs-number">5</span>,dataB,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);<br>        print(dataB);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="23-方法可变参数"><a href="#23-方法可变参数" class="headerlink" title="23.方法可变参数"></a>23.方法可变参数</h2><p>要求:在生产中可能会有要求，方法可以传入人一个参树</p><p>可变参数的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br> System.out.println(ArrayUtil.sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));      System.out.println(ArrayUtil.sum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;));<br>    &#125;<br>&#125;<br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayUtil</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> ... data)</span>&#123;<span class="hljs-comment">//变种数组</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;   <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> temp: data)&#123;<br>        sum +=temp;<br>    &#125;    <br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可变参数最大的作用：避免数组作为参数的操作</p><p>可变参数的本质：数组</p><h2 id="24-对象数组"><a href="#24-对象数组" class="headerlink" title="24.对象数组"></a>24.对象数组</h2><ul><li>动态初始化：类 对象数组名称 [] &#x3D; new 类[长度]，每一个元素内容都是null；</li><li>静态初始化：类 对象 [] &#x3D; new 类[] {实例化对象，实例化对象，…}；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name ,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        Person per [] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[<span class="hljs-number">3</span>];<br>        per[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">20</span>);<br>        per[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">20</span>) ;<br>        per[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-number">20</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;x&lt;per.length;i++)&#123;<br>            System.out.println(per[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内存分析：<img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200417225309965.png" alt="image-20200417225309965"></p><p>数组的优点：数组中的数据通过线性保存，根据索引访问，速度较快。时间复杂度为(1);</p><p>数组的缺点：长度是固定的</p><h2 id="25-类关联结构-引用传递"><a href="#25-类关联结构-引用传递" class="headerlink" title="25.类关联结构,引用传递"></a>25.类关联结构,引用传递</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> Car car;<span class="hljs-comment">//人有一辆车，不能由构造来初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name ,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCar</span><span class="hljs-params">(Car car)</span>&#123;<br>        <span class="hljs-built_in">this</span>.car = car;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Car <span class="hljs-title function_">getCar</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.car;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名:&quot;</span>+<span class="hljs-built_in">this</span>.name +<span class="hljs-string">&quot;、年龄:&quot;</span>+<span class="hljs-built_in">this</span>.age;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">private</span> Person person;<span class="hljs-comment">//车属于一个人，也不能用构造来初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name ,<span class="hljs-type">int</span> price)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPerson</span><span class="hljs-params">(Person person)</span>&#123;<br>        <span class="hljs-built_in">this</span>.person = person;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">getPerson</span><span class="hljs-params">(Person person)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.person;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;汽车品牌型号:&quot;</span>+<span class="hljs-built_in">this</span>.name +<span class="hljs-string">&quot;、汽车价值:&quot;</span>+<span class="hljs-built_in">this</span>.price;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>       <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;林强&quot;</span>,<span class="hljs-number">29</span>);<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;宾利&quot;</span>,<span class="hljs-number">8000000.00</span>)<br>        person.setCar(car);<span class="hljs-comment">//人有一辆车</span><br>        car.setPerson(person);<br>        System.out.println(person.getCar().getInfo());<br>        System.out.println(car.getPerson().getInfo());<span class="hljs-comment">//代码链</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="26-自身关联"><a href="#26-自身关联" class="headerlink" title="26.自身关联"></a>26.自身关联</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> Car car;<span class="hljs-comment">//人有一辆车，不能由构造来初始化</span><br>    <span class="hljs-keyword">private</span> Person children [];<span class="hljs-comment">//一个人有多个孩子</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name ,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCar</span><span class="hljs-params">(Car car)</span>&#123;<br>        <span class="hljs-built_in">this</span>.car = car;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Car <span class="hljs-title function_">getCar</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.car;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名:&quot;</span>+<span class="hljs-built_in">this</span>.name +<span class="hljs-string">&quot;、年龄:&quot;</span>+<span class="hljs-built_in">this</span>.age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setChildre</span><span class="hljs-params">(Person children[])</span>&#123;<br>         <span class="hljs-built_in">this</span>.children = children;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Person [] getChildren()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.children;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">private</span> Person person;<span class="hljs-comment">//车属于一个人，也不能用构造来初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name ,<span class="hljs-type">int</span> price)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPerson</span><span class="hljs-params">(Person person)</span>&#123;<br>        <span class="hljs-built_in">this</span>.person = person;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">getPerson</span><span class="hljs-params">(Person person)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.person;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;汽车品牌型号:&quot;</span>+<span class="hljs-built_in">this</span>.name +<span class="hljs-string">&quot;、汽车价值:&quot;</span>+<span class="hljs-built_in">this</span>.price;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>       <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;吴硕&quot;</span>,<span class="hljs-number">29</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">childA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;林强&quot;</span>,<span class="hljs-number">18</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">ChildB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;郭仁义&quot;</span>,<span class="hljs-number">19</span>);<br>        childA.setCar(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;BMW X1&quot;</span>,<span class="hljs-number">300000.00</span>));<br>        childB.setCar(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;法拉利&quot;</span>,<span class="hljs-number">1500000.00</span>));<br>        person.setChildren(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span> []&#123;childA,childB&#125;);<span class="hljs-comment">//一个人有多个孩子；</span><br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;宾利&quot;</span>,<span class="hljs-number">8000000.00</span>)<br>        person.setCar(car);<span class="hljs-comment">//人有一辆车</span><br>        car.setPerson(person);<br>        System.out.println(person.getCar().getInfo());<br>        System.out.println(car.getPerson().getInfo());<span class="hljs-comment">//代码链</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; person.getChildren().length ; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;\t|- &quot;</span>+person.getChidren()[i].getInfo());<br>            System.out.println(<span class="hljs-string">&quot;\t\t- &quot;</span>+person.getChildren()[i].getCar().getInfo());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="26-数据表与简单java类映射转换"><a href="#26-数据表与简单java类映射转换" class="headerlink" title="26.数据表与简单java类映射转换"></a>26.数据表与简单java类映射转换</h2><p>基本映射关系:</p><ul><li>数据实体表的设计 &#x3D; 类的定义;</li><li>表中的字段 &#x3D; 类的成员属性;</li><li>表的外键关联 &#x3D; 引用关联;</li><li>表的一行记录 &#x3D; 类的一个实例化对象;</li><li>表的多行记录 &#x3D; 对象数组;</li></ul><p>将数据表转化为简单java类的定义形式,</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200420073011684.png" alt="image-20200420073011684"></p><p>要求可以获得一下数据:</p><ul><li><p>根据部门获得以下内容 :</p><ul><li><p>一个部门的完整信息;</p></li><li><p>一个部门之中所有雇员的完整信息</p></li><li><p>一个雇员对应的领导信息</p></li></ul></li><li><p>根据雇员信息获得以下内容:</p><ul><li>一个雇员所在部门信息;</li><li>一个雇员对应的领导信息;</li></ul></li></ul><p>步骤:</p><ol><li>先抛开关联字段,写出类的基本组成,而后再通过引用配置关联关系;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//先定义Emp、Dept实体类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span>&#123;<br>    <span class="hljs-keyword">private</span> Emp emps [];<span class="hljs-comment">//多个雇员信息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> deptno ;<br>    <span class="hljs-keyword">private</span> String dname ;<br>    <span class="hljs-keyword">private</span> String loc ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dept</span> <span class="hljs-params">(<span class="hljs-type">long</span> deptno,String dname,String loc)</span>&#123;<br>        <span class="hljs-built_in">this</span>.deptno = deptno ;<br>        <span class="hljs-built_in">this</span>.dname = dname ;<br>        <span class="hljs-built_in">this</span>.loc = loc ;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[部门信息] 部门编号：&quot;</span>+<span class="hljs-built_in">this</span>.deptno + <span class="hljs-string">&quot; 部门名称 &quot;</span> + <span class="hljs-string">&quot; 部门位置&quot;</span> + <span class="hljs-built_in">this</span>.loc ;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmps</span><span class="hljs-params">(Emp [] emps)</span>&#123;<br>        <span class="hljs-built_in">this</span>.emps = emps ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Emp [] getEmps()&#123;<br>        retrun <span class="hljs-built_in">this</span>.emps ;<br>    &#125; <br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> empno ;<br>    <span class="hljs-keyword">private</span> String ename ;<br>    <span class="hljs-keyword">private</span> String job ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> comm ;<br>    <span class="hljs-keyword">private</span> Dept dept ;<span class="hljs-comment">//所属部门</span><br>    <span class="hljs-keyword">private</span> Emp mgr ;<span class="hljs-comment">//所属领导</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">(<span class="hljs-type">long</span> empno, String ename ,String job,<span class="hljs-type">double</span> sal,<span class="hljs-type">double</span> comm)</span>&#123;<br>        <span class="hljs-built_in">this</span>.empno = empno ;<br>        <span class="hljs-built_in">this</span>.ename = ename ;<br>        <span class="hljs-built_in">this</span>.job = job;<br>        <span class="hljs-built_in">this</span>.sal = sal ;<br>        <span class="hljs-built_in">this</span>.comm = comm ;    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDept</span><span class="hljs-params">(Dept dept )</span>&#123;<br>        <span class="hljs-built_in">this</span>.dept = dept;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDept</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.dept;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getMgr</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.mgr;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[雇员信息] 雇员编号&quot;</span> + <span class="hljs-built_in">this</span>.empno = <span class="hljs-string">&quot;雇员名称&quot;</span> + <span class="hljs-built_in">this</span>.ename + <span class="hljs-string">&quot;雇员职位&quot;</span> + <span class="hljs-built_in">this</span>.job +<span class="hljs-string">&quot;基本工资&quot;</span> + <span class="hljs-built_in">this</span>.sal +<span class="hljs-string">&quot;佣金&quot;</span> +<span class="hljs-built_in">this</span>.comm;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String []args)</span>&#123;<br>        <span class="hljs-comment">//第一步：根据关系进行类的定义</span><br>        <span class="hljs-type">Dept</span> <span class="hljs-variable">dept</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dept</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;财务部&quot;</span>，<span class="hljs-string">&quot;上海&quot;</span>);<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">empA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-number">7369L</span>,<span class="hljs-string">&quot;SMITH&quot;</span>,<span class="hljs-string">&quot;CLERK&quot;</span>,<span class="hljs-number">800.00</span>,<span class="hljs-number">0.0</span>) ;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">empB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-number">7366L</span>,<span class="hljs-string">&quot;FORD&quot;</span>,<span class="hljs-string">&quot;MANAGER&quot;</span>,<span class="hljs-number">2400.00</span>,<span class="hljs-number">0.0</span>) ;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">empc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-number">7339L</span>,<span class="hljs-string">&quot;KING&quot;</span>,<span class="hljs-string">&quot;PRESIDENT&quot;</span>,<span class="hljs-number">5000.00</span>,<span class="hljs-number">0.0</span>) ;<br>    empA.setDept(dept) ;<span class="hljs-comment">//设置雇员与部门的关联；</span><br>    empA.setDept(dept) ;<span class="hljs-comment">//设置雇员与部门的关联；</span><br>    empA.setDept(dept) ;<span class="hljs-comment">//设置雇员与部门的关联；</span><br>    empA.setMgr(empB) ;<span class="hljs-comment">//设置雇员与部门的关联；</span><br>    empB.setMgr(empC) ;<span class="hljs-comment">//设置雇员与部门的关联；</span><br>    dept.setEmps(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span> [] &#123;empA,empB,empC&#125;)<span class="hljs-comment">//部门与雇员</span><br>        <span class="hljs-comment">//第二步：根据关系获取数据</span><br>    System.out.println(dept.getInfo());<span class="hljs-comment">//部门信息</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;i&lt;dept.getEmpt().lenth; i++)&#123;<br>        System.out.println(<span class="hljs-string">&quot;\t|-&quot;</span>+dept.getEmpt()[i].getInfo()) ;<span class="hljs-comment">//通过部门获得部员信息</span><br>        <span class="hljs-keyword">if</span>(dept.getEmpt()[i].getMgr().getInfo() != <span class="hljs-literal">null</span>)&#123;   System.out.println(<span class="hljs-string">&quot;\t\t|-&quot;</span>+dept.getEmpt()[i].getMgr().getInfo()) ;<br><span class="hljs-comment">//通过部门获得部员领导信息</span><br>&#125;                                                    <br>    &#125;<br>        System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>)<br>        System.out.println(empB.getDept().getInfo()) ;<span class="hljs-comment">//根据雇员获取部门信息</span><br>        System.out.println(empB.getMgr().getInfo());<span class="hljs-comment">//根据雇员获取领导信息</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color = red><em><strong>以上便是基本的映射转换</strong></em></font></p><h2 id="27-一对多映射"><a href="#27-一对多映射" class="headerlink" title="27.一对多映射"></a>27.一对多映射</h2><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200420073227840.png" alt="image-20200420073227840"></p><p>按照表的要求将表的结构转换为类结构,同时可以获取以下信息:</p><ul><li>获取一个分类的完整信息;</li><li>可以根据分类获取其对应所有子分类的信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> iid ;<br>    <span class="hljs-keyword">private</span> String title ;<br>    <span class="hljs-keyword">private</span> Subitem subitems [];<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Item</span><span class="hljs-params">(longiid,String title)</span>&#123;<br>        <span class="hljs-built_in">this</span>.iid = iid ;<br>        <span class="hljs-built_in">this</span>.title = title ;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSubitems</span><span class="hljs-params">(Subitem subitems [])</span>&#123;<br>        <span class="hljs-built_in">this</span>.subitems = subitems ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Subitem [] getSubitems() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.subitems ;<br>    &#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[分类信息] iid =&quot;</span> + <span class="hljs-built_in">this</span>.iid + <span class="hljs-string">&quot;title = &quot;</span> + <span class="hljs-built_in">this</span>.title ;<br>    &#125;<br>    &#125;<br>   <span class="hljs-keyword">class</span> <span class="hljs-title class_">Subitem</span>&#123;<br>       <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> sid ;<br>       <span class="hljs-keyword">private</span> String title ;<br>       <span class="hljs-keyword">private</span> Item item ;<br>       <span class="hljs-keyword">public</span> <span class="hljs-title function_">Subitem</span><span class="hljs-params">(<span class="hljs-type">long</span> sid,String title)</span>&#123;<br>           <span class="hljs-built_in">this</span>.sid =o sid ;<br>           <span class="hljs-built_in">this</span>.title = title ;&#125;<br>       <span class="hljs-keyword">public</span> oid <span class="hljs-title function_">setItem</span><span class="hljs-params">(Item item)</span>&#123;<br>           <span class="hljs-built_in">this</span>.item = item ;<br>       &#125;<br>       <span class="hljs-keyword">public</span> Item getItem&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.item ;<br>       &#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[分类信息] sid =&quot;</span> + <span class="hljs-built_in">this</span>.sid + <span class="hljs-string">&quot;title = &quot;</span> + <span class="hljs-built_in">this</span>.title ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-comment">//第一步:根据数据结构设置对象数据</span><br>        <span class="hljs-type">Item</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(<span class="hljs-number">1L</span>,<span class="hljs-string">&quot;图书馆&quot;</span>) ;<br>        Subitem subitems [] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subitem</span> [] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subitem</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;编程书&quot;</span>) ,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subitem</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;图形图像类书&quot;</span>) <br>        &#125;<br>        item.setSubitems(subitems) ; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> - ; i &lt; subitems.length ; i++) &#123;<br>            subitems[i].setItem(item) ;<br>        &#125;<br>        <span class="hljs-comment">//更具要求获得s</span><br>        System.out.println(item.getInfo());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; x &lt; item.getSubitems().length ; i ++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;\t|-&quot;</span> + item.getSubitem()[i].getInfo())<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="28-String类"><a href="#28-String类" class="headerlink" title="28.String类"></a>28.String类</h2><p>String可以保存字符串中的每一个字符串的数据都是保存子了数组之中.</p><ul><li>源代目录: jdk-10\lib\src.zip;</li></ul><table><thead><tr><th>JDK1.8以前的String支持类</th><th>JDK1.9以前的的String支持类</th></tr></thead><tbody><tr><td><img src="https://gitee.com/jeremy_ne/giteePagesImages/raw/master/image-20200420151242036.png" alt="image-20200420151242036"></td><td><img src="https://gitee.com/jeremy_ne/giteePagesImages/raw/master/image-20200420151336145.png" alt="image-20200420151336145"></td></tr><tr><td>String保留的是字符数组:<code>private final char value[]</code></td><td>String保留的是字节数组:<code>private final byte value[]</code></td></tr></tbody></table><p>所以:字符串就是对数组的一种特殊包装应用,但同时是无法改变的.</p><p><strong>String类中除了可以使用直接赋值的形式为对象实例化,也可以使用<code> public String(String str)</code>的方式为对象实例化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mldn&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (<span class="hljs-string">&quot;mldn&quot;</span>) ;<br>        System.out.println(strA == strB) ;<span class="hljs-comment">//输出false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果想进行准确判断卡可以<code>equals()</code>进行判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mldn&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (<span class="hljs-string">&quot;mldn&quot;</span>) ;<br>        System.out.println(strA.equals(strB) ;<span class="hljs-comment">//输出true;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再String比较中”&#x3D;&#x3D;”</p><table><thead><tr><th>“&#x3D;&#x3D;”</th><th>equals</th></tr></thead><tbody><tr><td>进行的数值比较,如果用于对象比较则比较的是两个内存的地址数值</td><td>比较字符串</td></tr></tbody></table><h2 id="29-两种实例化方法的区别"><a href="#29-两种实例化方法的区别" class="headerlink" title="29.两种实例化方法的区别"></a>29.两种实例化方法的区别</h2><ul><li>直接赋值</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200421143032038.png" alt="image-20200421143032038"></p><p>在用直接复制处理的过程中,对于字符串而言可以实现池数据的自动保存,如果有相同数据定义时可以减少对象的产生,提高操作性能</p><ul><li>构造方法实例化String对象</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200421143804769.png" alt="image-20200421143804769"></p><p>此时会开辟两块堆内存空间,而后只会使用一块</p><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> classStringDemo&#123;<br>    <span class="hljs-keyword">public</span> staitc <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mldn&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (<span class="hljs-string">&quot;mldn&quot;</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200421144551560.png" alt="image-20200421144551560"></p><p>使用构造方法实例化对象时不会出现自动保存到字符串对象池</p><p>所以执行以下语句:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> classStringDemo&#123;<br>    <span class="hljs-keyword">public</span> staitc <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mldn&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (<span class="hljs-string">&quot;mldn&quot;</span>) ;<br>        System.out.println(strA == strB) ;<span class="hljs-comment">//输出结果为false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以构造方法实例化对象实际上是自己专用的内存空间,但String类中提供手工入池的处理</p><p><code> public String intern();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> classStringDemo&#123;<br>    <span class="hljs-keyword">public</span> staitc <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mldn&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (<span class="hljs-string">&quot;mldn&quot;</span>).inter() ;<br>        System.out.println(strA == strB) ;<span class="hljs-comment">//输出结果为true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color = red>面试: 请解释String类两种对象实例化方法的区别</font></p><ul><li>直接复制: 只会产生一个实例化对象,并且可以自动保存到对象池之中,以实现该字符串实例的重用</li><li>构造方法: 会产生两个实例化对象, 并且不会自动入池, 无法实现对象重用,但可以使用intern()的方法手工重用</li></ul><h2 id="30-String对象-常量-池"><a href="#30-String对象-常量-池" class="headerlink" title="30.String对象(常量)池"></a>30.String对象(常量)池</h2><p>对象池的目的是实现数据的共享处理</p><p>java中对象(常量)池的种类</p><ul><li>静态常量池: 指的是程序(*.class)在加载的时候会自动将此程序之中保存的字符串,普通常量类和方法的信息等全部进行分配</li><li>运行时常量池: 当一个程序(*.class)加载之后, 里面有些变量, 此时提供的常量池</li></ul><p>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//静态常量池</span><br><span class="hljs-keyword">public</span> classStringDemo&#123;<br>    <span class="hljs-keyword">public</span> staitc <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strB</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.&quot;</span> + <span class="hljs-string">&quot;mldn.&quot;</span> + <span class="hljs-string">&quot;cn&quot;</span>  ;<br>        System.out.println(strA == strB) ;<span class="hljs-comment">//输出结果为true</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*本程序中所给出的内容全部是创立那个数据(字符串的常量都是匿名对象),所以程序在加载的时候会自动处理好连接*/</span><br></code></pre></td></tr></table></figure><p>下图为静态常量池:</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200421151633367.png" alt="image-20200421151633367"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//运行时常量池</span><br><span class="hljs-keyword">public</span> classStringDemo&#123;<br>    <span class="hljs-keyword">public</span> staitc <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mldn&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>        <span class="hljs-type">STring</span> <span class="hljs-variable">strB</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.&quot;</span> + info + <span class="hljs-string">&quot;cn&quot;</span>  ;<br>        System.out.println(strA == strB) ;<span class="hljs-comment">//输出结果为false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在字符串连接的时候,info是一个变量,程序在加载是不确定info的内容, strB存在动态常量池中</p><p>而strA存在静态常量池中, 所以<code>strA == strB </code>的比较结果为false;</p><h2 id="31-字符串修改分析"><a href="#31-字符串修改分析" class="headerlink" title="31.字符串修改分析"></a>31.字符串修改分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> classStringDemo&#123;<br>    <span class="hljs-keyword">public</span> staitc <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.&quot;</span> ;<br>       <br>        str += <span class="hljs-string">&quot;mldn.&quot;</span> ;<br>        str = str + <span class="hljs-string">&quot;cn&quot;</span> ;<br>        System.out.println(str) ;<span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析: </p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200421154431224.png" alt="image-20200421154431224"></p><p>在处理过程中,字符串常量内容没发生任何改变,改变的String类对象的引用,并且这种改变会带来大量垃圾空间</p><h2 id="32-主方法分析"><a href="#32-主方法分析" class="headerlink" title="32.主方法分析"></a>32.主方法分析</h2><ul><li>public: 访问权限,主方法是一切的开始点,开始带你一定是公共的</li><li>static: 程序的执行是通过类名称完成的,所以表示此方法是由类直接调用;</li><li>void: 主方法是一切的起点,起点一旦开始就没有返回的可能;</li><li>main: 是一个系统定义好的方法名称</li><li>String args[]: 字符串数组,可以实现程序启动参数的接收</li></ul><p>范例 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [] &#123;</span><br><span class="hljs-params">        <span class="hljs-keyword">for</span> (String arg : args)</span> &#123;<br>            System.out.println(arg) ;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在程序执行的时候可以设置参数,每一个参数用空格分割:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$java</span> StringDemo hello world hello mldn<br></code></pre></td></tr></table></figure><p>如果参数本身有空格,需要使用” ‘’ “包装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$java</span> StringDEmo <span class="hljs-string">&quot;hello world&quot;</span><span class="hljs-string">&quot;hello mldn&quot;</span><br></code></pre></td></tr></table></figure><h2 id="33-JavaDoc"><a href="#33-JavaDoc" class="headerlink" title="33.JavaDoc"></a>33.JavaDoc</h2><p>Java的api文档(JavaDoc),这个文档可以直接通过在线查看</p><p>JDK1.9之前, 所有的java中的常用类库会在JVM启动的时候进行全部的加载这样性能会下降</p><p>JDK1.9之后有很多模块, 程序放在了模块中</p><p>在模块之中有大量开发包</p><p><a href="https://docs.oracle.com/javase/9/docs/api/java.base-summary.html">官方文档</a></p><p>文档中的组成</p><table><thead><tr><th>名称</th><th align="left">内容</th></tr></thead><tbody><tr><td><strong>类的定义</strong></td><td align="left"><img src="https://gitee.com/jeremy_ne/giteePagesImages/raw/master/image-20200421164541664.png" alt="image-20200421164541664"></td></tr><tr><td><strong>类的详细说明</strong></td><td align="left"><img src="https://gitee.com/jeremy_ne/giteePagesImages/raw/master/image-20200421164329862.png" alt="image-20200421164329862"></td></tr><tr><td><strong>成员摘要</strong></td><td align="left"><img src="https://gitee.com/jeremy_ne/giteePagesImages/raw/master/image-20200421164626241.png" alt="image-20200421164626241"></td></tr><tr><td><strong>构造方法摘要”Deprecated”表示不建议使用</strong></td><td align="left"><img src="https://gitee.com/jeremy_ne/giteePagesImages/raw/master/image-20200421164732196.png" alt="image-20200421164732196"></td></tr><tr><td>**方法摘要: **左边为返回值;右边为相应方法和参数</td><td align="left"><img src="https://gitee.com/jeremy_ne/giteePagesImages/raw/master/image-20200421165033202.png" alt="image-20200421165033202"></td></tr></tbody></table><h2 id="34-字符串与字符-都以String类中的方法为例"><a href="#34-字符串与字符-都以String类中的方法为例" class="headerlink" title="34.字符串与字符(都以String类中的方法为例)"></a>34.字符串与字符(都以String类中的方法为例)</h2><table><thead><tr><th align="center">No</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>public String(char[] value)</code></td><td align="center">构造</td><td align="center">将传入的全部数组变为字符串</td></tr><tr><td align="center">2</td><td align="center"><code>public String(char[] value,int offset, int count)</code></td><td align="center">构造</td><td align="center">将部分数组转化为字符串</td></tr><tr><td align="center">3</td><td align="center"><code>public char charAt(int index)</code></td><td align="center">普通方法</td><td align="center">获取指定索引位置的字符</td></tr><tr><td align="center">4</td><td align="center"><code>public char[] toCharArray()</code></td><td align="center">普通方法</td><td align="center">将字符串中的数据以字符数组的形式返回</td></tr></tbody></table><p>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> str.charAt(<span class="hljs-number">5</span>) ;<span class="hljs-comment">//程序所有索引下标都是从0开始的</span><br>        System.out.println(c) ;<span class="hljs-comment">//l</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例:()判断一个字符串中的数据是否是全部由数字所组成</p><ul><li>判断字符串中的每一位的最好做法是将字符串变为字符数组</li><li>可以判断每一个字符是否在数字的范围之内(‘0’~’9’)</li><li>如果由一位不是数字则表示验证失败</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hellowrold&quot;</span> ;<br>       System.out.println(isNumber(str)?<span class="hljs-string">&quot;是由数字组成&quot;</span> : <span class="hljs-string">&quot;不是由数字组成&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNumber</span><span class="hljs-params">(String str)</span> &#123;<br>    <span class="hljs-type">char</span> [] result = str.toCharArray() ;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; result.length; i ++)&#123;<br>            <span class="hljs-keyword">if</span> (result[i] &lt; <span class="hljs-string">&#x27;0&#x27;</span> || result[i] &gt; <span class="hljs-string">&quot;0&quot;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//后面不再判断</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在实际开发中,使用char字符数组可以处理中文字符;</p><h2 id="35-字符串与字节"><a href="#35-字符串与字节" class="headerlink" title="35.字符串与字节"></a>35.字符串与字节</h2><p>使用字符串与字节转换时,主要目的是为了编码转换或二进制数组传输</p><table><thead><tr><th align="center">No</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>public String(byte[] bytes)</code></td><td align="center">构造</td><td align="center">将全部字节数组变为字符串</td></tr><tr><td align="center">2</td><td align="center"><code>public String(byte[] bytes,int offset,int length)</code></td><td align="center">构造</td><td align="center">将部分字节数组变为字符串</td></tr><tr><td align="center">3</td><td align="center"><code>public byte[] getBytes()</code></td><td align="center">普通方法</td><td align="center">将字符串转为字节数组(其实版本为1.1)</td></tr><tr><td align="center">4</td><td align="center"><code>public byte[] getBytes(String charsetName)                 throws UnsupportedEncodingException</code></td><td align="center">普通方法</td><td align="center">编码转换</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hellowrold&quot;</span> ;<br>        <span class="hljs-type">byte</span> data[] = str.getBytes() ;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; x &lt; data.length ;i ++)&#123;<br>            data[x] -=<span class="hljs-number">32</span>;<br>        &#125;<br>       System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data)) ;<br>       System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)) ;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="36-字符串比较"><a href="#36-字符串比较" class="headerlink" title="36.字符串比较"></a>36.字符串比较</h2><table><thead><tr><th align="center">No</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>public boolean equals(Object anObject)</code></td><td align="center">普通方法</td><td align="center">区分大小写的判断</td></tr><tr><td align="center">2</td><td align="center"><code>public boolean equalsIgnoreCase(String anotherString)</code></td><td align="center">普通方法</td><td align="center">不区分大小写的判断</td></tr><tr><td align="center">3</td><td align="center"><code>public int compareTo(String anotherString)</code></td><td align="center">普通方法</td><td align="center">进行字符串大小比较;返回三种取值: 大于(&gt;0),小于(&lt;0), 等于(&#x3D;0)</td></tr><tr><td align="center">4</td><td align="center"><code>public int compareToIgnoreCase(String str)</code></td><td align="center">普通方法</td><td align="center">不区分大小写进行字符串大小比较</td></tr></tbody></table><p>例: 字符串大小比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;m&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strB</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;M&quot;</span> ;<br>        System.out.println(strA.compareTo(strB));<span class="hljs-comment">//m - M;32</span><br>       <br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mldn&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strB</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mldN&quot;</span> ;<br>        System.out.println(strA.compareTo(strB));<span class="hljs-comment">//n - N;32 </span><br>        System.out.println(strB.compareTo(strA));<span class="hljs-comment">//-32</span><br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>.compareTo(<span class="hljs-string">&quot;hello&quot;</span>));<span class="hljs-comment">//0</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="37-字符串的查找操作"><a href="#37-字符串的查找操作" class="headerlink" title="37.字符串的查找操作"></a>37.字符串的查找操作</h2><table><thead><tr><th align="center">No</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>public boolean contains(CharSequence s)</code></td><td align="center">普通方法</td><td align="center">判断子字字符串是否存在</td></tr><tr><td align="center">2</td><td align="center"><code>public int indexOf(String str)</code></td><td align="center">普通方法</td><td align="center">从头查找指定字符串中的位置,找不到返回-1</td></tr><tr><td align="center">3</td><td align="center"><code>public int indexOf(String str,int fromIndex)</code></td><td align="center">普通方法</td><td align="center">从指定位置查找字符串,由前向后</td></tr><tr><td align="center">4</td><td align="center"><code>public int lastIndexOf(String str)</code></td><td align="center">普通方法</td><td align="center">由后向前查找指定字符串的位置</td></tr><tr><td align="center">5</td><td align="center"><code>public int lastIndexOf(String str,int fromIndex)</code></td><td align="center">普通方法</td><td align="center">从指定位置由后向前查找指定字符串</td></tr><tr><td align="center">6</td><td align="center"><code>public boolean startsWith(String prefix)</code></td><td align="center">普通方法</td><td align="center">判断是否以指定的字符串开头</td></tr><tr><td align="center">7</td><td align="center"><code>public boolean startsWith(String prefix,int toffset)</code></td><td align="center">普通方法</td><td align="center">从指定位置是否以指定字符串开头</td></tr><tr><td align="center">8</td><td align="center"><code>public boolean endsWith(String suffix)</code></td><td align="center">普通方法</td><td align="center">判断是否以指定字符串结尾</td></tr></tbody></table><p>例:判断子字符串是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>        System.out.println(str.contains(<span class="hljs-string">&quot;mldn&quot;</span>)) ;<span class="hljs-comment">//true</span><br>System.out.println(str.contains(<span class="hljs-string">&quot;hello&quot;</span>)) ;<span class="hljs-comment">//false</span><br>      &#125;<span class="hljs-comment">//此方法是jdk1.5之后才有</span><br></code></pre></td></tr></table></figure><p>jdk1.5之前只能使用<code>indexOf()</code>方法来完成</p><p>例:判断子字符串是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>        System.out.println(str.indexOf(<span class="hljs-string">&quot;mldn&quot;</span>)) ;<span class="hljs-comment">//4</span><br>System.out.println(str.indexOf(<span class="hljs-string">&quot;hello&quot;</span>)) ;<span class="hljs-comment">//-1</span><br>        <span class="hljs-keyword">if</span> (str.indexOf(<span class="hljs-string">&quot;mldn&quot;</span>) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;数据存在&quot;</span>) ;<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>也可以用<code>lastIndexOf()</code>查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>        System.out.println(str.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)) ;<span class="hljs-comment">//8</span><br>        System.out.println(str.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-number">5</span>)) ;<span class="hljs-comment">//3</span><br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>例:判断是否以指定的字符串开头和结尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;**@@www.mldn.cn##&quot;</span> ;<br>      System.out.println(str.startsWith(<span class="hljs-string">&quot;**&quot;</span>)) ;<span class="hljs-comment">//true</span><br>        System.out.println(str.startsWith(<span class="hljs-string">&quot;##&quot;</span>)) ;<span class="hljs-comment">//true</span><br>        System.out.println(str.startsWith(<span class="hljs-string">&quot;@@&quot;</span>,<span class="hljs-number">2</span>)) ;<span class="hljs-comment">//true</span><br>        <br>      &#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">No</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>public String replaceAll(String regex,String replacement)</code></td><td align="center">普通</td><td align="center">全部替换</td></tr><tr><td align="center">2</td><td align="center"><code>public String replaceFirst(String regex,String replacement)</code></td><td align="center">普通</td><td align="center">替换首个</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloworld&quot;</span> ;<br>        System.out.println(str.replaceAll(<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>)) ;<span class="hljs-comment">//hexxoworld</span><br>        System.out.println(str.replaceFirst(<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>)) ;<span class="hljs-comment">//hexloworld</span><br>      &#125;<br></code></pre></td></tr></table></figure><h2 id="38-字符串拆分"><a href="#38-字符串拆分" class="headerlink" title="38.字符串拆分"></a>38.字符串拆分</h2><table><thead><tr><th align="center">No</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>public String[] split(String regex)</code></td><td align="center">普通</td><td align="center">按指定的字符串全部拆分</td></tr><tr><td align="center">2</td><td align="center"><code>public String[] split(String regex,int limit)</code></td><td align="center">普通</td><td align="center">按照指定字符串拆分指定个数,后面不拆了</td></tr></tbody></table><p>例: 观察字符串拆分处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world hello mldn&quot;</span> ;<br>    String result [] = str.split(<span class="hljs-string">&quot; &quot;</span>) ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; result.length ; i ++)&#123;<br>            System.out.println(result[i]) ;<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>输出:</p><p>hello</p><p>world</p><p>hello</p><p>mldn</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world hello mldn&quot;</span> ;<br>    String result [] = str.split(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-number">2</span>) ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; result.length ; i ++)&#123;<br>            System.out.println(result[i]) ;<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>输出:</p><p>hello</p><p>world hello mldn</p><p>例:无法拆除的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;192.168.1.1&quot;</span> ;<br>    String result [] = str.split(<span class="hljs-string">&quot;.&quot;</span>) ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; result.length ; i ++)&#123;<br>            System.out.println(result[i]) ;<span class="hljs-comment">//无法拆开,此时可以用&quot;\\&quot;转义</span><br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;192.168.1.1&quot;</span> ;<br>    String result [] = str.split(<span class="hljs-string">&quot;\\.&quot;</span>) ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; result.length ; i ++)&#123;<br>            System.out.println(result[i]) ;<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>输出:</p><p>192</p><p>168</p><p>1</p><p>1</p><h2 id="39-字符串的截取"><a href="#39-字符串的截取" class="headerlink" title="39.字符串的截取"></a>39.字符串的截取</h2><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承本质: 在原有类的功能上继续进行功能的扩充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> String school ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age ;<br>        &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSchool</span><span class="hljs-params">(String school)</span>&#123;<br>        <span class="hljs-built_in">this</span>.school = school ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name ;<br>    &#125;<br>    pubcli String <span class="hljs-title function_">getSchool</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.school ;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>        <span class="hljs-comment">//子类中不定义任何功能</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>        pblic <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>() ;<br>            stu.setName(<span class="hljs-string">&quot;林大强&quot;</span>) ;<span class="hljs-comment">//父类定义</span><br>            stu.setAge(<span class="hljs-number">38</span>) ;<span class="hljs-comment">//弗雷定义</span><br>            System.out.println(<span class="hljs-string">&quot;姓名: &quot;</span> + stu.getName() +<span class="hljs-string">&quot;,年龄: &quot;</span> + sut.getAge() + <span class="hljs-string">&quot;,学校: &quot;</span> + stu.getSchool()) ;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200422201406471.png" alt="image-20200422201406471"></p><p>子类扩充定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> String school ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age ;<br>        &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSchool</span><span class="hljs-params">(String school)</span>&#123;<br>        <span class="hljs-built_in">this</span>.school = school ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name ;<br>    &#125;<br>    pubcli String <span class="hljs-title function_">getSchool</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.school ;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>        <span class="hljs-keyword">private</span> String school ;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSchool</span><span class="hljs-params">(String school)</span>&#123;<br>            <span class="hljs-built_in">this</span>.school = school ;<br>        &#125;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSchool</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.school ;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>        pblic <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>() ;<br>            stu.setName(<span class="hljs-string">&quot;林大强&quot;</span>) ;<span class="hljs-comment">//父类定义</span><br>            stu.setAge(<span class="hljs-number">38</span>) ;<span class="hljs-comment">//弗雷定义</span><br>            stu.setSchool(<span class="hljs-string">&quot;家里蹲大学&quot;</span>) ;<br>            System.out.println(<span class="hljs-string">&quot;姓名: &quot;</span> + stu.getName() +<span class="hljs-string">&quot;,年龄: &quot;</span> + sut.getAge() + <span class="hljs-string">&quot;,学校: &quot;</span> + stu.getSchool()) ;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200422202410210.png" alt="image-20200422202410210"></p><h2 id="41-子类实例化实现流程"><a href="#41-子类实例化实现流程" class="headerlink" title="41.子类实例化实现流程"></a>41.子类实例化实现流程</h2><p>子类实例化时会自动调用父类构造方法</p><p>实际子类构造方法隐藏了super()语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类建立&quot;</span>) ;<br>    &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>() ;<span class="hljs-comment">//写于不写效果一样</span><br>        System.out.println(<span class="hljs-string">&quot;子类建立&quot;</span>) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>() ;<span class="hljs-comment">//实例子类对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>super()表示子类调用父类构造语句,该语句只允许放在构造方法的首行</p><p>默认情况下的处理子类只会调用父类中的无参构造方法,所以写不写<code>super()</code>无影响</p><p>如果父类没有提供无参构造,就必须用<code>super()</code>明确调用有参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>   <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br>    System.out.println(<span class="hljs-string">&quot;父类建立&quot;</span>) ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name ,<span class="hljs-type">int</span> age )</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name ;<br>            <span class="hljs-built_in">this</span>.age = age ;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<span class="hljs-comment">//子类Student</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">school</span> <span class="hljs-operator">=</span> school ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age,String school)</span>&#123;<span class="hljs-comment">//构造方法</span><br>        <span class="hljs-built_in">super</span>(name,age)<span class="hljs-comment">//调用父类构造 ;</span><br>        <span class="hljs-built_in">this</span>.school = school;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林小强&quot;</span>,<span class="hljs-number">48</span>,<span class="hljs-string">&quot;北京大学&quot;</span>) ;<span class="hljs-comment">//实例子类对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以在实例化子类对象时会实例化父类对象,目的时为了所有的属性可以进行空间分配</p><p><code>super()</code>和<code>this()</code>都可以调用构造函数</p><p><code>super()</code>是由子类调用父类构造</p><p><code>this()</code>是调用两类构造</p><p>两个方法都必须放在首行,所以不允许同时出现</p><h2 id="42-继承的限制"><a href="#42-继承的限制" class="headerlink" title="42.继承的限制"></a>42.继承的限制</h2><ul><li><p>java中不允许多重继承,但允许多层继承</p><p>继承理论不能超过三层</p></li><li><p>在继承关系定义的时候,实际上是子类可以继承父类所有的操作结构,但是对于私有操作属于隐式继承,非私有操作属于显示继承</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name ;<br>    &#125;<br>    <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(Strin name)</span>&#123;<br>        setName(name) ;<span class="hljs-comment">//设置name属性内容</span><br>    &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-comment">//System.out.println(name) ;无法直接俄访问</span><br>            System.out.println(getName()) ;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林中强&quot;</span>) ;<br>        stu.fun() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="43-方法覆写"><a href="#43-方法覆写" class="headerlink" title="43.方法覆写"></a>43.方法覆写</h2><p>如果发现父类中设计不足并且需要保留父类中的方法或属性名称的情况下就会发生覆写</p><p>方法覆写:当子类定义了与方法相同,参数类型和个数完全相同的时候,就称为覆写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Channel</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>&#123;<br>        system.out.println(<span class="hljs-string">&quot;channel父类资源连接&quot;</span>) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatavaseChannel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Channel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//覆写</span><br>        System.out.println(<span class="hljs-string">&quot;子类进行数据库资源的连接&quot;</span>) ;       <br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">databaseChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseChannel</span>() ;<br>        channel.connect() ;<span class="hljs-comment">//子类进行数据库资源的连接</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>覆写的意义:优化父类的功能</p><p>覆写之后调用父类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Channel</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>&#123;<br>        system.out.println(<span class="hljs-string">&quot;channel父类资源连接&quot;</span>) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatavaseChannel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Channel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//覆写</span><br>        <span class="hljs-built_in">super</span>.connect()<span class="hljs-comment">//调用父类中的方法</span><br>        System.out.println(<span class="hljs-string">&quot;子类进行数据库资源的连接&quot;</span>) ;       <br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">databaseChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseChannel</span>() ;<br>        channel.connect() ;<span class="hljs-comment">//channel父类资源连接//子类进行数据库资源的连接</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="44-覆写的限制"><a href="#44-覆写的限制" class="headerlink" title="44.覆写的限制"></a>44.覆写的限制</h2><p>被覆写的方法不能不能有比父类更严格的访问权限</p><p>public &gt; default(不写)&gt;private</p><p>如果父类中的方法使用了default定义,子类中的方法只能使用public或defaoult</p><p>如果父类中的方法使用了public定义,子类中的方法只能使用public</p><p>面试题:请解释override与OverLoadding的区别?overloading返回类型是否相同</p><table><thead><tr><th>No</th><th>区别</th><th>overloading</th><th>override</th></tr></thead><tbody><tr><td>1</td><td>中文含义</td><td>重载</td><td>覆写</td></tr><tr><td>2</td><td>概念</td><td>方法名称相同,参数的类型及个数不同</td><td>方法名称,参数类型及个数,返回值相同</td></tr><tr><td>3</td><td>权限</td><td>没有权限限制</td><td>覆写方法不能拥有更严格的控制权限</td></tr><tr><td>4</td><td>范围</td><td>发生在一个类中</td><td>发生在继承关系类中</td></tr></tbody></table><p>在进行方法重载的时候没有规定返回类型是否相同,但还是应该尽量保持一直</p><h2 id="45-属性覆盖"><a href="#45-属性覆盖" class="headerlink" title="45.属性覆盖"></a>45.属性覆盖</h2><p>面试题:请解释<code>super</code>与<code>this</code>的区别</p><ul><li><p>在程序中使用this表示先从本类查找所需要的属性或方法,如果不存在,则查找父类</p><p><code>super</code>zhi节查找父类</p></li><li><p>this与super都进行构造方法的调用,但this()调用本类构造,super()调用父类构造,且两个语句都必须放在首行,所以不能同时出现</p></li><li><p>this可以表示当前对象</p></li></ul><h2 id="46-final关键字"><a href="#46-final关键字" class="headerlink" title="46.final关键字"></a>46.final关键字</h2><p>final可以定义不能被继承的类,不能被覆写的方法和常量</p><p>例:使用final定义不能被继承的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Channel</span> &#123;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseChannel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Channel</span> &#123;<span class="hljs-comment">//错误</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例:定义不能被覆写的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Channel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseChannel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Channel</span> &#123;<span class="hljs-comment">//错误</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>全局常量：<code>public static final 数据类型 常量名</code> 定义常量名必须大写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Channel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ON</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>&#123;<br>        ON = <span class="hljs-number">2</span> ;<span class="hljs-comment">//错误❌无法该变</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="47-Annotation注解"><a href="#47-Annotation注解" class="headerlink" title="47.Annotation注解"></a>47.Annotation注解</h2><p>以注解的形式开发</p><p>java提供的基本注解@Override、@Deprecated、@SuppressWarnings</p><h3 id="准确的覆写：-Override"><a href="#准确的覆写：-Override" class="headerlink" title="准确的覆写：@Override"></a>准确的覆写：@Override</h3><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Channel</span> &#123;<br>    publicvoid <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;channel&quot;</span>) ;<br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseChannel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Channel</span> &#123;<br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//表明覆写的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类定义的通道连接操作&quot;</span>) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DAtabaseChannel</span>().connect() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注解主要时帮助开发者在编译的时候</p><h3 id="过期操作-Deprecated"><a href="#过期操作-Deprecated" class="headerlink" title="过期操作@Deprecated"></a>过期操作@Deprecated</h3><p>过期操作是指在一个软件项目的迭代开发过程中，可能有某一个方法或某一个类，在最初设计的时候考虑不周，导致新版本的应用有不适应的地方，这个时候又不可能直接删除这些操作，希望有一个过度的时间，于是就采用过期声明，告诉新用户不要再用了，老用户可以用，这样的方法就必须</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Channel</span> &#123;<br>    <span class="hljs-meta">@Deprecated</span><span class="hljs-comment">//老系统继续用，新系统就不要再用了</span><br>    publicvoid <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;channel&quot;</span>) ;        <br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">connection</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;获取了xxx通道连接信息&quot;</span> ;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Channel</span>().connect() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="压制警告-SuppressWarings"><a href="#压制警告-SuppressWarings" class="headerlink" title="压制警告@SuppressWarings"></a>压制警告@SuppressWarings</h3><p>作用：让警告信息不出现</p><h2 id="48-多态"><a href="#48-多态" class="headerlink" title="48.多态"></a>48.多态</h2><ul><li>方法多态性：<ul><li>方法重载：同一个方法名称可以根据传入参数的类型和个数的不同完成不同的功能</li><li>方法覆写：同一个方法根据使用子类的不同有所改变。</li></ul></li><li>对象多态：父子实例之间的转化处理<ul><li>对象向上转型模式（接收或返回参数的同一性）：父类 父类实例 &#x3D; 子类实例、自动完成转化</li><li>对象向下转型模式（子类自己特殊的定义环境）：子类 子类实例 &#x3D; （子类）覅类实例、强制完成转化</li></ul></li></ul><p>向上转型可以对参数进行同一设计</p><p>向下转型范例程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;正常人类&quot;</span>) ；<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperMan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;i can fly&quot;</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;i can fire&quot;</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">per</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperMan</span>(); <br>        <span class="hljs-comment">//向上转型；若此处为“ Person per = new SuperMan()”则会出错，本质是普通人不能装超人</span><br>        per.print() ;<br>        <span class="hljs-type">SuperMan</span> <span class="hljs-variable">man</span> <span class="hljs-operator">=</span> (SuperMan) per ;<span class="hljs-comment">//向下转型</span><br>        System.out.println(man.fly()) ;<br>        System.out.println(man.fire()) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>向下转型前先要向上转型，两个无任何关系的实例强制转化会出现<code>ClassCastException</code>异常，所以向下转型并不安全。</p><h2 id="49-instanceof关键字"><a href="#49-instanceof关键字" class="headerlink" title="49.instanceof关键字"></a>49.instanceof关键字</h2><p>向下转型前需要判断某个实例是否是某个类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">对象 <span class="hljs-keyword">instanceof</span> 类；<br></code></pre></td></tr></table></figure><p>返回true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;正常人类&quot;</span>) ；<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperMan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;i can fly&quot;</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;i can fire&quot;</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">perA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>() ;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">perB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperMan</span>() ; <br>        <br>        System.out.println(perA <span class="hljs-keyword">instanceof</span> Person) ;<span class="hljs-comment">//true </span><br>        System.out.println(perA <span class="hljs-keyword">instanceof</span> SuperMan) ;<span class="hljs-comment">//false；无法进行强制转处理    </span><br>        <br>        System.out.println(perB <span class="hljs-keyword">instanceof</span> Person) ;<span class="hljs-comment">//true </span><br>        System.out.println(perB <span class="hljs-keyword">instanceof</span> SuperMan) ;<span class="hljs-comment">//true；</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="50-Object类"><a href="#50-Object类" class="headerlink" title="50.Object类"></a>50.Object类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>() ;<span class="hljs-comment">//向上转型</span><br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Person)&#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">per</span> <span class="hljs-operator">=</span> (Person) obj ;<span class="hljs-comment">//向下转型</span><br>            System.out.println(<span class="hljs-string">&quot;Person对象向下转型执行完毕&quot;</span>) ;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span> &#123;<br>     <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; ;<span class="hljs-comment">//向上转型</span><br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-type">int</span> []) &#123;<span class="hljs-comment">//是否为整型数组</span><br>            <span class="hljs-type">int</span> data [] = (<span class="hljs-type">int</span> []) obj ;<span class="hljs-comment">//向下转型</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> temp : data) &#123;<br>                System.out.print( temp+<span class="hljs-string">&quot; 、&quot;</span>) ;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Object是万能数据类型，更适合程序标准设计</p><h2 id="50-获取对象信息"><a href="#50-获取对象信息" class="headerlink" title="50.获取对象信息"></a>50.获取对象信息</h2><p><code>toString</code>可以获得对象的完整信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name ,<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name ;<br>        <span class="hljs-built_in">this</span>.age = age ;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String to <span class="hljs-title function_">String</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;、年龄：&quot;</span> + <span class="hljs-built_in">this</span>.age ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span> &#123;<br>   <span class="hljs-type">Person</span> <span class="hljs-variable">per</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>() ;<br>        System.out.println(per) ;<br>        System.out.println(per.toString());<br>        <span class="hljs-comment">//Object继承而来，print语句默认调用toString方法所以可以进行覆写</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="51-对象比较"><a href="#51-对象比较" class="headerlink" title="51.对象比较"></a>51.对象比较</h2><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name ,<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name ;<br>        <span class="hljs-built_in">this</span>.age = age ;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String to <span class="hljs-title function_">String</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;、年龄：&quot;</span> + <span class="hljs-built_in">this</span>.age ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span> &#123;<br><span class="hljs-type">Person</span> <span class="hljs-variable">perA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>) ;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">perB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>) ;<br>        <span class="hljs-keyword">if</span> (gperA.getName().equals(perB.getName())&amp;&amp;perA.getAge() == perB.getAge())&#123;<br>            System.out.println(<span class="hljs-string">&quot;是同一个对象&quot;</span>) ;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不是同一个对象&quot;</span>) ;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>由于需要对象比较时需要对每一个属性进行判断，所以再外部要调用大量的get方法</p></li><li><p>对象比较应该是内部具备的功能，而不应该在外部定义：</p></li><li><p>对象比较<code>public boolean equals(Object obj)</code> 可以接收所有类型，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span>&#123;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-built_in">this</span> == obj) ;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>默认情况下该方法只是进行了两个对象的地址判断，若想正确实现判断处理，那么就必须要在子类中服下此方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name ,<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name ;<br>        <span class="hljs-built_in">this</span>.age = age ;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String to <span class="hljs-title function_">String</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;、年龄：&quot;</span> + <span class="hljs-built_in">this</span>.age ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age ;<br>    &#125;<br>    <span class="hljs-comment">//equals()方法这个时候会有两个对象：当前对象this、传入的Object</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span>(obj == <span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//不关心传空</span><br>            reutrn <span class="hljs-literal">false</span> ;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj )&#123;<span class="hljs-comment">//同一个地址</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (! (obj <span class="hljs-keyword">instanceof</span> Person))&#123;<span class="hljs-comment">//和其他类进行比较时返回false</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<br>        &#125;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">per</span> <span class="hljs-operator">=</span>  (person) obj ;<span class="hljs-comment">//目的是为了获取类中的属性</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name,equals(per.name) &amp;&amp; <span class="hljs-built_in">this</span>.age ==per.age ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span> &#123;<br><span class="hljs-type">Person</span> <span class="hljs-variable">perA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>) ;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">perB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>) ;<br>        System.out.println(perA.equals(perB)) ;<span class="hljs-comment">//true</span><br>        System.out.println(perA.equals(<span class="hljs-literal">null</span>)) ;<span class="hljs-comment">//false</span><br>        System.out.println(perA.equals(perA)) ;<span class="hljs-comment">//false</span><br>        System.out.println(perA.equals(<span class="hljs-string">&quot;狗&quot;</span>)) ;<span class="hljs-comment">//false</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中String类中已经覆写了<code>equals()</code>方法</p><h2 id="52-抽象类"><a href="#52-抽象类" class="headerlink" title="52.抽象类"></a>52.抽象类</h2><p>抽象类的主要作用在于对子类中覆写方法进行约定，在抽象类中可以定义抽象方法实现这样的约定，抽象方法指的是使用了<code>abstract</code>关键字定义的并且没有提供方法体的方法，而抽象方法所在的类必须为抽象类，抽象类必须使用<code>abstract</code>关键字定义</p><p>例：定义一个抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>    <span class="hljs-keyword">private</span> String type ;<span class="hljs-comment">//消息类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getConnectInfo</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//普通方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.type ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String args [])</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>抽象类不是完整的类</strong></p><p>抽象类的使用必须按照以下原则进行</p><ul><li>抽象类必须提供子类，子类使用<code>extends</code>继承一个抽象类；</li><li>抽象类的子类（不是抽象类）一定要覆写抽象类中的全部抽象方法；</li><li>抽象类的对象实例化可以利用对象多态性通过子类向上转型的方式完成。</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>    <span class="hljs-keyword">private</span> String type ;<span class="hljs-comment">//消息类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getConnectInfo</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//普通方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.type ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseMessage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Message</span> &#123; <span class="hljs-comment">//类的继承关系</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DatabaseMessage</span><span class="hljs-params">(String str )</span>&#123;<br>         <span class="hljs-built_in">super</span>(str) ;<br>     &#125;<br>     <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConnectInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Oracle数据库连接信息&quot;</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String args [])</span>&#123;<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DagabaseMessage</span>(<span class="hljs-string">&quot;客户消息&quot;</span>) ;<br>        System.out.println(msg.getConnectInfo()) ;<br>        System.out.println(msg.getType()) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>抽象类使用意见：</p><ul><li>抽象类无法直接实例化</li><li>抽象类主要目的时进行过度操作使用，所以当使用抽象类进行开发的时候往往是设计中需要解决类继承问题时带来的代码重复</li></ul><p>抽象类使用时需要注意的问题：</p><ul><li>定义时不能使用<code>final</code>关键字</li><li>抽象类是普通类的基础上扩展而来的，抽象类会提供构造方法，并且子类也会按照子类对象的实例化原则进行父类构造调用。 </li><li>抽象类中允许没有抽象方法，也无法直接使用关键字new实例化抽象方法，必须依靠子类对象完成</li><li>抽象类可以提供又static方法，并且该方法不受到抽象类对象的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>    <span class="hljs-keyword">private</span> String type ;<span class="hljs-comment">//消息类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(String type)</span> &#123;<span class="hljs-comment">//类中没有提供无参构造</span><br>        <span class="hljs-built_in">this</span>.type = type ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getConnectInfo</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//普通方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.type ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseMessage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Message</span> &#123; <span class="hljs-comment">//类的继承关系</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConnectInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Oracle数据库连接信息&quot;</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String args [])</span>&#123;<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DagabaseMessage</span>() ;<br>        msg.setType(<span class="hljs-string">&quot;客户消息&quot;</span>) ;<br>        System.out.println(msg.getConnectInfo()) ;<br>        System.out.println(msg.getType()) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<span class="hljs-comment">//定义抽象类</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Message <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseMessage</span>() ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseMessage</span> extendsMessage &#123;<span class="hljs-comment">//继承关系</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mian</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> Message.getInstance() ;<br>        System.out.println(msg.getInfo()) ;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>static</code>方法不受到实例化对象或结构的限制，可以直接通过类名称进行调用</p><h2 id="53-模板设计模式"><a href="#53-模板设计模式" class="headerlink" title="53.模板设计模式"></a>53.模板设计模式</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Action</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">EAT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SLEEP</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">WORK</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">command</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>        <span class="hljs-keyword">case</span> EAT :&#123;<br>            <span class="hljs-built_in">this</span>.eat() ;<br>            <span class="hljs-keyword">break</span> ;<br>        &#125;<br>        <span class="hljs-keyword">case</span> SLEEP : &#123;<br>            tis.sleep() ;<br>            <span class="hljs-keyword">break</span> ;<br>        &#125;<br>        <span class="hljs-keyword">case</span> WORK ;&#123;<br>            <span class="hljs-built_in">this</span>.work ;<br>            <span class="hljs-keyword">break</span> ;<br>        &#125;<br>        <span class="hljs-keyword">case</span> EAT + SLEEP + WORK : &#123;<br>            <span class="hljs-built_in">this</span>.eat() ;<br>            <span class="hljs-built_in">this</span>.sleep() ;<br>            <span class="hljs-built_in">this</span>.work() ;<br>            <span class="hljs-keyword">break</span> ;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> ;<br>    <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Action</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;机器人需要接通电源充电&quot;</span>) ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;机器人按照固定的套路进行工作。&quot;</span>) ;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Action</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;饿的时候安静地坐下吃饭&quot;</span>) ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;安静地躺下，慢慢地睡着，做美丽的梦&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;人是高级闹类动物，所有要有想法地工作。&quot;</span>) ;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Action</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃食槽中人类的剩饭。&quot;</span>) ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<span class="hljs-string">&quot;倒地就睡&quot;</span>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Action</span> <span class="hljs-variable">robotAction</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Robot</span>();<br>        <span class="hljs-type">Action</span> <span class="hljs-variable">personAction</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-type">Action</span> <span class="hljs-variable">pigAction</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pig</span>();<br>        System.out.println(<span class="hljs-string">&quot;---------- 机器人行为 -----------&quot;</span>) ;<br>        robotAction.command(Action.SLEEP) ;    <br>        robotAction.command(Action.WORK) ;<br>        System.out.println(<span class="hljs-string">&quot;---------- 人类行为 -----------&quot;</span>) ;<br>        robotAction.command(Action.SLEEP +Action.EAT + Action.WORK) ;<br>         System.out.println(<span class="hljs-string">&quot;---------- 猪的行为 -----------&quot;</span>) ;<br>        pigAction.command(Action.EAT) ;    <br>        pigAction.command(Action.WORK) ;      <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此程序完整实现了行为的抽象处理，定义<code>Action</code>父类的目的：对所有行为规范进行统一处理</p><p>抽象类的好处：</p><ul><li>对子类方法的同一管理</li><li>提供一些普通方法可以调用抽象方法（这些抽像方法必须在有子类提供实现的时候才会生效）。</li></ul><h2 id="54-包装类"><a href="#54-包装类" class="headerlink" title="54.包装类"></a>54.包装类</h2><p>基本数据类型并不是类，如果像将基本数据类型以类的形式处理，那需要对其进行包装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Int</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> data ; <span class="hljs-comment">//包装了一个基本数据类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Int</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data - data ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> intValue) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data ;<br>    &#125;<br> &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>      <span class="hljs-type">Int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int</span>(<span class="hljs-number">10</span>) ;<span class="hljs-comment">//装箱 ： 将基本数据类型保存在包装</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> ((Int)obj).intValue() ;<span class="hljs-comment">//拆箱：从包装类对象中获取基本数据</span><br>      System.out.println(x * <span class="hljs-number">2</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基本数据类型进行包装处理后可以像对象一样进行引用传递，同时也可以使用Object来接受。</p><p>所以在JDK1.0时提出了包装类的概念，提供八种包装类</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200426165644832.png" alt="image-20200426165644832"></p><p>JAVA中包装类分为两种类型：</p><ul><li>对象型包装类（Object直接子类）：Boolean、character；</li><li>数值型的包装类（Number直接子类）：Byte、Short、Integer、Long、Float、Double</li></ul><p>Number是一个抽象类，定义有如下方法</p><table><thead><tr><th>No</th><th>方法名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public byte byteValue()</code></td><td>普通</td><td>从包装类型中获取byte数据</td></tr><tr><td>2</td><td><code>public short shortValue()</code></td><td>普通</td><td>从包装类型中获取short数据</td></tr><tr><td>3</td><td><code>public abstract int intValue()</code></td><td>普通</td><td>从包装类型中获取int数据</td></tr><tr><td>4</td><td><code>public abstract long longValue()</code></td><td>普通</td><td>从包装类型中获取long数据</td></tr><tr><td>5</td><td><code>public abstract float floatValue()</code></td><td>普通</td><td>从包装类型中获取float数据</td></tr><tr><td>6</td><td><code>public abstract double doubleValue()</code></td><td>普通</td><td>从包装类型中获取double数据</td></tr></tbody></table><p><code>Number</code>类中的方法就是直接提供有获取包装类中基本数据类型的功能，一共之定义有六个方法。</p><h2 id="55-装箱与拆箱操作"><a href="#55-装箱与拆箱操作" class="headerlink" title="55.装箱与拆箱操作"></a>55.装箱与拆箱操作</h2><ul><li>数据装箱：将基本数据类型保存到包装类之中，一般可以利用构造方法完整<ul><li>Integer类：<code>public Intege(int value);</code></li><li>Double类：<code>public Double(double value);</code></li><li>Boolean类：<code>public Boolean(boolean value);</code></li></ul></li><li>数据拆箱：从包装类中获取基本数据类型：<ul><li>数值型包装类已经由Number定义拆箱方法了；</li><li>Boolean型：<code>public boolean booleanValue();</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(Stirng args[])</span>&#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Interger</span>(<span class="hljs-number">10</span>) ;<span class="hljs-comment">//装箱</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> obj.intValue() ;<span class="hljs-comment">//拆箱</span><br>        System.out.println(num * num) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(Stirng args[])</span>&#123;<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">10</span>) ;<span class="hljs-comment">//装箱</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> obj.doubleValue() ;<span class="hljs-comment">//拆箱</span><br>        System.out.println(num * num) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(Stirng args[])</span>&#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-number">10</span>) ;<span class="hljs-comment">//装箱</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> obj.booleanValue() ;<span class="hljs-comment">//拆箱</span><br>        System.out.println(num * num) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>JDK1.5之后为了方便处理提供了自动的装箱、拆箱操作，所以JDK1.9之后所有包装类之中提供的构造方法就变为了过期处理，这种手工模式基本没人使用</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(Stirng args[])</span>&#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> ；<span class="hljs-comment">//自动装箱，此时不再关心构造方法</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> obj ;<span class="hljs-comment">//自动拆箱</span><br>        obj ++ ；<span class="hljs-comment">//包装类对象可以直接参与数学运算</span><br>        System.out.printlen(num * obj) ;<span class="hljs-comment">//直接参数与数学运算</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自动装箱的好处是实现Object接收基本数据类型的操作</p><p>例：Object接收小数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span>&#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-number">19.2</span> ; <span class="hljs-comment">//double自动装箱为Double,向上转型为Object</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (Double) obj ;<span class="hljs-comment">//向下转型为包装类在再动拆箱</span><br>   System.out.println(num * <span class="hljs-number">2</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：相等判断处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span>&#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span> ;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span> ;<br>        <br>        System.out.println(x == y) ;<span class="hljs-comment">//false</span><br>        System.out.println(x.equals(y) ;<span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>包装类相等判断时一定要使用 <code>equals()</code> ，包装类需要考虑占位长度，如果超过了一位的内容，需要 <code>equals()</code> 比较，如果没超过就使用 <code>==</code> 判断</p><h2 id="56-接口"><a href="#56-接口" class="headerlink" title="56.接口"></a>56.接口</h2><p>抽象类与普通类相比可以实现对子类覆写方法的控制，但抽象类中可以保留普通方法，但普通方法可能有设计安全或隐私的问题，那么这样在进行开发过程中，如果想要对外隐藏全部的实现细节，可以通过接口来进行描述。</p><p>接口可以理解为一个纯粹的抽象类（接口中只包含抽象方法与全局常量），但是从JDK1.8开始引入了Lambda表达式的概念，所以接口的定义也得到了加强，除了抽象方法与全局常量之外，还可以定义普通方法或静态方法。</p><p>从设计本身角度来讲，接口之中的组成还是应该以抽象方法和全局常量为主。</p><p>在Java中接口主要使用interface关键字来进行定义。</p><p>例；定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<span class="hljs-comment">//定义接口。为了区分出接口往往在接口名前加入I</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INFO</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<span class="hljs-comment">//全局常量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//抽象方法</span><br>&#125;<br>publci <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时接口无法产生实例化对象</p><p><font color = "red">接口使用的原则</font></p><ul><li>接口需要被子类实现（<code>implements</code>）一个接口可以实现多个父接口；</li><li>子类如果不是抽象类，则一定要覆写接口中的全部抽象方法；</li><li>接口对象可以利用子类对象的向上转型进行实例化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<span class="hljs-comment">//定义接口。为了区分出接口往往在接口名前加入I</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INFO</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<span class="hljs-comment">//全局常量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//抽象方法</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;得到了一个消息&quot;</span><br>    &#125;<br>&#125;<br>publci <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">IMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageImpl</span>() ;<br>        System.out.println(msg.getInfo()) ;<br>        System.out.println(IMessage.INFO) ;<span class="hljs-comment">//直接输出全局常量</span><br>    &#125;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><p>Java使用接口的原因：利用接口可以实现多继承的概念</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<span class="hljs-comment">//定义接口。为了区分出接口往往在接口名前加入I</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INFO</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<span class="hljs-comment">//全局常量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//抽象方法</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IChannel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connect</span> <span class="hljs-params">()</span> ;<span class="hljs-comment">//定义抽象方法</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessage</span>,IChannel  &#123;<span class="hljs-comment">//实现接口</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.connect())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;得到了一个消息&quot;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;创建失败,无法发获取消息&quot;</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;消息发送通道已经成功&quot;</span>) ;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>    &#125;<br>&#125;<br>publci <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">IMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageImpl</span>() ;<br>        System.out.println(msg.getInfo()) ;<br>       <br>    &#125;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><p>关于对象转型的问题</p><p>java中接口不允许继承父类，所以接口不是Object的子类，但Object可以接收接口</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200428084841750.png" alt="image-20200428084841750"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<span class="hljs-comment">//定义接口。为了区分出接口往往在接口名前加入I</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> fianl  <span class="hljs-type">String</span> <span class="hljs-variable">INFO</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<span class="hljs-comment">//全局常量</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//抽象方法</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IChannel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connect</span> <span class="hljs-params">()</span> ;<span class="hljs-comment">//定义抽象方法</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessage</span>,IChannel  &#123;<span class="hljs-comment">//实现接口</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.connect())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;得到了一个消息&quot;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;创建失败,无法发获取消息&quot;</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;消息发送通道已经成功&quot;</span>) ;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>    &#125;<br>&#125;<br>publci <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">IMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageImpl</span>() ;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> msg ;<span class="hljs-comment">//向上转型</span><br>        System.out.println(msg.getInfo()) ;<br>     <span class="hljs-type">IChannel</span> <span class="hljs-variable">chan</span> <span class="hljs-operator">=</span> (IChannel) obj ;  <br>    &#125;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><p>Object类可以接收所有数据类型，包括基本数据类型、类对象、接口对象、数组。</p><p>由于接口描述的是一个公共的定义标准，所以在接口之中所有的抽象方法的访问权限都为public，也就是说写于不写都是一样的，例：</p><table><thead><tr><th>完整定义</th><th>简化</th></tr></thead><tbody><tr><td><img src="https://gitee.com/jeremy_ne/giteePagesImages/raw/master/image-20200428085727309.png" alt="image-20200428085727309"></td><td><img src="https://gitee.com/jeremy_ne/giteePagesImages/raw/master/image-20200428085502192.png" alt="image-20200428085502192"></td></tr></tbody></table><p>方法不写访问权限也是public，不是default</p><p>一个抽象类可以实现多个接口，而一个普通类只能继承一个抽象类并且可以实现多个父接口，但要求先继承后实现</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<span class="hljs-comment">//定义接口。为了区分出接口往往在接口名前加入I</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> fianl  <span class="hljs-type">String</span> <span class="hljs-variable">INFO</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<span class="hljs-comment">//全局常量</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//抽象方法</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IChannel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connect</span> <span class="hljs-params">()</span> ;<span class="hljs-comment">//定义抽象方法</span><br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseAbstract</span> &#123;<br>    <span class="hljs-comment">//定义抽象类</span><br>    <span class="hljs-comment">//接口中的abstract可以省略，抽象类中不允许省略</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getDatabaseConnection</span><span class="hljs-params">()</span> ;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DatabaseAbstract</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessage</span>,IChannel  &#123;<span class="hljs-comment">//实现接口</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.connect())&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getDatabaseConnection()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;得到了一个消息&quot;</span><br>           &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;数据库消息无法访问&quot;</span> ；<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;创建失败,无法发获取消息&quot;</span> ;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;消息发送通道已经成功&quot;</span>) ;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getDatabaseConnection</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>    &#125;<br>&#125;<br><br>publci <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        IMessage msg<br>    &#125;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><p>接口无法继承父类，但一个接口可以通过extends继承实现若干个父接口，此时称为接口多继承</p><p>例：实现接口多继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> ;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IChannel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> ;<br>&#125;<br><span class="hljs-comment">//extends在继承上只能继承一个父类，但接口可以继承多个</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IMessage</span>,IChannel &#123;<span class="hljs-comment">//接口多继承</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">service</span><span class="hljs-params">()</span> ;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">service</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;获取消息服务&quot;</span> ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在实际开发中，接口有三种使用形式</p><ul><li>进行标准设置</li><li>表示一种操作能力</li><li>暴露远程方法视图，这个一般都在RPC分布式开发中使用</li></ul><p>JDK1.8之后接口之中允许开发者定义普通方法</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//公共方法 都具备&#125; ;</span><br>System。out.println(<span class="hljs-string">&quot;建立消息通道&quot;</span>) ；<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>    &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">IMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(msg.message()) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接口中的普通方法需要加default功能，该方法属于挽救功能，不应该作为设计首选</strong></p><p><strong>除了追加普通方法外，接口里面也可以定义static方法，而static方法可以通过接口直接调用</strong></p><p>例：在接口中调用static方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//公共方法 都具备&#125; ;</span><br>System。out.println(<span class="hljs-string">&quot;建立消息通道&quot;</span>) ；<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>         <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IMessage <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageImpl</span>() ;<span class="hljs-comment">//获得子类对象</span><br>    &#125;<br>    &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.connect()) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ; <br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;没有消息发送&quot;</span> ;<br>    &#125;<br>   <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">IMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(msg.message()) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但不因该讲这两个组成作为接口主要设计原则。</p><h2 id="57-使用接口定义标准"><a href="#57-使用接口定义标准" class="headerlink" title="57.使用接口定义标准"></a>57.使用接口定义标准</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUSB</span> &#123;<span class="hljs-comment">//定义USB标准 </span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">()</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> ;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">plugin</span><span class="hljs-params">(IUSB usb)</span> &#123;<span class="hljs-comment">//检查是否可以工作</span><br>    <span class="hljs-keyword">if</span> (usb.check()) &#123;<br>            usb.work();  <span class="hljs-comment">//开始工作</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;硬件设备安装出现了问题，无法使用&quot;</span>)  ;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Keyboard</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUSB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        system.out.println(<span class="hljs-string">&quot;开始进行打字任务。&quot;</span>) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Print</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUSB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始打印&quot;</span>) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>       <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>() ;<br>        computer.plugin(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Keyboard</span>()) ;<span class="hljs-comment">//插入打印机</span><br>        computer.plugin(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Print</span>()) ;<span class="hljs-comment">//插入打印机</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="58-工厂设计模式"><a href="#58-工厂设计模式" class="headerlink" title="58.工厂设计模式"></a>58.工厂设计模式</h2><p>对象实例化的过程中也可能存子设计问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFood</span> &#123;<span class="hljs-comment">//定义一个食物的标准</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">eat</span> <span class="hljs-params">()</span> ;<span class="hljs-comment">//吃</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IFood</span> &#123;<span class="hljs-comment">//定义一种食物</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;翅脉年报。&quot;</span>) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>       <span class="hljs-type">IFood</span> <span class="hljs-variable">food</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bread</span>() ;<br>        food.eat() ;<span class="hljs-comment">//吃面包</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在本程序之中根据接口进行子类的定义，并利用对象向上转型进行接口对象处理，而此时程序结构如下</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200428225525752.png" alt="image-20200428225525752"></p><p>造成耦合问题，关键字<code>new</code>。java可移植性的关键：JVM，而JVM的核心原理：利用一个虚拟机来运行java程序，所有程序并不与操作系统有任何关联，而是由JVM来匹配，所以应该避免耦合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFood</span> &#123;<span class="hljs-comment">//定义一个食物的标准</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">eat</span> <span class="hljs-params">()</span> ;<span class="hljs-comment">//吃</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IFood</span> &#123;<span class="hljs-comment">//定义一种食物</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;翅脉年报。&quot;</span>) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IFood <span class="hljs-title function_">getInstatnce</span><span class="hljs-params">(String className)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;bread&quot;</span>.equals(className)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bread</span>() ;<br>        &#125;<br>        <span class="hljs-keyword">else</span> If(<span class="hljs-string">&quot;milk&quot;</span>.eqauls(className)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Milk</span>() ;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>       <span class="hljs-type">IFood</span> <span class="hljs-variable">food</span> <span class="hljs-operator">=</span> Factory.getInstance(args[<span class="hljs-number">0</span>]) ;<br>        food.eat() ;<span class="hljs-comment">//吃面包</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 在本程序中，客户端程序类与IFood接口的子类没有任何关联，所有的关联都是factory类完成的，在程序运行时，可以通过初始化参数进行要使用的子类定义：</p><ul><li>java JavaDemo bread</li><li>java JavaDemo milk</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200428230916319.png" alt="image-20200428230916319"></p><p>日后进行子类扩充的时候只需要修改Factory程序类即可实现</p><h2 id="58-代理设计模式"><a href="#58-代理设计模式" class="headerlink" title="58.代理设计模式"></a>58.代理设计模式</h2><p>可以帮助用户讲所有开发注意力几种在核心业务功能上。</p><p>列：实现代理设计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IEat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> ;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EatReal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IEat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span> <span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;真实主题：得到一份食物&quot;</span>) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EatProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IEat</span> &#123;<span class="hljs-comment">//服务代理</span><br>    <span class="hljs-keyword">private</span> IEat eat ;<span class="hljs-comment">//为吃而服务</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EatProxy</span><span class="hljs-params">(IEat eat)</span> &#123;<span class="hljs-comment">//一定要有一个代理项</span><br>    <span class="hljs-built_in">this</span>.eat = eat ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.prepare() ;<br>        <span class="hljs-built_in">this</span>.eat.get() ;<br>        <span class="hljs-built_in">this</span>.clear() ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//准备过程</span><br>    System.out.println(<span class="hljs-string">&quot;代理主题：1、精心购买食材。&quot;</span>) ;<br>    System.out.println(<span class="hljs-string">&quot;代理主题：2、小心处理食材。&quot;</span>) ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;代理主题：3、收拾碗筷&quot;</span>) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">IEat</span> <span class="hljs-variable">eat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EatProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EatReal</span>) ;<br>        eat.get() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理设计模式特点：一个接口提供两个子类，期中一个子类是正是业务操作类，另外一个主题是代理业务操作类</p><p>，没有代理业务操作，真实业务无法进行。</p><h2 id="59-抽象类和接口的区别"><a href="#59-抽象类和接口的区别" class="headerlink" title="59.抽象类和接口的区别"></a>59.抽象类和接口的区别</h2><table><thead><tr><th>No</th><th>区别</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>1</td><td>定义</td><td><code>abstract class 抽象类名称&#123;&#125;</code></td><td><code>interface  接口名称&#123;&#125;</code></td></tr><tr><td>2</td><td>组成</td><td>构造、普通方法、静态方法、全局常量、普通成员、static方法</td><td>抽象方法、全局常量、普通方法、static方法</td></tr><tr><td>3</td><td>权限</td><td>各种权限</td><td>只能使用public</td></tr><tr><td>4</td><td>子类使用</td><td>子类可以通过extends关键字继承一个抽象类</td><td>子类使用implements关键字可以实现多个接口</td></tr><tr><td>5</td><td>两者关系</td><td>抽象类可以实现若干个接口</td><td>接口不允许继承抽象类，但是允许继承多个父接口</td></tr><tr><td>6</td><td>使用</td><td>1. 抽象类或接口必须定义子类；<br />2、子类一定要覆写抽象类或接口中的全部抽象方法；<br />3、通过子类向上转型实现抽象类或接口中的全部抽象方法。</td><td>1. 抽象类或接口必须定义子类；<br />2、子类一定要覆写抽象类或接口中的全部抽象方法；<br />3、通过子类向上转型实现抽象类或接口中的全部抽象方法。</td></tr></tbody></table><p>当抽象类和接口都可以使用的情况下，优先考虑接口，接口可以避免子类的单继承</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200429092955801.png" alt="image-20200429092955801"></p><h2 id="范类"><a href="#范类" class="headerlink" title="范类"></a>范类</h2><h2 id="60-包"><a href="#60-包" class="headerlink" title="60.包"></a>60.包</h2><p>JDK1.5开始对于类中的全部由静态方法提供的特殊类是可以采用静态导入处理</p><p>列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> 包名称.类名称 ;<br></code></pre></td></tr></table></figure><p>当使用了静态导入处理之后就好比该方法时直接定义在主类中的，可以由主方法直接调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> 包名称.类名称 ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMath</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="61-jar命令"><a href="#61-jar命令" class="headerlink" title="61.jar命令"></a>61.jar命令</h2><p>大量的*.class文件，可以利用特殊的压缩结构进行处理，这样的结构在Java之中被称为jar文件，可以使用jar命令打包jar文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;jar --<span class="hljs-built_in">help</span>//查看帮助文档<br></code></pre></td></tr></table></figure><p>流程：</p><ol><li><p>定义程序类</p></li><li><p>编译与打包处理</p><ul><li>对程序打包编译<code>&gt;javac -d . 类名称C.java</code></li><li>此时会形成包名为x的包，其中有相应的子包与*.class文件，将其打包 <code>jar -cvf 包名y.jar 包名x ; </code></li></ul><blockquote><p><code>-c</code>：创建一个新的jar文件;</p><p><code>-v</code>：得到一个详细输出；</p><p><code>-f</code>：设置要生成的jar文件名称</p></blockquote></li></ol><p>MATE-IFN;jar文件的说明文件</p><ol start="3"><li>每一个<code>*.jar</code>文件都是一个独立的程序路径，如果想在Java程序之中使用此路径，则必须通过classpath配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;SET CLASSPATH =.;d:\...   <br></code></pre></td></tr></table></figure><p>此处加绝对路径</p><ol start="4"><li>建立测试类，直接导入Message类并且调用方法</li></ol><p>之后就可以正常编译TestMessage类并且使用这两个类</p><p>JDK1.9之后提供了模块化设计，将原本很大的需要加载的*.jar文件编程若干个文件</p><h2 id="62-系统常用包"><a href="#62-系统常用包" class="headerlink" title="62.系统常用包"></a>62.系统常用包</h2><ul><li>java.lang：像String、Number、Object等类都在此包中，此包在JDK1.1后自动导入；</li><li>java.lang.reflect：反射机制处理包，所有设计由此开始</li><li>java.util：工具类的定义，包括数据结构的定义；</li><li>java.io：进行输入与输出流操作的程序包；</li><li>java.net：网络程序开发的程序包；</li><li>java.sql：进行数据库编程开发的包；</li><li>java.applet：java的最原始的使用形式，直接嵌套在网页上<ul><li>现在程序主要以Applocation为主</li></ul></li><li>java.awt、javax.swing：Java的图形界面开发包(GUI)，其中awt是属于重量级的组件，而swing是轻量级的组件</li></ul><h2 id="63-访问控制权"><a href="#63-访问控制权" class="headerlink" title="63.访问控制权"></a>63.访问控制权</h2><p>四种访问权限：private、default、protected、public，</p><table><thead><tr><th>No</th><th>访问范围</th><th>private</th><th>default</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>1</td><td>同一包中的同一类</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>2</td><td>同一包中的不同类</td><td></td><td>√</td><td>√</td><td>√</td></tr><tr><td>3</td><td>不同包的子类</td><td></td><td></td><td>√</td><td>√</td></tr><tr><td>4</td><td>不同包的所有类</td><td></td><td></td><td></td><td>√</td></tr></tbody></table><p>下面对这一访问权限的使用进行说明，定义两个类</p><ul><li>cn.mldn.a.Messagge类：提供protected访问权限；</li><li>cn.mldn.b.NetMessage类；将直接访问protected类；</li></ul><p>例:定义Message类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.mldn,a ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：定义子类，与父类不在同一个包中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">packege cn.mldn.b ;<br><span class="hljs-keyword">import</span> nc.mldn.a.Message ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetMessage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Message</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">super</span> ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.mldn.test ;<br><span class="hljs-keyword">import</span> cn.mldn.b.* ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">NetMessage</span>().print() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果此时直接通过Message访问info属性会出现错误提示</p><p>例：重新编写程序类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.mldn.test ;<br><span class="hljs-keyword">import</span> cn.mldn.a.* ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>       System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>().info) ;<span class="hljs-comment">//此时出错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考选择方案：</p><ul><li>只要是进行属性的定义，全部使用private ;</li><li>只要是进行方法的定义，全部使用public。</li></ul><h2 id="64-UML类图"><a href="#64-UML类图" class="headerlink" title="64.UML类图"></a>64.UML类图</h2><p>UML是同一的建模语言，本质是利用图形化的形式来实现程序类关系的描述。</p><p>最早的设计工具：Rational Rose</p><h3 id="类图的描述"><a href="#类图的描述" class="headerlink" title="类图的描述"></a>类图的描述</h3><p>一般情况可以使用三层结构来表示</p><p>类名称、属性、方法，</p><p>普通类名称直接编写即可，抽象类用斜体描述往往还要加上”abstract”</p><p>对于类中的属性可以使用”访问权限 属性名称 ：属性类型” 的格式进行定义，对于访问权限，重点考虑public( + )、protected( # )、private( - )</p><p>类中的方法采用的格式”访问权限 方法名称()：返回值”结构来描述，一般方法用public声明</p><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p>主要描述的是代码的执行流程</p><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><p> 描述程序的执行分配</p><h2 id="65-单例设计：控制实例化对象产生个数的操作"><a href="#65-单例设计：控制实例化对象产生个数的操作" class="headerlink" title="65.单例设计：控制实例化对象产生个数的操作"></a>65.单例设计：控制实例化对象产生个数的操作</h2><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">instanceA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() ;<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">instanceB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() ;<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">instanceC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() ;<br>        instanceA.print() ;<br>        instanceB.print() ;<br>        instanceC.print() ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于某些要求，只允许singleton提供一个实例化对象，所有新的实例化对象产生都需要构造方法，如果构造方法没有了，那就无法产生实例化对象</p><p>例：私有化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>    <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//声明对象</span><br>        instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() ;<span class="hljs-comment">//出错：Singleton可以在Singleton中访问private</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125; <span class="hljs-comment">//构造方法私有化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要求：必须产生一个实例化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125; <span class="hljs-comment">//构造方法私有化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>    <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//声明对象</span><br>       <span class="hljs-comment">// instance = new Singleton() ;//出错：Singleton可以在Singleton中访问private</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：用static使外部能够获取内部属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125; <span class="hljs-comment">//构造方法私有化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>    <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//声明对象</span><br>      instance = Singleton.instance ;<br>    instance.print() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>类中的属性应该封装后使用，理论上instance需要被封装起来，那么就需要static方法获得</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125; <span class="hljs-comment">//构造方法私有化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> instance ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//声明对象</span><br>        instance = Singleton.getInstance() ;<br>        instance.print() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>整个代码强调的是只有一个实例化对象，这个时候虽然提供有static的实例化对象，但这个对象以然可以被重新实例化  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125; <span class="hljs-comment">//构造方法私有化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() ;<br>        <span class="hljs-keyword">return</span> instance ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//声明对象</span><br>        instance = Singleton.getInstance() ;<br>        instance.print() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以需要使用<code>final</code>关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125; <span class="hljs-comment">//构造方法私有化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> INSTANCE ; <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//声明对象</span><br>        instance = Singleton.getInstance() ;<br>        instance.print() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>两种单例设计模式：</p><ul><li>在系统加载类的时候自动提供Singleton类的实例化对象(饿汉式)</li><li>第一次使用的使用进行实例化处理(懒汉式)</li></ul><p>例：将单例修改为第二种类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125; <span class="hljs-comment">//构造方法私有化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//第一次使用</span><br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() ;<span class="hljs-comment">//实例化对象           </span><br>        &#125;<br>        <span class="hljs-keyword">return</span> instance ; <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//声明对象</span><br>        instance = Singleton.getInstance() ;<br>        instance.print() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>面试题</strong>：请编写一个SIngleton程序，并说明其主要特点</p><ul><li>代码如上，可以把懒汉式(考虑到线程同步问题)和饿汉式都写上</li><li>特点：构造方法私有化，内部提供static方法获取实例化对象，这样不管外部如何操作永远只有一个实例化对象提供</li></ul><h2 id="66-多例设计：可以保留有多个实例"><a href="#66-多例设计：可以保留有多个实例" class="headerlink" title="66.多例设计：可以保留有多个实例"></a>66.多例设计：可以保留有多个实例</h2><p>例：实现多例设计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-comment">//定义描述颜色的类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Color</span> <span class="hljs-variable">RED</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-string">&quot;红色&quot;</span>) ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Color</span> <span class="hljs-variable">GREEN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-string">&quot;绿色&quot;</span>) ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Color</span> <span class="hljs-variable">BLUE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-string">&quot;蓝色&quot;</span>) ;<br>    <span class="hljs-keyword">private</span> String title ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Color</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Color <span class="hljs-title function_">getInstance</span><span class="hljs-params">(String color)</span> &#123;<br>        <span class="hljs-keyword">switch</span>(color)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;red&quot;</span>:<span class="hljs-keyword">return</span> RED ;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;green&quot;</span>:<span class="hljs-keyword">return</span> GREEN ;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;blue&quot;</span>:<span class="hljs-keyword">return</span> BLUE ;<br>            <span class="hljs-keyword">default</span>:<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.title ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Color</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Color.getInstance(<span class="hljs-string">&quot;green&quot;</span>) ;<br>        System.out.println(c) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="67-定义枚举类"><a href="#67-定义枚举类" class="headerlink" title="67.定义枚举类"></a>67.定义枚举类</h2><p>在JDK1.5之后才出现枚举</p><p>枚举的作用是定义有限个数对象的一种结构（多列设计），枚举属于多例设计</p><p>枚举定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-comment">//枚举类</span><br>RED,FREEN,BLUE ;<span class="hljs-comment">//实例化对象</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-type">Color</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Color.RED ;<span class="hljs-comment">//获取实例化对象</span><br>    System.out.println(c) ;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用枚举可以在编译的时候判断所使用的实例化对象是否存在</p><p>可以利用<code>values()</code>方法获取所有枚举对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-comment">//枚举类</span><br>RED,FREEN,BLUE ;<span class="hljs-comment">//实例化对象</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-type">Color</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Color.RED ;<span class="hljs-comment">//获取实例化对象</span><br>    <span class="hljs-keyword">for</span> (Color c : Color.values()) &#123;<br>       System.out.println(c) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>JDK1.5之后可以在Switch中使用枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-comment">//枚举类</span><br>    RED,GREEN,BLUE ;<span class="hljs-comment">//实例化对象</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span> &#123;<br>        <span class="hljs-type">Color</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Color.RED;<br>        <span class="hljs-keyword">switch</span> (c) &#123;<br>            <span class="hljs-keyword">case</span> RED:<br>                System.out.println(<span class="hljs-string">&quot;红色&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> GREEN:<br>                System.out.println(<span class="hljs-string">&quot;绿色&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> BLUE:<br>                System.out.println(<span class="hljs-string">&quot;蓝色&quot;</span>);<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="68-Emum类"><a href="#68-Emum类" class="headerlink" title="68.Emum类"></a>68.Emum类</h2><table><thead><tr><th>No</th><th>方法名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td><code>protected Enum(String name,int ordinal)</code></td><td>构造</td><td>传入名字和序号</td></tr><tr><td>2</td><td><code>public final String name()</code></td><td>普通</td><td>获得对象名字</td></tr><tr><td>3</td><td><code>public fianl int ordinal()</code></td><td>普通</td><td>获得对象序号</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-comment">//枚举类</span><br>    RED,GREEN,BLUE ;<span class="hljs-comment">//实例化对象</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span> &#123;<br>    <span class="hljs-keyword">for</span> (Color c : Color.values()) &#123;<br>            System.out.println(c.ordinal()+<span class="hljs-string">&quot;-&quot;</span> + c.name()) ;<br>        &#125;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>枚举中对象的序号是根据枚举对象的定义顺序决定的</p><p>请解释enum与Enum的区别</p><ul><li>enum：是JDK1.5之后提供的一个关键字，用于定义枚举类；</li><li>Enum：是一个抽象类，所以使用enum关键字定义就默认继承了此类。</li></ul><h2 id="69-异常"><a href="#69-异常" class="headerlink" title="69.异常"></a>69.异常</h2><p>异常指导致程序中断运行的程序流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br> System.out.println(<span class="hljs-string">&quot;**** 程序执行完毕 ****&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;**** 数据计算****&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;**** 程序开始执行 ****&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：产生异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br> System.out.println(<span class="hljs-string">&quot;**** 程序执行完毕 ****&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;**** 数据计算****&quot;</span>+<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<br>    System.out.println(<span class="hljs-string">&quot;**** 程序开始执行 ****&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>异常的主要目的：为了保证出错之后程序的顺利执行</p><h2 id="70-异常处理"><a href="#70-异常处理" class="headerlink" title="70.异常处理"></a>70.异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//可能出翔的异常语句</span><br>&#125; <span class="hljs-keyword">catch</span> (异常类型 异常对象)&#123;<br>    <span class="hljs-comment">//异常处理</span><br>&#125;<span class="hljs-keyword">catch</span> (异常类型 异常对象)&#123;<br>    <span class="hljs-comment">//异常处理</span><br>&#125;<span class="hljs-keyword">catch</span> (异常类型 异常对象)&#123;<br>    <span class="hljs-comment">//异常处理</span><br>&#125;...<span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">//不管异常是否出现都要执行</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可用的组合为：try…catch、try…catch…finally、try…finally。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;**** 程序执行完毕 ****&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;    <br>    System.out.println(<span class="hljs-string">&quot;**** 数据计算****&quot;</span>+<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<br>    &#125;<span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;<br>        System.out.print(e)<span class="hljs-comment">//处理异常</span><br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;**** 程序开始执行 ****&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>printStackTrace()</code>可以获得完整的异常信息</p><p>例：获取完整异常信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;**** 程序执行完毕 ****&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;    <br>    System.out.println(<span class="hljs-string">&quot;**** 数据计算****&quot;</span>+<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<br>    &#125;<span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;**** 程序开始执行 ****&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：使用<code>finally</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;**** 程序执行完毕 ****&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;    <br>    System.out.println(<span class="hljs-string">&quot;**** 数据计算****&quot;</span>+<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<br>    &#125;<span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;F&quot;</span>);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;**** 程序开始执行 ****&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="71-异常处理流程"><a href="#71-异常处理流程" class="headerlink" title="71.异常处理流程"></a>71.异常处理流程</h2><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200506102356642.png" alt="image-20200506102356642"></p><p>在程序运行过程中才会产生异常</p><p><code>Throwable</code>的两个子类</p><ul><li>Error：此时程序还未执行出现的错误，开发者无法处理</li><li>Exception：程序中出现的异常，开发者可以处理</li></ul><p> 进行异常处理的时候，要把捕获范围大的异常，放在捕获范围小的异常之后</p><h2 id="72-throws关键字"><a href="#72-throws关键字" class="headerlink" title="72.throws关键字"></a>72.throws关键字</h2><p>例：用<code>throws</code>关键字进行异常标注</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMath</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">return</span> x/y ;<br>    &#125;<br>&#125;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(MyMath.div(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>               e.printStackTrace();<br>               &#125;<br>            &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>例：在主方法上继续抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMath</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">return</span> x/y ;<br>    &#125;<br>&#125;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String args[])</span><span class="hljs-keyword">throws</span> Exception&#123;  <br>    System.out.println(MyMath.div(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>));<br>            &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="73-throw关键字"><a href="#73-throw关键字" class="headerlink" title="73.throw关键字"></a>73.throw关键字</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;手动抛出&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>面试题：请解释<code>throw</code>与<code>throws</code>区别</p><ul><li>throw：是在代码块中使用的，主要是手工进行异常对象的抛出</li><li>throws：是在方法定义上使用的，表示将此方法中可能产生的异常明确告诉给调用处，由调用处进行处理</li></ul><h2 id="74-异常处理模型"><a href="#74-异常处理模型" class="headerlink" title="74.异常处理模型"></a>74.异常处理模型</h2><p>现在要求定义一个可以实现出发计算的方法，开发要求如下：</p><ul><li>在进行数学计算开始与结束的时候进行信息提示；</li><li>如果在进行计算过程中产生了异常，则交给调用处处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMath</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;除法计算开始&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> x/y;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>         System.out.println(<span class="hljs-string">&quot;除法计算结束&quot;</span>) ;   <br>        &#125;<br>            <span class="hljs-keyword">return</span> temp ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args [])</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(MyMath.div(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上为try…finally…的用法</p><h2 id="75-RuntimeException"><a href="#75-RuntimeException" class="headerlink" title="75.RuntimeException"></a>75.RuntimeException</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-string">&quot;123&quot;</span>);<br>        System.out.println(num) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>面试题：请解释<code>RuntimeException</code>与<code>Exception</code>的区别</p><ul><li><code>RuntimeException</code>是<code>Exception</code>的子类</li><li><code>RuntimeException</code>标注的异常不需要强制性的处理，而<code>Exception</code>必须强制处理</li><li>常见<code>RuntimeException</code>异常：<code>NumberFormatException</code>、<code>ClassCastException</code>、<code>IndexOutOfBoundsException</code>、<code>NullPointerException</code></li></ul><h2 id="76-自定义异常类"><a href="#76-自定义异常类" class="headerlink" title="76.自定义异常类"></a>76.自定义异常类</h2><p>自定义异常可以考虑继承<code>Exception</code>或<code>RuntimeException</code></p><p>例：实现自定义异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BomException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BomException</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">super</span>(msg) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Food</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-keyword">throws</span> BomException &#123;<br>        <span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BomException</span>(<span class="hljs-string">&quot;吃太多&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.our.println(<span class="hljs-string">&quot;正常开始吃，不怕吃胖&quot;</span>) ;nk<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>  Food.eat(<span class="hljs-number">11</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="77-assert断言"><a href="#77-assert断言" class="headerlink" title="77.assert断言"></a>77.assert断言</h2><h2 id="78-内部类"><a href="#78-内部类" class="headerlink" title="78.内部类"></a>78.内部类</h2><p>在一个类的内部除了属性和方法可以使用class定义一个类</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<span class="hljs-comment">//外部类</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//普通方法</span><br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>() ;<span class="hljs-comment">//实例化内部类对象</span><br>        in.print() ;<span class="hljs-comment">//调用内部类方法</span><br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<span class="hljs-comment">//在Outer类的内部定义了Inner类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(Outer.<span class="hljs-built_in">this</span>.msg) ;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>() ;<span class="hljs-comment">//实例化外部类对象</span><br>        out.fun() ;<span class="hljs-comment">//调用外部类中的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：将内部类和外部类分开会很麻烦</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<span class="hljs-comment">//外部类</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//普通方法</span><br>        <span class="hljs-comment">//五：需要将当前对象那Outer传递到Inner类之中</span><br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>(<span class="hljs-built_in">this</span>) ;<span class="hljs-comment">//实例化内部类对象</span><br>        in.print() ;<span class="hljs-comment">//调用内部类方法</span><br>    &#125;<br>    <span class="hljs-comment">//一：msg属性如果要被外部访问需要提供有getter方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.msg ;<br>    &#125;<br>    <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<span class="hljs-comment">//在Outer类的内部定义了Inner类</span><br>    <span class="hljs-comment">//三：Inner对象实例化的时候需要Outer类的引用</span><br>    <span class="hljs-keyword">private</span> Outer out ;<br>    <span class="hljs-comment">//四：应该通过Inner类的构造方法获取Outer类对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Inner</span><span class="hljs-params">(Outer out)</span>&#123;<br>        <span class="hljs-built_in">this</span>.out = out ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">//二：如果想要调用外部类中的getter方法Outer类对象</span><br>            System.out.println(<span class="hljs-built_in">this</span>.out.getMsg()) ;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>() ;<span class="hljs-comment">//实例化外部类对象</span><br>        out.fun() ;<span class="hljs-comment">//调用外部类中的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内部类的优势：轻松地访问外部类的私有属性</p><p>外部类也可以轻松访问内部类中的私有成员或私有方法</p><p>列：外部类访问内部类中的成员和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//普通方法</span><br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>() ;<span class="hljs-comment">//实例化内部类对象</span><br>        in.print() ;<span class="hljs-comment">//调用内部类方法</span><br>        System.out.println(in.info) ;<span class="hljs-comment">//访问内部类中的属性</span><br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<span class="hljs-comment">//在Outer类的内部定义了Inner类</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;今天天气不好&quot;</span> ;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(Outer.<span class="hljs-built_in">this</span>.msg) ;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>() ;<span class="hljs-comment">//实例化外部类对象</span><br>        out.fun() ;<span class="hljs-comment">//调用外部类中的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>外部可以产生内部类的实例化对象，而此时内部类实例化对象的格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">外部类.内部类 内部类对象 = <span class="hljs-keyword">new</span> 外部类().new 内部类();<br></code></pre></td></tr></table></figure><p>在内部类编译完成后会形成”Outer$Inner.class”类文件</p><p>如果内部类提供实例化对象，一定要先保证外部类已经实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<span class="hljs-comment">//在Outer类的内部定义了Inner类</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;今天天气不好&quot;</span> ;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(Outer.<span class="hljs-built_in">this</span>.msg) ;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>       Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        in.print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果Inner类只允许Outer类来使用，那么在这样的情况下就可以使用private进行私有定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<span class="hljs-comment">//在Outer类的内部定义了Inner类</span><br>       <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;今天天气不好&quot;</span> ;<br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>           System.out.println(Outer.<span class="hljs-built_in">this</span>.msg) ;<br>       &#125;<br>   &#125;<span class="hljs-comment">//此时Inner类无法在外部进行使用</span><br></code></pre></td></tr></table></figure><p>抽象类和接口中都可以定义内部接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IChannel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(IMessage msg)</span> ;<span class="hljs-comment">//发送消息</span><br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//获取消息内容</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChannelImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IChannel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(IMessage msg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;发送消息&quot;</span> + msg.getContent());<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessage</span> &#123;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">IChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelImpl</span>();<br>        channel.send(((ChannelImpl)channel).<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageImpl</span>() );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：内部抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IChannel</span> &#123;<span class="hljs-comment">//定义接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//发送消息</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMessage</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChannelImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IChannel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AbstractMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageImpl</span>() ;<br>        System.out.println(msg.getContent()) ;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessage</span> &#123;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">IChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelImpl</span>() ;<br>        channel.send() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果定义了一个接口，可以在内部利用类实现该接口，在JDK1.8之后，接口中追加了static方法可以不受实例化对象的控制</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IChannel</span> &#123;<span class="hljs-comment">//定义接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//发送消息</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChannelImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IChannel</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IChannel <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelImpl</span>() ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">IChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> IChannel.getInstance() ;<br>        channel.send() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="79-static定义内部类"><a href="#79-static定义内部类" class="headerlink" title="79.static定义内部类"></a>79.static定义内部类</h2><p>如果使用static定义内部类，那么这个内部类就变为了”外部类“，static定义的都是独立结构，所以该类结构相当于是一个独立的程序结构了。注意：sattaic定义的类和方法只能访问static成员，所以static定义的内部类只能访问外部类中的satic属性和方法</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MSG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(Outer.MSG) ;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的Inner类是独立的类，如果此时需要实例化Inner类对象，需要根据 <code>外部类.内部类</code> 的结构实例化对象</p><p>例：实例化static内部类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MSG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(Outer.MSG) ;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>.Inner() ;<br>        in.print() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>类名称中有 <code>.</code> 首先应该想到这是一个内部类的结构</p><p>如果可以直接实例化，则这是一个static定义的内部类。</p><p>static定义内部类的形式并不常用，static定义内部接口的形式最为常用</p><p>例：使用static定义内部接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessageWarp</span> &#123;<span class="hljs-comment">//消息包装</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> ;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IChannel</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//消息发送通道</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(IMessage msg,IChannel channel)</span>&#123;<br>        <span class="hljs-keyword">if</span>(channel.connect()) &#123;<br>            System.out.println(msg.getContent());<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;消息通道无法建立，消息发送失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultMessage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessageWarp</span>.IMessage&#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NetChannel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessageWarp</span>.IChannel&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        IMessageWarp.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMessage</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">NetChannel</span>()) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="80-方法中定义内部类"><a href="#80-方法中定义内部类" class="headerlink" title="80.方法中定义内部类"></a>80.方法中定义内部类</h2><p>内部类可以在任意的结构中进行定义，这就包括了：类中、方法中、代码块中。</p><p>例：在方法中定义内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<span class="hljs-comment">//内部类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(Outer.<span class="hljs-built_in">this</span>.msg) ;<br>            System.out.println(time) ;<br>        &#125;<br>        &#125;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>().print() ;<span class="hljs-comment">//方法中直接实例化内部类对象</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().fun(<span class="hljs-number">12345L</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于方法中的内部类，JDK1.8开始支持直接访问，但JDK1.8之前，内部类要想访问方法中的参数则必须在参数前追加final</p><p>例：在JDK1.8以前的程序结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mldn.cn&quot;</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;final关键字&quot;</span> ;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<span class="hljs-comment">//内部类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(Outer.<span class="hljs-built_in">this</span>.msg) ;<br>            System.out.println(time) ;<br>        &#125;<br>        &#125;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>().print() ;<span class="hljs-comment">//方法中直接实例化内部类对象</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().fun(<span class="hljs-number">12345L</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="81-匿名内部类"><a href="#81-匿名内部类" class="headerlink" title="81.匿名内部类"></a>81.匿名内部类</h2><p>匿名内部类是一种简化的内部类的处理形式，其主要是在抽象类和接口的子类上使用的</p><p>范例：基本的程序结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String str)</span> ;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String str)</span> &#123;<br>        System.out.println(str) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">IMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageImpl</span>() ;<br>        msg.send(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但如果在IMessage接口中的MessageIMpl子类只使用唯一的一次，那定义子类就有些多余，此时就可以用匿名内部类的形式来解决此问题</p><p>例：使用匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String str)</span> ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">IMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IMessage</span>()&#123;<span class="hljs-comment">//匿名内部类</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String str)</span> &#123;<br>                System.out.println(str) ;<br>            &#125;<br>        &#125;;<br>        msg.send(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了更加方便地体现出匿名内部类的使用，往往可以利用静态方法做一个内部的匿名内部类实现</p><p>例：在接口中直接定义匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String str)</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IMessage <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IMessage</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String str)</span> &#123;<br>                System.out.println(str) ;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        IMessage.getInstance().send(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类只是一个没有名字的只能使用一次的并且结构固定的子类操作</p><h2 id="82-Lambda表达式"><a href="#82-Lambda表达式" class="headerlink" title="82.Lambda表达式"></a>82.Lambda表达式</h2><p>从JDK1.8开始提供了Lambda表达式的支持</p><p>函数式编程语言：haskell、Scala，</p><p>利用函数式编程可以避免面向对象编程之中的一些繁琐的处理问题</p><p>例：传统表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String str)</span> ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">IMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IMessage</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String str)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;消息发送：&quot;</span> + str);<br>            &#125;<br>        &#125;;<br>        msg.send(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：使用Lambda表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String str)</span> ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">IMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> (str)-&gt; &#123;<br>           System.out.println(<span class="hljs-string">&quot;发送消息：&quot;</span> + str);<br>        &#125;;<br>        msg.send(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Lambda表达式的使用要求：SAM(Single Abstract Method)，只有一个抽象方法，以之前的IMessage接口为例，接口中只提供有一个send()方法，除此之外没有任何其他方法定义，所以这样的接口被称为函数式接口，而只有函数式几口才可以被Lambda表达式使用</p><p>例：使用函数接口注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span> <span class="hljs-comment">//函数式接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String str)</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span>;<span class="hljs-comment">//两个方法</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200507135109024.png" alt="image-20200507135109024"></p><p>Lambd表达式有以下几种格式</p><ul><li>方法没有参数：<code>()-&gt;&#123;&#125;;</code></li><li>方法有参数：<code>(参数,参数)-&gt;&#123;&#125;;</code></li><li>如果现在只有一行语句返回：<code>(参数,参数)-&gt;语句</code></li></ul><p>例：定义没有参数的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span> <span class="hljs-comment">//函数式几口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">IMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> ()-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;发送消息：www.mldn.cn&quot;</span>) ;<br>        &#125;;<br>        msg.send();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：定义有参数的处理形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span> <span class="hljs-comment">//函数式几口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMath</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">IMath</span> <span class="hljs-variable">math</span>  <span class="hljs-operator">=</span> (t1,t2)-&gt;&#123;<br>            <span class="hljs-keyword">return</span> t1 + t2 ;<br>        &#125;;<br>        System.out.println(math.add(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="83-方法引用"><a href="#83-方法引用" class="headerlink" title="83.方法引用"></a>83.方法引用</h2><ul><li>引用静态方法：类名称 :: static 方法名称；</li><li>引用某个特定类型的方法：特定类 :: 普通方法；</li><li>引用构造方法：类名称 :: new。</li></ul><p>例：引用静态方法</p><ul><li>String 类中提供油<code>String.valueOf()</code>方法属于静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><span class="hljs-comment">//函数式接口</span><br><span class="hljs-comment">//P描述的是参数、R描述的式返回值</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFunction</span>&lt;P,R&gt; &#123;<br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">change</span><span class="hljs-params">(P p)</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        IFunction&lt;Integer,String&gt; fun = String :: valueOf;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> fun.change(<span class="hljs-number">100</span>) ;<br>        System.out.println(str.length());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用方法引用这一概念可以为一个可以为一个方法定义多个名字但要求是函数式接口。</p><p>例：引用实例化对象中的方法</p><ul><li>利用<code>String</code>类中有一个转大写的方法：<code>public String toUpperCase()</code>，此方法必须有实例化对象时才能调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><span class="hljs-comment">//函数式接口</span><br><span class="hljs-comment">//P描述的是参数、R描述的式返回值</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFunction</span>&lt;R&gt; &#123;<br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">upper</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        IFunction&lt;String&gt; fun = <span class="hljs-string">&quot;www.mldn.com&quot;</span> :: toUpperCase;<br>        System.out.println(fun.upper());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>引用特定类中的方法，再String类中提供比较大小的方法<code>pulic int compareTo(String anotherString);</code>如果要引用普通方法，往往都需要实例化对象，如果不给出实例化对象，只想引用此方法，则可以使用特定类来进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><span class="hljs-comment">//函数式接口</span><br><span class="hljs-comment">//P描述的是参数、R描述的式返回值</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFunction</span>&lt;P&gt; &#123;<br>    <span class="hljs-keyword">public</span> P <span class="hljs-title function_">compare</span><span class="hljs-params">(P p1,P p2)</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        IFunction&lt;Integer&gt; fun = Integer :: compareTo;<br>        System.out.println(fun.compare(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>构造方法引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name ;<br>        <span class="hljs-built_in">this</span>.age = age ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名&quot;</span> + <span class="hljs-built_in">this</span>.name +<span class="hljs-string">&quot;、年龄：&quot;</span> +<span class="hljs-built_in">this</span>.age;<br>    &#125;<br>&#125;<br><span class="hljs-meta">@FunctionalInterface</span><span class="hljs-comment">//函数式接口</span><br><span class="hljs-comment">//P描述的是参数、R描述的式返回值</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFunction</span>&lt;R&gt; &#123;<br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">create</span><span class="hljs-params">(String s,<span class="hljs-type">int</span> a)</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        IFunction&lt;Person&gt; fun = Person :: <span class="hljs-keyword">new</span>;<br>        System.out.println(fun.create(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="84-内建函数式接口"><a href="#84-内建函数式接口" class="headerlink" title="84.内建函数式接口"></a>84.内建函数式接口</h2><p> 在大量使用<code>@FnctionalInterface</code>进行大量声明的情况下为了方便可以引用系统内置的函数式接口,使用<code>java.util.function</code>开发包</p><p>1、功能性函数式接口：</p><ul><li>以<code>startWith</code>为例</li></ul><table><thead><tr><th>接口定义：</th><th>接口使用：</th></tr></thead><tbody><tr><td>@FunctionalInterface <br>public interface Function&lt;T,R&gt;{<br>pubcli R applay (T t);<br>}</td><td>import java.util.function.* ;<br/>public class JavaDemo {<br/>    public static void main(String args[]) {<br/>        Function&lt;String ,Boolean&gt; fun &#x3D; “<em>Hello” ::statsWith;<br/>        System.out.println(fun.apply(“</em>“));<br/>    }<br/>}</td></tr></tbody></table><p>2.消费型函数式接口：只能够进行数据的处理操作，而没有任何返回；</p><ul><li>在进行系统输出的时候使用的时<code>System.out.println();</code></li></ul><table><thead><tr><th>接口定义：</th><th>接口使用：</th></tr></thead><tbody><tr><td>@FunctionalInterface&lt;br&#x2F; &gt;public interface Consumer&lt;T&gt; {<br/>    public void accept(T t);<br/>}</td><td>import java.util.function.* ;<br/>public class JavaDemo {<br/>    public static void main(String args[]) {<br/>        Consumer&lt;String&gt; con &#x3D; System.out :: println ;<br/>        con.accept(“<a href="http://www.mdlm.cn&quot;/">www.mdlm.cn&quot;</a>) ;<br/>    }<br/>}</td></tr></tbody></table><p>3、供给型函数式接口</p><ul><li>在String类中提供有转小写方法，此方法没有接收参数但又返回值</li></ul><table><thead><tr><th>接口定义：</th><th>接口使用：</th></tr></thead><tbody><tr><td>@FunctionalInterface&lt;br&#x2F; &gt;public interface Supplier&lt;T&gt;{<br />public T get()<br />}</td><td>import java.util.function.* ;<br/>public class JavaDemo {<br/>    public static void main(String args[]) {<br/>        Supplier&lt;String sup&gt; &#x3D; “<a href="http://www.mldnjava.cn&quot;/">www.MLDNJAVA.cn&quot;</a> :: toLowerCase ;<br/>        System.out.println(sup.get());<br/>    }<br/>}</td></tr></tbody></table><p>4、断言型函数式接口：进行判断处理</p><ul><li>在String类中有compareToIgnoreCase()方法</li></ul><table><thead><tr><th>接口定义：</th><th>接口使用：</th></tr></thead><tbody><tr><td>@FunctionalInterface<br />public interface Preicate &lt;T&gt;{<br />public boolean test(T t);<br />}</td><td>import java.util.function.* ;<br/>public class JavaDemo {<br/>    public static void main(String args[]) {<br/>        Predicate&lt;String&gt; pre &#x3D; “mldn” :: equalsIgnoreCase;<br/>        System.out.println(pre.test(“MLDN”)) ;<br/>    }<br/>}</td></tr></tbody></table><p>如果JDK提供的函数式接口可以被使用，那么就没有必要重新进行编写</p><h2 id="85-链表"><a href="#85-链表" class="headerlink" title="85.链表"></a>85.链表</h2><p>链表的本质是一个动态的对象数组，可以实现若干个对象的存储。</p><p>数组的缺点：长度固定，在开发之中传统的数组非常有限</p><p>例：直接操作Node很麻烦</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> E data ;<br>    <span class="hljs-keyword">private</span> Node next ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Node&lt;E&gt; next)</span>&#123;<br>        <span class="hljs-built_in">this</span>.next = next ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.next ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        Node &lt;String&gt; n1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;String&gt;(<span class="hljs-string">&quot;火车头&quot;</span>) ;<br>        Node &lt;String&gt; n2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;String &gt;(<span class="hljs-string">&quot;车厢1&quot;</span>) ;<br>        Node &lt;String&gt; n3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;String &gt;(<span class="hljs-string">&quot;车厢2&quot;</span>) ;<br>        n1.setNext(n2);<br>        n2.setNext(n3);<br>        print(n1);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Node&lt;?&gt; node)</span>&#123;<br>        <span class="hljs-keyword">if</span>(node != <span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//有节点</span><br>            System.out.println(node.getData());<br>            print(node.getNext());<span class="hljs-comment">//递归调用</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="86-数据增加"><a href="#86-数据增加" class="headerlink" title="86.数据增加"></a>86.数据增加</h2><p>例：数据增加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<span class="hljs-comment">//设置泛型避免安全隐患</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> ;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkImpl</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-comment">//保存节点的数据关系</span><br>        <span class="hljs-keyword">private</span> E data ;<span class="hljs-comment">//保存到数据</span><br>        <span class="hljs-keyword">private</span> Node next;<span class="hljs-comment">//保存下一个引用</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<span class="hljs-comment">//有数据才有意义</span><br>            <span class="hljs-built_in">this</span>.data = data ;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root;</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(Node newNode)</span> &#123;<span class="hljs-comment">//保存新的Node数据</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//当前节点的下一个节点为null</span><br>                <span class="hljs-built_in">this</span>.next = newNode ;<span class="hljs-comment">//保存当前节点</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.next.addNode(newNode) ;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//以下为Link类中定义的成员</span><br>    <span class="hljs-keyword">private</span> Node root ;<span class="hljs-comment">//保存根元素</span><br>    <span class="hljs-comment">//以下为Link类中定义的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//保存的数据为null</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法调用直接结束</span><br>        &#125;<br>        <span class="hljs-comment">//数据本身是不具有关联特性的，只有Node类有，那么要想实现关联处理必须将数据包装在Node类之中</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(e) ;<span class="hljs-comment">//创建一个新的节点</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//现在没有根节点</span><br>            <span class="hljs-built_in">this</span>.root = newNode ;<span class="hljs-comment">//第一个节点作为根节点</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//根节点存在</span><br>            <span class="hljs-built_in">this</span>.root.addNode(newNode) ;<span class="hljs-comment">//将新节点保存在合适的位置</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//以下为Link类中定义的结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        ILink&lt;String&gt; all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkImpl</span>&lt;String&gt;();<br>        all.add(<span class="hljs-string">&quot;hello&quot;</span>) ;<br>        all.add(<span class="hljs-string">&quot;world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Link类只是负责数据的操作与根节点的处理，而所有后续节点的处理全部由Node类完成</p><h2 id="87-获取集合个数"><a href="#87-获取集合个数" class="headerlink" title="87.获取集合个数"></a>87.获取集合个数</h2><p>当增加或删除个数时都需要对个数进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<span class="hljs-comment">//设置泛型避免安全隐患</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> ;<span class="hljs-comment">//增加数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//获取数据的个数</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkImpl</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-comment">//保存节点的数据关系</span><br>        <span class="hljs-keyword">private</span> E data ;<span class="hljs-comment">//保存到数据</span><br>        <span class="hljs-keyword">private</span> Node next;<span class="hljs-comment">//保存下一个引用</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<span class="hljs-comment">//有数据才有意义</span><br>            <span class="hljs-built_in">this</span>.data = data ;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root;</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(Node newNode)</span> &#123;<span class="hljs-comment">//保存新的Node数据</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//当前节点的下一个节点为null</span><br>                <span class="hljs-built_in">this</span>.next = newNode ;<span class="hljs-comment">//保存当前节点</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.next.addNode(newNode) ;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//以下为Link类中定义的成员</span><br>    <span class="hljs-keyword">private</span> Node root ;<span class="hljs-comment">//保存根元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count ;<span class="hljs-comment">//保存数据的个数</span><br>    <span class="hljs-comment">//以下为Link类中定义的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//保存的数据为null</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法调用直接结束</span><br>        &#125;<br>        <span class="hljs-comment">//数据本身是不具有关联特性的，只有Node类有，那么要想实现关联处理必须将数据包装在Node类之中</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(e) ;<span class="hljs-comment">//创建一个新的节点</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//现在没有根节点</span><br>            <span class="hljs-built_in">this</span>.root = newNode ;<span class="hljs-comment">//第一个节点作为根节点</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//根节点存在</span><br>            <span class="hljs-built_in">this</span>.root.addNode(newNode) ;<span class="hljs-comment">//将新节点保存在合适的位置</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.count++ ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count ;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//以下为Link类中定义的结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        ILink&lt;String&gt; all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkImpl</span>&lt;String&gt;();<br>        System.out.println(<span class="hljs-string">&quot;【增加之前】数据的个数：&quot;</span> + all.size()) ;<br>        all.add(<span class="hljs-string">&quot;hello&quot;</span>) ;<br>        all.add(<span class="hljs-string">&quot;world&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;【增加之后】数据的个数：&quot;</span> + all.size()) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="88-空集合判断"><a href="#88-空集合判断" class="headerlink" title="88.空集合判断"></a>88.空集合判断</h2><p>1、在ILink接口中追加判断方法：<code>public voolean isEmpty();</code>&#x2F;&#x2F;判断是否时空集合</p><p>2、在LinkImpl子类中覆写此方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<span class="hljs-comment">//设置泛型避免安全隐患</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> ;<span class="hljs-comment">//增加数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//获取数据的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//判断是否是空集合</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkImpl</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-comment">//保存节点的数据关系</span><br>        <span class="hljs-keyword">private</span> E data ;<span class="hljs-comment">//保存到数据</span><br>        <span class="hljs-keyword">private</span> Node next;<span class="hljs-comment">//保存下一个引用</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<span class="hljs-comment">//有数据才有意义</span><br>            <span class="hljs-built_in">this</span>.data = data ;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root;</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(Node newNode)</span> &#123;<span class="hljs-comment">//保存新的Node数据</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//当前节点的下一个节点为null</span><br>                <span class="hljs-built_in">this</span>.next = newNode ;<span class="hljs-comment">//保存当前节点</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.next.addNode(newNode) ;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//以下为Link类中定义的成员</span><br>    <span class="hljs-keyword">private</span> Node root ;<span class="hljs-comment">//保存根元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count ;<span class="hljs-comment">//保存数据的个数</span><br>    <span class="hljs-comment">//以下为Link类中定义的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//保存的数据为null</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法调用直接结束</span><br>        &#125;<br>        <span class="hljs-comment">//数据本身是不具有关联特性的，只有Node类有，那么要想实现关联处理必须将数据包装在Node类之中</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(e) ;<span class="hljs-comment">//创建一个新的节点</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//现在没有根节点</span><br>            <span class="hljs-built_in">this</span>.root = newNode ;<span class="hljs-comment">//第一个节点作为根节点</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//根节点存在</span><br>            <span class="hljs-built_in">this</span>.root.addNode(newNode) ;<span class="hljs-comment">//将新节点保存在合适的位置</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.count++ ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//return this.root ==null ;//这两种方法时一样的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count == <span class="hljs-number">0</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count ;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//以下为Link类中定义的结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        ILink&lt;String&gt; all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkImpl</span>&lt;String&gt;();<br>        System.out.println(<span class="hljs-string">&quot;【增加之前】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        all.add(<span class="hljs-string">&quot;hello&quot;</span>) ;<br>        all.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;【增加之后】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="89-返回集合数据类型"><a href="#89-返回集合数据类型" class="headerlink" title="89.返回集合数据类型"></a>89.返回集合数据类型</h2><p>1、在ILink接口中追加新的处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object [] toArray()<span class="hljs-comment">//将集合元素以数组形式返回</span><br></code></pre></td></tr></table></figure><p>2、在<code>LinkImpl</code>子类中追加两个属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> foot ;<span class="hljs-comment">//描述的是操作数组的角标</span><br><span class="hljs-keyword">private</span> Object[] returnData ;<span class="hljs-comment">//返回的数据保存</span><br></code></pre></td></tr></table></figure><p>3、在Node类中递归获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toArrayNode</span><span class="hljs-params">()</span> &#123;<br>          Linkimpl.<span class="hljs-built_in">this</span>.returnData [LinkImpl.<span class="hljs-built_in">this</span>.foot++] = <span class="hljs-built_in">this</span>.data ;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next !=<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//还有下一个数据</span><br>          <span class="hljs-built_in">this</span>.next.toArrayNode() ;<br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>4、进行数据返回的时候一定要首先判断是否为空集合 </p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<span class="hljs-comment">//设置泛型避免安全隐患</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> ;<span class="hljs-comment">//增加数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//获取数据的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//判断是否是空集合</span><br>    <span class="hljs-keyword">public</span> Object [] toArray() ;<span class="hljs-comment">//将集合元素以数组的形式返回</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkImpl</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-comment">//保存节点的数据关系</span><br>        <span class="hljs-keyword">private</span> E data ;<span class="hljs-comment">//保存到数据</span><br>        <span class="hljs-keyword">private</span> Node next;<span class="hljs-comment">//保存下一个引用</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<span class="hljs-comment">//有数据才有意义</span><br>            <span class="hljs-built_in">this</span>.data = data ;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root;</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(Node newNode)</span> &#123;<span class="hljs-comment">//保存新的Node数据</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//当前节点的下一个节点为null</span><br>                <span class="hljs-built_in">this</span>.next = newNode ;<span class="hljs-comment">//保存当前节点</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.next.addNode(newNode) ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toArrayNode</span><span class="hljs-params">()</span> &#123;<br>            LinkImpl.<span class="hljs-built_in">this</span>.returnData [LinkImpl.<span class="hljs-built_in">this</span>.foot++] = <span class="hljs-built_in">this</span>.data ;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next !=<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//还有下一个数据</span><br>                <span class="hljs-built_in">this</span>.next.toArrayNode() ;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//以下为Link类中定义的成员</span><br>    <span class="hljs-keyword">private</span> Node root ;<span class="hljs-comment">//保存根元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count ;<span class="hljs-comment">//保存数据的个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> foot ;<span class="hljs-comment">//描述的是操作数组的脚标</span><br>    <span class="hljs-keyword">private</span> Object[] returnData ;<span class="hljs-comment">//返回的数据保存</span><br>    <span class="hljs-comment">//以下为Link类中定义的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//保存的数据为null</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法调用直接结束</span><br>        &#125;<br>        <span class="hljs-comment">//数据本身是不具有关联特性的，只有Node类有，那么要想实现关联处理必须将数据包装在Node类之中</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(e) ;<span class="hljs-comment">//创建一个新的节点</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//现在没有根节点</span><br>            <span class="hljs-built_in">this</span>.root = newNode ;<span class="hljs-comment">//第一个节点作为根节点</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//根节点存在</span><br>            <span class="hljs-built_in">this</span>.root.addNode(newNode) ;<span class="hljs-comment">//将新节点保存在合适的位置</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.count++ ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//return this.root ==null ;//这两种方法时一样的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count == <span class="hljs-number">0</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object[] toArray() &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEmpty()) &#123;<span class="hljs-comment">//空集合</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//现在没有数据</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//角标清零</span><br>        <span class="hljs-built_in">this</span>.returnData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span> [<span class="hljs-built_in">this</span>.count] ;<span class="hljs-comment">//根据已有的长度开辟数组</span><br>        <span class="hljs-built_in">this</span>.root.toArrayNode() ;<span class="hljs-comment">//利用Node类进行递归数据获取</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.returnData ;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//以下为Link类中定义的结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        ILink&lt;String&gt; all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkImpl</span>&lt;String&gt;();<br>        System.out.println(<span class="hljs-string">&quot;【增加之前】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        all.add(<span class="hljs-string">&quot;hello&quot;</span>) ;<br>        all.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;【增加之后】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        Object result [] = all.toArray() ;<br>        <span class="hljs-keyword">for</span>(Object obj : result) &#123;<br>            System.out.println(obj) ;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>集合的数据如果要返回，要以对象数组的形式返回。</p><h2 id="90-获取指定索引数据-时间复杂度为n"><a href="#90-获取指定索引数据-时间复杂度为n" class="headerlink" title="90.获取指定索引数据(时间复杂度为n)"></a>90.获取指定索引数据(时间复杂度为n)</h2><p>1、在ILink接口里追加有新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> ;<span class="hljs-comment">//根据索引获取数据</span><br></code></pre></td></tr></table></figure><p>2、在Node类中追加有根据索引获取数据的处理</p><p>3、在LinkImpl子类中定义数据获取的实现</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<span class="hljs-comment">//设置泛型避免安全隐患</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> ;<span class="hljs-comment">//增加数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//获取数据的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//判断是否是空集合</span><br>    <span class="hljs-keyword">public</span> Object [] toArray() ;<span class="hljs-comment">//将集合元素以数组的形式返回</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> ;<span class="hljs-comment">//根据索引获取数据</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkImpl</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-comment">//保存节点的数据关系</span><br>        <span class="hljs-keyword">private</span> E data ;<span class="hljs-comment">//保存到数据</span><br>        <span class="hljs-keyword">private</span> Node next;<span class="hljs-comment">//保存下一个引用</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<span class="hljs-comment">//有数据才有意义</span><br>            <span class="hljs-built_in">this</span>.data = data ;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root;</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(Node newNode)</span> &#123;<span class="hljs-comment">//保存新的Node数据</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//当前节点的下一个节点为null</span><br>                <span class="hljs-built_in">this</span>.next = newNode ;<span class="hljs-comment">//保存当前节点</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.next.addNode(newNode) ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toArrayNode</span><span class="hljs-params">()</span> &#123;<br>            LinkImpl.<span class="hljs-built_in">this</span>.returnData [LinkImpl.<span class="hljs-built_in">this</span>.foot++] = <span class="hljs-built_in">this</span>.data ;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next !=<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//还有下一个数据</span><br>                <span class="hljs-built_in">this</span>.next.toArrayNode() ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br><br>            <span class="hljs-keyword">if</span>(LinkImpl.<span class="hljs-built_in">this</span>.foot == index) &#123;<span class="hljs-comment">//索引相同</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data ;<span class="hljs-comment">//返回当前数据</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                LinkImpl.<span class="hljs-built_in">this</span>.foot++;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.next.getNode(index) ;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//以下为Link类中定义的成员</span><br>    <span class="hljs-keyword">private</span> Node root ;<span class="hljs-comment">//保存根元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count ;<span class="hljs-comment">//保存数据的个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> foot ;<span class="hljs-comment">//描述的是操作数组的脚标</span><br>    <span class="hljs-keyword">private</span> Object[] returnData ;<span class="hljs-comment">//返回的数据保存</span><br>    <span class="hljs-comment">//以下为Link类中定义的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//保存的数据为null</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法调用直接结束</span><br>        &#125;<br>        <span class="hljs-comment">//数据本身是不具有关联特性的，只有Node类有，那么要想实现关联处理必须将数据包装在Node类之中</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(e) ;<span class="hljs-comment">//创建一个新的节点</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//现在没有根节点</span><br>            <span class="hljs-built_in">this</span>.root = newNode ;<span class="hljs-comment">//第一个节点作为根节点</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//根节点存在</span><br>            <span class="hljs-built_in">this</span>.root.addNode(newNode) ;<span class="hljs-comment">//将新节点保存在合适的位置</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.count++ ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//return this.root ==null ;//这两种方法时一样的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count == <span class="hljs-number">0</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object[] toArray() &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEmpty()) &#123;<span class="hljs-comment">//空集合</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//现在没有数据</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//角标清零</span><br>        <span class="hljs-built_in">this</span>.returnData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span> [<span class="hljs-built_in">this</span>.count] ;<span class="hljs-comment">//根据已有的长度开辟数组</span><br>        <span class="hljs-built_in">this</span>.root.toArrayNode() ;<span class="hljs-comment">//利用Node类进行递归数据获取</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.returnData ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span>( index &gt; <span class="hljs-built_in">this</span>.count) &#123;<span class="hljs-comment">//索引应该在指定范围之内</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>        &#125;<span class="hljs-comment">//索引数据的获取应该由Node类完成</span><br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//重置下标</span><br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">this</span>.root.getNode(index) ;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//以下为Link类中定义的结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        ILink&lt;String&gt; all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkImpl</span>&lt;String&gt;();<br>        System.out.println(<span class="hljs-string">&quot;【增加之前】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        all.add(<span class="hljs-string">&quot;hello&quot;</span>) ;<br>        all.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        all.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;【增加之后】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        Object result [] = all.toArray() ;<br>        <span class="hljs-keyword">for</span>(Object obj : result) &#123;<br>            System.out.println(obj) ;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;---------数据获取的分割线----------&quot;</span>) ;<br>        System.out.println(all.get(<span class="hljs-number">0</span>));<br>        System.out.println(all.get(<span class="hljs-number">1</span>));<br>      <br>        System.out.println(all.get(<span class="hljs-number">4</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="91-修改指定索引-时间复杂度为n"><a href="#91-修改指定索引-时间复杂度为n" class="headerlink" title="91.修改指定索引(时间复杂度为n)"></a>91.修改指定索引(时间复杂度为n)</h2><p>1、在<code>ILink</code>接口中追加新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> indext,E data)</span> ;<span class="hljs-comment">//修改1索引数据</span><br></code></pre></td></tr></table></figure><p>2、在<code>Node</code>类中获取修改数据支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index ,E data)</span> &#123;<br>            <span class="hljs-keyword">if</span>(LinkImpl.<span class="hljs-built_in">this</span>.foot++ == index) &#123;<span class="hljs-comment">//索引相同</span><br>               <span class="hljs-built_in">this</span>.data = data;<span class="hljs-comment">//修改当前数据</span><br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>            <br>               <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.next.getNode(index,data) ;<br>           &#125;<br>           <br>       &#125;<br></code></pre></td></tr></table></figure><p>3、在<code>LinkImpl</code>子类中进行方法覆写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index,E data)</span> &#123;<br>       <span class="hljs-keyword">if</span>( index &gt; <span class="hljs-built_in">this</span>.count) &#123;<span class="hljs-comment">//索引应该在指定范围之内</span><br>           <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法结束</span><br>       &#125;<span class="hljs-comment">//索引数据的获取应该由Node类完成</span><br>       <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//重置下标</span><br>       <span class="hljs-built_in">this</span>.root.setNode(index,data) ;<span class="hljs-comment">//修改数据</span><br>   &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<span class="hljs-comment">//设置泛型避免安全隐患</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> ;<span class="hljs-comment">//增加数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//获取数据的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//判断是否是空集合</span><br>    <span class="hljs-keyword">public</span> Object [] toArray() ;<span class="hljs-comment">//将集合元素以数组的形式返回</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> ;<span class="hljs-comment">//根据索引获取数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> indext,E data)</span> ;<span class="hljs-comment">//修改1索引数据</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkImpl</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-comment">//保存节点的数据关系</span><br>        <span class="hljs-keyword">private</span> E data ;<span class="hljs-comment">//保存到数据</span><br>        <span class="hljs-keyword">private</span> Node next;<span class="hljs-comment">//保存下一个引用</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<span class="hljs-comment">//有数据才有意义</span><br>            <span class="hljs-built_in">this</span>.data = data ;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root;</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(Node newNode)</span> &#123;<span class="hljs-comment">//保存新的Node数据</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//当前节点的下一个节点为null</span><br>                <span class="hljs-built_in">this</span>.next = newNode ;<span class="hljs-comment">//保存当前节点</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.next.addNode(newNode) ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toArrayNode</span><span class="hljs-params">()</span> &#123;<br>            LinkImpl.<span class="hljs-built_in">this</span>.returnData [LinkImpl.<span class="hljs-built_in">this</span>.foot++] = <span class="hljs-built_in">this</span>.data ;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next !=<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//还有下一个数据</span><br>                <span class="hljs-built_in">this</span>.next.toArrayNode() ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br><br>            <span class="hljs-keyword">if</span>(LinkImpl.<span class="hljs-built_in">this</span>.foot++ == index) &#123;<span class="hljs-comment">//索引相同</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data ;<span class="hljs-comment">//返回当前数据</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.next.getNode(index) ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index ,E data)</span> &#123;<br>            <span class="hljs-keyword">if</span>(LinkImpl.<span class="hljs-built_in">this</span>.foot++ == index) &#123;<span class="hljs-comment">//索引相同</span><br>                <span class="hljs-built_in">this</span>.data = data;<span class="hljs-comment">//修改当前数据</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>             <span class="hljs-built_in">this</span>.next.setNode(index,data); ;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//以下为Link类中定义的成员</span><br>    <span class="hljs-keyword">private</span> Node root ;<span class="hljs-comment">//保存根元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count ;<span class="hljs-comment">//保存数据的个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> foot ;<span class="hljs-comment">//描述的是操作数组的脚标</span><br>    <span class="hljs-keyword">private</span> Object[] returnData ;<span class="hljs-comment">//返回的数据保存</span><br>    <span class="hljs-comment">//以下为Link类中定义的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//保存的数据为null</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法调用直接结束</span><br>        &#125;<br>        <span class="hljs-comment">//数据本身是不具有关联特性的，只有Node类有，那么要想实现关联处理必须将数据包装在Node类之中</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(e) ;<span class="hljs-comment">//创建一个新的节点</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//现在没有根节点</span><br>            <span class="hljs-built_in">this</span>.root = newNode ;<span class="hljs-comment">//第一个节点作为根节点</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//根节点存在</span><br>            <span class="hljs-built_in">this</span>.root.addNode(newNode) ;<span class="hljs-comment">//将新节点保存在合适的位置</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.count++ ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//return this.root ==null ;//这两种方法时一样的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count == <span class="hljs-number">0</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object[] toArray() &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEmpty()) &#123;<span class="hljs-comment">//空集合</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//现在没有数据</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//角标清零</span><br>        <span class="hljs-built_in">this</span>.returnData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span> [<span class="hljs-built_in">this</span>.count] ;<span class="hljs-comment">//根据已有的长度开辟数组</span><br>        <span class="hljs-built_in">this</span>.root.toArrayNode() ;<span class="hljs-comment">//利用Node类进行递归数据获取</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.returnData ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span>( index &gt; <span class="hljs-built_in">this</span>.count) &#123;<span class="hljs-comment">//索引应该在指定范围之内</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>        &#125;<span class="hljs-comment">//索引数据的获取应该由Node类完成</span><br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//重置下标</span><br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">this</span>.root.getNode(index) ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index,E data)</span> &#123;<br>        <span class="hljs-keyword">if</span>( index &gt; <span class="hljs-built_in">this</span>.count) &#123;<span class="hljs-comment">//索引应该在指定范围之内</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法结束</span><br>        &#125;<span class="hljs-comment">//索引数据的获取应该由Node类完成</span><br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//重置下标</span><br>        <span class="hljs-built_in">this</span>.root.setNode(index,data) ;<span class="hljs-comment">//修改数据</span><br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//以下为Link类中定义的结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        ILink&lt;String&gt; all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkImpl</span>&lt;String&gt;();<br>        System.out.println(<span class="hljs-string">&quot;【增加之前】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        all.add(<span class="hljs-string">&quot;hello&quot;</span>) ;<br>        all.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        all.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        all.set(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;世界&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;【增加之后】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        Object result [] = all.toArray() ;<br>        <span class="hljs-keyword">for</span>(Object obj : result) &#123;<br>            System.out.println(obj) ;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;---------数据获取的分割线----------&quot;</span>) ;<br>        System.out.println(all.get(<span class="hljs-number">0</span>));<br>        System.out.println(all.get(<span class="hljs-number">1</span>));<br>       <br>        System.out.println(all.get(<span class="hljs-number">4</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="92-链表——判断指定数据是否存在"><a href="#92-链表——判断指定数据是否存在" class="headerlink" title="92.链表——判断指定数据是否存在"></a>92.链表——判断指定数据是否存在</h2><p>可以通过对象比较<code>equals()</code>方法来进行判断</p><p>1、在<code>ILink</code>接口中追加判断方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(E data)</span> ;<span class="hljs-comment">//判断数据是否存在</span><br></code></pre></td></tr></table></figure><p>2、在Node类中进行依次判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsNode</span><span class="hljs-params">(E data)</span> &#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.data.equals(data)) &#123;<span class="hljs-comment">//对象比较</span><br> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;             <br>          &#125;<span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.next ==<span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//没有后续节点</span><br>                  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<span class="hljs-comment">//找不到</span><br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.next.containsNode(data);<span class="hljs-comment">//向后继续判断</span><br>              &#125;<br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>3、在<code>LinkImpl</code>子类中实现此方法</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<span class="hljs-comment">//设置泛型避免安全隐患</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> ;<span class="hljs-comment">//增加数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//获取数据的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//判断是否是空集合</span><br>    <span class="hljs-keyword">public</span> Object [] toArray() ;<span class="hljs-comment">//将集合元素以数组的形式返回</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> ;<span class="hljs-comment">//根据索引获取数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> indext,E data)</span> ;<span class="hljs-comment">//修改1索引数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(E data)</span> ;<span class="hljs-comment">//判断数据是否存在</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkImpl</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-comment">//保存节点的数据关系</span><br>        <span class="hljs-keyword">private</span> E data ;<span class="hljs-comment">//保存到数据</span><br>        <span class="hljs-keyword">private</span> Node next;<span class="hljs-comment">//保存下一个引用</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<span class="hljs-comment">//有数据才有意义</span><br>            <span class="hljs-built_in">this</span>.data = data ;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root;</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(Node newNode)</span> &#123;<span class="hljs-comment">//保存新的Node数据</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//当前节点的下一个节点为null</span><br>                <span class="hljs-built_in">this</span>.next = newNode ;<span class="hljs-comment">//保存当前节点</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.next.addNode(newNode) ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toArrayNode</span><span class="hljs-params">()</span> &#123;<br>            LinkImpl.<span class="hljs-built_in">this</span>.returnData [LinkImpl.<span class="hljs-built_in">this</span>.foot++] = <span class="hljs-built_in">this</span>.data ;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next !=<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//还有下一个数据</span><br>                <span class="hljs-built_in">this</span>.next.toArrayNode() ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br><br>            <span class="hljs-keyword">if</span>(LinkImpl.<span class="hljs-built_in">this</span>.foot++ == index) &#123;<span class="hljs-comment">//索引相同</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data ;<span class="hljs-comment">//返回当前数据</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.next.getNode(index) ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index ,E data)</span> &#123;<br>            <span class="hljs-keyword">if</span>(LinkImpl.<span class="hljs-built_in">this</span>.foot++ == index) &#123;<span class="hljs-comment">//索引相同</span><br>                <span class="hljs-built_in">this</span>.data = data;<span class="hljs-comment">//修改当前数据</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-built_in">this</span>.next.setNode(index,data); ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsNode</span><span class="hljs-params">(E data)</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.data.equals(data)) &#123;<span class="hljs-comment">//对象比较</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.next ==<span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//没有后续节点</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<span class="hljs-comment">//找不到</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.next.containsNode(data);<span class="hljs-comment">//向后继续判断</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//以下为Link类中定义的成员</span><br>    <span class="hljs-keyword">private</span> Node root ;<span class="hljs-comment">//保存根元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count ;<span class="hljs-comment">//保存数据的个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> foot ;<span class="hljs-comment">//描述的是操作数组的脚标</span><br>    <span class="hljs-keyword">private</span> Object[] returnData ;<span class="hljs-comment">//返回的数据保存</span><br>    <span class="hljs-comment">//以下为Link类中定义的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//保存的数据为null</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法调用直接结束</span><br>        &#125;<br>        <span class="hljs-comment">//数据本身是不具有关联特性的，只有Node类有，那么要想实现关联处理必须将数据包装在Node类之中</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(e) ;<span class="hljs-comment">//创建一个新的节点</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//现在没有根节点</span><br>            <span class="hljs-built_in">this</span>.root = newNode ;<span class="hljs-comment">//第一个节点作为根节点</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//根节点存在</span><br>            <span class="hljs-built_in">this</span>.root.addNode(newNode) ;<span class="hljs-comment">//将新节点保存在合适的位置</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.count++ ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//return this.root ==null ;//这两种方法时一样的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count == <span class="hljs-number">0</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object[] toArray() &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEmpty()) &#123;<span class="hljs-comment">//空集合</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//现在没有数据</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//角标清零</span><br>        <span class="hljs-built_in">this</span>.returnData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span> [<span class="hljs-built_in">this</span>.count] ;<span class="hljs-comment">//根据已有的长度开辟数组</span><br>        <span class="hljs-built_in">this</span>.root.toArrayNode() ;<span class="hljs-comment">//利用Node类进行递归数据获取</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.returnData ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span>( index &gt; <span class="hljs-built_in">this</span>.count) &#123;<span class="hljs-comment">//索引应该在指定范围之内</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>        &#125;<span class="hljs-comment">//索引数据的获取应该由Node类完成</span><br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//重置下标</span><br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">this</span>.root.getNode(index) ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index,E data)</span> &#123;<br>        <span class="hljs-keyword">if</span>( index &gt; <span class="hljs-built_in">this</span>.count) &#123;<span class="hljs-comment">//索引应该在指定范围之内</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法结束</span><br>        &#125;<span class="hljs-comment">//索引数据的获取应该由Node类完成</span><br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//重置下标</span><br>        <span class="hljs-built_in">this</span>.root.setNode(index,data) ;<span class="hljs-comment">//修改数据</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(E data)</span> &#123;<br>        <span class="hljs-keyword">if</span>( data == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<span class="hljs-comment">//没有数据</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.root.containsNode(data) ;<span class="hljs-comment">//交给Node判断</span><br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//以下为Link类中定义的结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        ILink&lt;String&gt; all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkImpl</span>&lt;String&gt;();<br>        System.out.println(<span class="hljs-string">&quot;【增加之前】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        all.add(<span class="hljs-string">&quot;hello&quot;</span>) ;<br>        all.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        all.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        all.set(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;世界&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;【增加之后】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        Object result [] = all.toArray() ;<br>        <span class="hljs-keyword">for</span>(Object obj : result) &#123;<br>            System.out.println(obj) ;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;---------数据获取的分割线----------&quot;</span>) ;<br>        System.out.println(all.get(<span class="hljs-number">0</span>));<br>        System.out.println(all.get(<span class="hljs-number">1</span>));<br>      <br>        System.out.println(all.get(<span class="hljs-number">4</span>));<br>        System.out.println(<span class="hljs-string">&quot;---------数据判断的分割线----------&quot;</span>) ;<br>        System.out.println(all.contains(<span class="hljs-string">&quot;高&quot;</span>));<br>        System.out.println(all.contains(<span class="hljs-string">&quot;hello&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于整个链表没有空数据村啊在，所以整体程序在判断的时候直接使用每一个节点数据发出的<code>equals()</code>方法调用即可</p><p>当链表中有数据为空时，因该将<code>this.data.equals(data)</code>改为<code>data.equals(this.data)</code>；</p><h2 id="93-链表——删除指定索引数据"><a href="#93-链表——删除指定索引数据" class="headerlink" title="93.链表——删除指定索引数据"></a>93.链表——删除指定索引数据</h2><p>需要考虑两种情况</p><ul><li>删除根节点(<code>LinkImpl</code>与根节点有关，所以这个判断由根接待你完成)</li><li>删除非根节点（由<code>Node</code>类负责）</li></ul><p>1、在<code>ILink</code>接口中增加新的删除方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(E e)</span> ;<span class="hljs-comment">//数据删除</span><br></code></pre></td></tr></table></figure><p>2、在<code>LinkImpl</code>子类中实现根节点的判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(E data)</span> &#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.contains(data))&#123;<span class="hljs-comment">//判断是否存在</span><br>           <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root.data.equals(data))&#123;<span class="hljs-comment">//根节点为要删除节点</span><br>               <span class="hljs-built_in">this</span>.root = <span class="hljs-built_in">this</span>.root.next ;<span class="hljs-comment">//根的下一个节点</span><br>           &#125;<br>           <span class="hljs-built_in">this</span>.count-- ;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>3、如果根节点不是要删除的节点，在<code>Node</code>类中追加删除处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeNode</span><span class="hljs-params">(Node previous,E e)</span>&#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.data.equals(data)) &#123;<br>               previous.next = <span class="hljs-built_in">this</span>.next ;<span class="hljs-comment">//空出当前节点</span><br>           &#125;<span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next != <span class="hljs-literal">null</span>) &#123;<br>                   <span class="hljs-built_in">this</span>.next.removeNode(<span class="hljs-built_in">this</span>,data) ;<span class="hljs-comment">//向后继续删除</span><br>               &#125;<br>           &#125; <br>       &#125;<br></code></pre></td></tr></table></figure><p>4、完善<code>LinkImpl</code>子类中的<code>remove</code>方法</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<span class="hljs-comment">//设置泛型避免安全隐患</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> ;<span class="hljs-comment">//增加数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//获取数据的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//判断是否是空集合</span><br>    <span class="hljs-keyword">public</span> Object [] toArray() ;<span class="hljs-comment">//将集合元素以数组的形式返回</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> ;<span class="hljs-comment">//根据索引获取数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> indext,E data)</span> ;<span class="hljs-comment">//修改1索引数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(E data)</span> ;<span class="hljs-comment">//判断数据是否存在</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(E e)</span> ;<span class="hljs-comment">//数据删除</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkImpl</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-comment">//保存节点的数据关系</span><br>        <span class="hljs-keyword">private</span> E data ;<span class="hljs-comment">//保存到数据</span><br>        <span class="hljs-keyword">private</span> Node next;<span class="hljs-comment">//保存下一个引用</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<span class="hljs-comment">//有数据才有意义</span><br>            <span class="hljs-built_in">this</span>.data = data ;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root;</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(Node newNode)</span> &#123;<span class="hljs-comment">//保存新的Node数据</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//当前节点的下一个节点为null</span><br>                <span class="hljs-built_in">this</span>.next = newNode ;<span class="hljs-comment">//保存当前节点</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.next.addNode(newNode) ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toArrayNode</span><span class="hljs-params">()</span> &#123;<br>            LinkImpl.<span class="hljs-built_in">this</span>.returnData [LinkImpl.<span class="hljs-built_in">this</span>.foot++] = <span class="hljs-built_in">this</span>.data ;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next !=<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//还有下一个数据</span><br>                <span class="hljs-built_in">this</span>.next.toArrayNode() ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br><br>            <span class="hljs-keyword">if</span>(LinkImpl.<span class="hljs-built_in">this</span>.foot++ == index) &#123;<span class="hljs-comment">//索引相同</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data ;<span class="hljs-comment">//返回当前数据</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.next.getNode(index) ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index ,E data)</span> &#123;<br>            <span class="hljs-keyword">if</span>(LinkImpl.<span class="hljs-built_in">this</span>.foot++ == index) &#123;<span class="hljs-comment">//索引相同</span><br>                <span class="hljs-built_in">this</span>.data = data;<span class="hljs-comment">//修改当前数据</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-built_in">this</span>.next.setNode(index,data); ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsNode</span><span class="hljs-params">(E data)</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.data.equals(data)) &#123;<span class="hljs-comment">//对象比较</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.next ==<span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//没有后续节点</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<span class="hljs-comment">//找不到</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.next.containsNode(data);<span class="hljs-comment">//向后继续判断</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeNode</span><span class="hljs-params">(Node previous,E e)</span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.data.equals(data)) &#123;<br>                previous.next = <span class="hljs-built_in">this</span>.next ;<span class="hljs-comment">//空出当前节点</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-built_in">this</span>.next.removeNode(<span class="hljs-built_in">this</span>,data) ;<span class="hljs-comment">//向后继续删除</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//以下为Link类中定义的成员</span><br>    <span class="hljs-keyword">private</span> Node root ;<span class="hljs-comment">//保存根元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count ;<span class="hljs-comment">//保存数据的个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> foot ;<span class="hljs-comment">//描述的是操作数组的脚标</span><br>    <span class="hljs-keyword">private</span> Object[] returnData ;<span class="hljs-comment">//返回的数据保存</span><br>    <span class="hljs-comment">//以下为Link类中定义的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//保存的数据为null</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法调用直接结束</span><br>        &#125;<br>        <span class="hljs-comment">//数据本身是不具有关联特性的，只有Node类有，那么要想实现关联处理必须将数据包装在Node类之中</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(e) ;<span class="hljs-comment">//创建一个新的节点</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//现在没有根节点</span><br>            <span class="hljs-built_in">this</span>.root = newNode ;<span class="hljs-comment">//第一个节点作为根节点</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//根节点存在</span><br>            <span class="hljs-built_in">this</span>.root.addNode(newNode) ;<span class="hljs-comment">//将新节点保存在合适的位置</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.count++ ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//return this.root ==null ;//这两种方法时一样的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count == <span class="hljs-number">0</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object[] toArray() &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEmpty()) &#123;<span class="hljs-comment">//空集合</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//现在没有数据</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//角标清零</span><br>        <span class="hljs-built_in">this</span>.returnData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span> [<span class="hljs-built_in">this</span>.count] ;<span class="hljs-comment">//根据已有的长度开辟数组</span><br>        <span class="hljs-built_in">this</span>.root.toArrayNode() ;<span class="hljs-comment">//利用Node类进行递归数据获取</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.returnData ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span>( index &gt; <span class="hljs-built_in">this</span>.count) &#123;<span class="hljs-comment">//索引应该在指定范围之内</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>        &#125;<span class="hljs-comment">//索引数据的获取应该由Node类完成</span><br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//重置下标</span><br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">this</span>.root.getNode(index) ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index,E data)</span> &#123;<br>        <span class="hljs-keyword">if</span>( index &gt; <span class="hljs-built_in">this</span>.count) &#123;<span class="hljs-comment">//索引应该在指定范围之内</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法结束</span><br>        &#125;<span class="hljs-comment">//索引数据的获取应该由Node类完成</span><br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//重置下标</span><br>        <span class="hljs-built_in">this</span>.root.setNode(index,data) ;<span class="hljs-comment">//修改数据</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(E data)</span> &#123;<br>        <span class="hljs-keyword">if</span>( data == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<span class="hljs-comment">//没有数据</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.root.containsNode(data) ;<span class="hljs-comment">//交给Node判断</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(E data)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.contains(data))&#123;<span class="hljs-comment">//判断是否存在</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root.data.equals(data))&#123;<span class="hljs-comment">//根节点为要删除节点</span><br>                <span class="hljs-built_in">this</span>.root = <span class="hljs-built_in">this</span>.root.next ;<span class="hljs-comment">//根的下一个节点</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//交由Node类删除</span><br>                <span class="hljs-built_in">this</span>.root.next.removeNode(<span class="hljs-built_in">this</span>.root,data) ;<br>            &#125;<br>            <span class="hljs-built_in">this</span>.count-- ;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//以下为Link类中定义的结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        ILink&lt;String&gt; all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkImpl</span>&lt;String&gt;();<br>        System.out.println(<span class="hljs-string">&quot;【增加之前】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        all.add(<span class="hljs-string">&quot;hello&quot;</span>) ;<br>        all.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        all.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        all.remove(<span class="hljs-string">&quot;world&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;【增加之后】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        Object result [] = all.toArray() ;<br>        <span class="hljs-keyword">for</span>(Object obj : result) &#123;<br>            System.out.println(obj) ;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;---------数据获取的分割线----------&quot;</span>) ;<br>        System.out.println(all.get(<span class="hljs-number">0</span>));<br>        System.out.println(all.get(<span class="hljs-number">1</span>));<br>        System.out.println(all.get(<span class="hljs-number">4</span>));<br>        System.out.println(<span class="hljs-string">&quot;---------数据判断的分割线----------&quot;</span>) ;<br>        System.out.println(all.contains(<span class="hljs-string">&quot;高&quot;</span>));<br>        System.out.println(all.contains(<span class="hljs-string">&quot;hello&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除逻辑依靠引用的改变处理完成</p><h2 id="94-链表——清空链表"><a href="#94-链表——清空链表" class="headerlink" title="94.链表——清空链表"></a>94.链表——清空链表</h2><p>1、在<code>ILink</code>接口中追加清空处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//清空集合</span><br></code></pre></td></tr></table></figure><p>2、在<code>LinkImpl</code>子类中覆写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">claen</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.root = <span class="hljs-literal">null</span>;<span class="hljs-comment">//后续节点都没有了</span><br>    <span class="hljs-built_in">this</span>.count = <span class="hljs-number">0</span> ;<span class="hljs-comment">//个数清零</span><br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<span class="hljs-comment">//设置泛型避免安全隐患</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> ;<span class="hljs-comment">//增加数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//获取数据的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//判断是否是空集合</span><br>    <span class="hljs-keyword">public</span> Object [] toArray() ;<span class="hljs-comment">//将集合元素以数组的形式返回</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> ;<span class="hljs-comment">//根据索引获取数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> indext,E data)</span> ;<span class="hljs-comment">//修改1索引数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(E data)</span> ;<span class="hljs-comment">//判断数据是否存在</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(E e)</span> ;<span class="hljs-comment">//数据删除</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//清空集合</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkImpl</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILink</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-comment">//保存节点的数据关系</span><br>        <span class="hljs-keyword">private</span> E data ;<span class="hljs-comment">//保存到数据</span><br>        <span class="hljs-keyword">private</span> Node next;<span class="hljs-comment">//保存下一个引用</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<span class="hljs-comment">//有数据才有意义</span><br>            <span class="hljs-built_in">this</span>.data = data ;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root;</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(Node newNode)</span> &#123;<span class="hljs-comment">//保存新的Node数据</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//当前节点的下一个节点为null</span><br>                <span class="hljs-built_in">this</span>.next = newNode ;<span class="hljs-comment">//保存当前节点</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.next.addNode(newNode) ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第一次调用：this = LinkImpl.root</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toArrayNode</span><span class="hljs-params">()</span> &#123;<br>            LinkImpl.<span class="hljs-built_in">this</span>.returnData [LinkImpl.<span class="hljs-built_in">this</span>.foot++] = <span class="hljs-built_in">this</span>.data ;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next !=<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//还有下一个数据</span><br>                <span class="hljs-built_in">this</span>.next.toArrayNode() ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br><br>            <span class="hljs-keyword">if</span>(LinkImpl.<span class="hljs-built_in">this</span>.foot++ == index) &#123;<span class="hljs-comment">//索引相同</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data ;<span class="hljs-comment">//返回当前数据</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.next.getNode(index) ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index ,E data)</span> &#123;<br>            <span class="hljs-keyword">if</span>(LinkImpl.<span class="hljs-built_in">this</span>.foot++ == index) &#123;<span class="hljs-comment">//索引相同</span><br>                <span class="hljs-built_in">this</span>.data = data;<span class="hljs-comment">//修改当前数据</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-built_in">this</span>.next.setNode(index,data); ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsNode</span><span class="hljs-params">(E data)</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.data.equals(data)) &#123;<span class="hljs-comment">//对象比较</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.next ==<span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//没有后续节点</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<span class="hljs-comment">//找不到</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.next.containsNode(data);<span class="hljs-comment">//向后继续判断</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeNode</span><span class="hljs-params">(Node previous,E e)</span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.data.equals(data)) &#123;<br>                previous.next = <span class="hljs-built_in">this</span>.next ;<span class="hljs-comment">//空出当前节点</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.next != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-built_in">this</span>.next.removeNode(<span class="hljs-built_in">this</span>,data) ;<span class="hljs-comment">//向后继续删除</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//以下为Link类中定义的成员</span><br>    <span class="hljs-keyword">private</span> Node root ;<span class="hljs-comment">//保存根元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count ;<span class="hljs-comment">//保存数据的个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> foot ;<span class="hljs-comment">//描述的是操作数组的脚标</span><br>    <span class="hljs-keyword">private</span> Object[] returnData ;<span class="hljs-comment">//返回的数据保存</span><br>    <span class="hljs-comment">//以下为Link类中定义的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//保存的数据为null</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法调用直接结束</span><br>        &#125;<br>        <span class="hljs-comment">//数据本身是不具有关联特性的，只有Node类有，那么要想实现关联处理必须将数据包装在Node类之中</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(e) ;<span class="hljs-comment">//创建一个新的节点</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//现在没有根节点</span><br>            <span class="hljs-built_in">this</span>.root = newNode ;<span class="hljs-comment">//第一个节点作为根节点</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//根节点存在</span><br>            <span class="hljs-built_in">this</span>.root.addNode(newNode) ;<span class="hljs-comment">//将新节点保存在合适的位置</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.count++ ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//return this.root ==null ;//这两种方法时一样的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count == <span class="hljs-number">0</span> ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object[] toArray() &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEmpty()) &#123;<span class="hljs-comment">//空集合</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<span class="hljs-comment">//现在没有数据</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//角标清零</span><br>        <span class="hljs-built_in">this</span>.returnData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span> [<span class="hljs-built_in">this</span>.count] ;<span class="hljs-comment">//根据已有的长度开辟数组</span><br>        <span class="hljs-built_in">this</span>.root.toArrayNode() ;<span class="hljs-comment">//利用Node类进行递归数据获取</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.returnData ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span>( index &gt; <span class="hljs-built_in">this</span>.count) &#123;<span class="hljs-comment">//索引应该在指定范围之内</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>        &#125;<span class="hljs-comment">//索引数据的获取应该由Node类完成</span><br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//重置下标</span><br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">this</span>.root.getNode(index) ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index,E data)</span> &#123;<br>        <span class="hljs-keyword">if</span>( index &gt; <span class="hljs-built_in">this</span>.count) &#123;<span class="hljs-comment">//索引应该在指定范围之内</span><br>            <span class="hljs-keyword">return</span> ;<span class="hljs-comment">//方法结束</span><br>        &#125;<span class="hljs-comment">//索引数据的获取应该由Node类完成</span><br>        <span class="hljs-built_in">this</span>.foot = <span class="hljs-number">0</span> ;<span class="hljs-comment">//重置下标</span><br>        <span class="hljs-built_in">this</span>.root.setNode(index,data) ;<span class="hljs-comment">//修改数据</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(E data)</span> &#123;<br>        <span class="hljs-keyword">if</span>( data == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<span class="hljs-comment">//没有数据</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.root.containsNode(data) ;<span class="hljs-comment">//交给Node判断</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(E data)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.contains(data))&#123;<span class="hljs-comment">//判断是否存在</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root.data.equals(data))&#123;<span class="hljs-comment">//根节点为要删除节点</span><br>                <span class="hljs-built_in">this</span>.root = <span class="hljs-built_in">this</span>.root.next ;<span class="hljs-comment">//根的下一个节点</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//交由Node类删除</span><br>                <span class="hljs-built_in">this</span>.root.next.removeNode(<span class="hljs-built_in">this</span>.root,data) ;<br>            &#125;<br>            <span class="hljs-built_in">this</span>.count-- ;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.root = <span class="hljs-literal">null</span> ;<span class="hljs-comment">//后续所有节点都没有了</span><br>        <span class="hljs-built_in">this</span>.count = <span class="hljs-number">0</span> ;<span class="hljs-comment">//个数清零</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//以下为Link类中定义的结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        ILink&lt;String&gt; all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkImpl</span>&lt;String&gt;();<br>        System.out.println(<span class="hljs-string">&quot;【增加之前】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        all.add(<span class="hljs-string">&quot;hello&quot;</span>) ;<br>        all.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        all.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        all.remove(<span class="hljs-string">&quot;world&quot;</span>);<br>        all.clean() ;<br>        System.out.println(<span class="hljs-string">&quot;【增加之后】数据的个数：&quot;</span> + all.size() + <span class="hljs-string">&quot;、判断是否为空集合：&quot;</span> + all.isEmpty()) ;<br>        Object result [] = all.toArray() ;<br>        <span class="hljs-keyword">for</span>(Object obj : result) &#123;<br>            System.out.println(obj) ;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;---------数据获取的分割线----------&quot;</span>) ;<br>        System.out.println(all.get(<span class="hljs-number">0</span>));<br>        System.out.println(all.get(<span class="hljs-number">1</span>));<br>        System.out.println(all.get(<span class="hljs-number">4</span>));<br>        System.out.println(<span class="hljs-string">&quot;---------数据判断的分割线----------&quot;</span>) ;<br>        System.out.println(all.contains(<span class="hljs-string">&quot;高&quot;</span>));<br>        System.out.println(all.contains(<span class="hljs-string">&quot;hello&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上就是最简单最基础的单向链表的实现</p><h1 id="三、java语言高级特性"><a href="#三、java语言高级特性" class="headerlink" title="三、java语言高级特性"></a>三、java语言高级特性</h1><h3 id="Thread实现多线程"><a href="#Thread实现多线程" class="headerlink" title="Thread实现多线程"></a>Thread实现多线程</h3><p>多线程应该执行的功能都应该在<code>run()</code>方法中定义</p><p>要想启动多线程，需要<code>Start()</code>方法执行</p><p>例：使用<code>run()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> String title ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//线程的主题方法</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; x &lt; <span class="hljs-number">10</span> ;x ++) &#123;<br>                System.out.println(<span class="hljs-built_in">this</span>.title + <span class="hljs-string">&quot;运行,x = &quot;</span>+ x);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;线程A&quot;</span>).run() ;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;线程b&quot;</span>).run() ;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;线程c&quot;</span>).run() ;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">线程A运行,x = 0<br>线程A运行,x = 1<br>线程A运行,x = 2<br>线程A运行,x = 3<br>线程A运行,x = 4<br>线程A运行,x = 5<br>线程A运行,x = 6<br>线程A运行,x = 7<br>线程A运行,x = 8<br>线程A运行,x = 9<br>线程b运行,x = 0<br>线程b运行,x = 1<br>线程b运行,x = 2<br>线程b运行,x = 3<br>线程b运行,x = 4<br>线程b运行,x = 5<br>线程b运行,x = 6<br>线程b运行,x = 7<br>线程b运行,x = 8<br>线程b运行,x = 9<br>线程c运行,x = 0<br>线程c运行,x = 1<br>线程c运行,x = 2<br>线程c运行,x = 3<br>线程c运行,x = 4<br>线程c运行,x = 5<br>线程c运行,x = 6<br>线程c运行,x = 7<br>线程c运行,x = 8<br>线程c运行,x = 9<br></code></pre></td></tr></table></figure><p>并没有交替执行</p><p>例：调用<code>start()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> String title ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//线程的主题方法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; x &lt; <span class="hljs-number">10</span> ;x ++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.title + <span class="hljs-string">&quot;运行,x = &quot;</span>+ x);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程b&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程c&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">线程A运行,x = <span class="hljs-number">0</span><br>线程c运行,x = <span class="hljs-number">0</span><br>线程c运行,x = <span class="hljs-number">1</span><br>线程c运行,x = <span class="hljs-number">2</span><br>线程c运行,x = <span class="hljs-number">3</span><br>线程c运行,x = <span class="hljs-number">4</span><br>线程c运行,x = <span class="hljs-number">5</span><br>线程b运行,x = <span class="hljs-number">0</span><br>线程c运行,x = <span class="hljs-number">6</span><br>线程c运行,x = <span class="hljs-number">7</span><br>线程c运行,x = <span class="hljs-number">8</span><br>线程A运行,x = <span class="hljs-number">1</span><br>线程A运行,x = <span class="hljs-number">2</span><br>线程A运行,x = <span class="hljs-number">3</span><br>线程c运行,x = <span class="hljs-number">9</span><br>线程b运行,x = <span class="hljs-number">1</span><br>线程A运行,x = <span class="hljs-number">4</span><br>线程b运行,x = <span class="hljs-number">2</span><br>线程A运行,x = <span class="hljs-number">5</span><br>线程A运行,x = <span class="hljs-number">6</span><br>线程A运行,x = <span class="hljs-number">7</span><br>线程A运行,x = <span class="hljs-number">8</span><br>线程A运行,x = <span class="hljs-number">9</span><br>线程b运行,x = <span class="hljs-number">3</span><br>线程b运行,x = <span class="hljs-number">4</span><br>线程b运行,x = <span class="hljs-number">5</span><br>线程b运行,x = <span class="hljs-number">6</span><br>线程b运行,x = <span class="hljs-number">7</span><br>线程b运行,x = <span class="hljs-number">8</span><br>线程b运行,x = <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>虽然程序是<code>start()</code>方法，但执行的是<code>run()</code>方法</p><p><code>start()</code>方法源代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.threadStatus != <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalThreadStateException</span>(); <span class="hljs-comment">//抛出了一个异常</span><br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-built_in">this</span>.group.add(<span class="hljs-built_in">this</span>);<br>           <span class="hljs-type">boolean</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-built_in">this</span>.start0();<span class="hljs-comment">//在start方法中调用了start0方法</span><br>               var1 = <span class="hljs-literal">true</span>;<br>           &#125; <span class="hljs-keyword">finally</span> &#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   <span class="hljs-keyword">if</span> (!var1) &#123;<br>                       <span class="hljs-built_in">this</span>.group.threadStartFailed(<span class="hljs-built_in">this</span>);<br>                   &#125;<br>               &#125; <span class="hljs-keyword">catch</span> (Throwable var8) &#123;<br>               &#125;<br><br>           &#125;<br><br>       &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start0</span><span class="hljs-params">()</span>;<span class="hljs-comment">//只定义了方法名称，但是没有实现</span><br></code></pre></td></tr></table></figure><p><code>start()</code>方法中会抛出 <code>IllegalThreadStateException</code> 异常类对象，但整个程序并没有使用<code>throws</code> 或明确的 <code>try...catch</code> 处理，因为该异常一定是 <code>RuntimeException</code> 的子类，每一个线程类的对象只允许启动一次，如果重复启动，则会抛出异常</p><p>例：重复启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> String title ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//线程的主题方法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; x &lt; <span class="hljs-number">10</span> ;x ++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.title + <span class="hljs-string">&quot;运行,x = &quot;</span>+ x);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Mythread</span> <span class="hljs-variable">mt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程A&quot;</span>) ;<br>    mt.start() ;<br>        mt.start() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.IllegalThreadStateException<br></code></pre></td></tr></table></figure><p>JNI：Java Native Inteface 技术（本地操作系统函数调用），利用此技术，可以使用一些操作系统底层的函数进行一些特殊的处理，而在 <code>Thread</code> 类中提供的 <code>start0()</code> 就表示需要将此方法依赖于不同的操作系统实现。</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/20200629195426.png" alt="image-20200629195426629"></p><h3 id="Runable接口实现多线程"><a href="#Runable接口实现多线程" class="headerlink" title="Runable接口实现多线程"></a>Runable接口实现多线程</h3><p>java.lang.Runnable接口，此接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><span class="hljs-comment">//JDK1.8引入了Lambda表达式之后就变为了函数式接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：通过 Runnable 实现主题类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">package</span> developer.aliyun.com;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> String title ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title ;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.title + <span class="hljs-string">&quot;运行. x = &quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">mt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程A&quot;</span>);<br>        <span class="hljs-comment">// 由于继承的式runnable而不是Thread类所提供的构造方法此时需要观察Thread类所提供的构造方法</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程A&quot;</span>));<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程B&quot;</span>));<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程C&quot;</span>));<br>        threadA.start();<br>        threadB.start();<br>        threadC.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时多线程实现中由于只是实现了Runnable接口对象，所以线程主题类上就不再有单继承局限了，此时的设计符合标准性设计，所以页可以利用lambda表达式进程线程类的实现。</p><p>例：利用 Lambda 实现多线程定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> developer.aliyun.com;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> String title ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title ;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.title + <span class="hljs-string">&quot;运行. x = &quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">方式二</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;线程对象-&quot;</span> + i;<br>            <span class="hljs-type">Runnable</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> ()-&gt;&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; y &lt; <span class="hljs-number">10</span>; y++) &#123;<br>                    System.out.println(title + <span class="hljs-string">&quot;运行.y = &quot;</span> + y);<br>                &#125;<br>            &#125;;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(run).start(); ;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*方式一</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">public class ThreadDemo &#123;</span><br><span class="hljs-comment">    public static void main(String[] args) &#123;</span><br><span class="hljs-comment">         for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="hljs-comment">            String title = &quot;线程对象-&quot; + i;</span><br><span class="hljs-comment">            new Thread(()-&gt;&#123;</span><br><span class="hljs-comment">                for (int y = 0; y &lt; 10; y++) &#123;</span><br><span class="hljs-comment">                    System.out.println(title + &quot;运行.y = &quot; + y);</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;).start(); ;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="Java基础类库"><a href="#Java基础类库" class="headerlink" title="Java基础类库"></a>Java基础类库</h3><h4 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h4><p>String类是开发中常用的功能，此类有如下特点</p><ul><li>每一个字符串常量都属于一个String类的匿名对象，并且不可更改</li><li>String有两个常量池：静态常量池、运行时常量池；</li><li>String类对象实例化建议使用直接复制的形式完成，这样可以将对象保存在对象池之中方便下次重用</li></ul><p>虽然String类很方便使用，但也有弊端：内容不予许修改</p><p>为了解决此问题，java提供了 StringBuffer 类</p><p>例：观察 String 与 StringBuffer 对比</p><p>String 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> ;<br>        change(str) ;<br>        System.out.println(str);<br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String temp)</span> &#123;<br>        temp += <span class="hljs-string">&quot;world!&quot;</span> ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>StringBuffer 并不像String类那样拥有两种对象实例化方式，StringBuffer 必须像普通类一样，先实例化才可以调用方法处理</p><p>StringBuffer 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;Hello&quot;</span>) ;<br>        change(buf) ;<br>        System.out.println(buf);<br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(StringBuffer temp)</span> &#123;<br>        temp.append(<span class="hljs-string">&quot; World!&quot;</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>String 类对象变为 StringBuffer 可以依靠 StringBuffer 类的构造方法或使用 append 方法</li><li>所有类对象都可以通过toString 方法将其变为 String 类型</li></ul><p>在 StringBuffer 类中 String 类不具备的方法</p><p>插入数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        buf.append(<span class="hljs-string">&quot;.cn&quot;</span>).insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;www&quot;</span>).insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;ll&quot;</span>);<br>        System.out.println(buf);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        buf.append(<span class="hljs-string">&quot;.cn&quot;</span>).insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;www&quot;</span>).insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;ll&quot;</span>).delete(<span class="hljs-number">6</span>,<span class="hljs-number">11</span>);<br>        System.out.println(buf);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反转数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        buf.append(<span class="hljs-string">&quot;.cn&quot;</span>).insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;www&quot;</span>).insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;ll&quot;</span>).delete(<span class="hljs-number">6</span>,<span class="hljs-number">11</span>).reverse();<br>        System.out.println(buf);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>与 StringBuffer 类中类似功能类 StringBuilder</p><p><strong>面试题</strong>：情节是 String、StringBuffer、StringBuilder 的区别</p><ul><li>String 类是字符串的首选类型，其最大的特点是内容不允许修改</li><li>StringBuffer 与 StringBuilder 类的内容允许修改；</li><li>StringBuffer 是在JDK1.0的时候提供的，属于线程安全的操作，而 StringBuilder 是JDK1.5之后提供的，属于非线程安全的操作</li></ul><h4 id="CharSequence接口"><a href="#CharSequence接口" class="headerlink" title="CharSequence接口"></a>CharSequence接口</h4><p>CharSequence是描述字符串结构的几口，在这个接口中一般有三种常用子类String、String Buffer、StringBuilder</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200521163323568.png" alt="image-20200521163323568"></p><p>现在只要有字符串就可以为 CharSequence 接口实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">CharSequence</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mld.cn&quot;</span> ;<span class="hljs-comment">//子类实例向父接口转型</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>CharSequence 本身是一个接口，在该接口之中定义有如下操作方法：</p><ul><li>获取指定索引字符：<code> public char charAt(int index) ;</code></li><li>获取字符串长度：<code>public int length()</code></li><li>获取截取部分字符串：<code>public CharSequence subSequencd(int start,int end);</code></li></ul><p>例：字符串截取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">CharSequence</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.mld.cn&quot;</span> ;<span class="hljs-comment">//子类实例向父接口转型</span><br>        <span class="hljs-type">CharSequence</span> <span class="hljs-variable">sub</span> <span class="hljs-operator">=</span> str.subSequence(<span class="hljs-number">4</span>,<span class="hljs-number">8</span>);<br>        System.out.println(sub) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以，CharSequence描述的是字符串</p><h4 id="AutoCloseable"><a href="#AutoCloseable" class="headerlink" title="AutoCloseable"></a>AutoCloseable</h4><p>主要是用于日后进行资源开发的处理上，以实现资源的自动关闭（释放），在进行数据库网络服务器开发之中由于服务器的资源优先，所以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//消息发送</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NetMessage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessage</span>&#123;<br>    <span class="hljs-comment">//实现消息处理机制</span><br>    <span class="hljs-keyword">private</span>  String msg ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NetMessage</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msg = msg ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;获取消息发送资源连接&quot;</span>);<br>        <span class="hljs-keyword">return</span>  <span class="hljs-literal">true</span> ;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.open())&#123;<br>            System.out.println(<span class="hljs-string">&quot;消息发送： &quot;</span> + <span class="hljs-built_in">this</span>.msg );<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;关闭消息发送通道&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NetMessage</span> <span class="hljs-variable">nm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NetMessage</span>(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;<span class="hljs-comment">//定义发送处理</span><br>            <span class="hljs-comment">//判断是否打开了连接</span><br>            nm.send() ;<span class="hljs-comment">//消息发送</span><br>            nm.close();<span class="hljs-comment">//关闭连接</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在JDK1.7的时候提供了 AutoCloseable 该接口只提供有一个方法：</p><ul><li>关闭方法：public void close() throws Exception;</li></ul><p>例：实现自动关闭处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AutoCloseable</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> ;<span class="hljs-comment">//消息发送</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NetMessage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessage</span>,AutoCloseable&#123;<br>    <span class="hljs-comment">//实现消息处理机制</span><br>    <span class="hljs-keyword">private</span>  String msg ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NetMessage</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msg = msg ;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;获取消息发送资源连接&quot;</span>);<br>        <span class="hljs-keyword">return</span>  <span class="hljs-literal">true</span> ;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.open())&#123;<br>            System.out.println(<span class="hljs-string">&quot;消息发送： &quot;</span> + <span class="hljs-built_in">this</span>.msg );<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        System.out.println(<span class="hljs-string">&quot;关闭消息发送通道&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">IMessage</span> <span class="hljs-variable">nm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NetMessage</span>(<span class="hljs-string">&quot;www.mldn.cn&quot;</span>) ;)&#123;<br>            nm.send();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br><br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：Autocloseable要和异常一起使用，才能正确完成关闭过程</p><h4 id="Runtime-类"><a href="#Runtime-类" class="headerlink" title="Runtime 类"></a>Runtime 类</h4><p>Runtime 描述的是运行时的状态，也就是说在整个JVM之中，Runtime 是唯一一个与JVM运行状态有关的类并且默认提供一个该类的实例化对象</p><p>由于在每个JVM进程中只允许提供一个Runtime类对象，所以此类的构造方法被默认私有化，所以该类使用的是单例设计模式，并且单例设计模式一定有一个static方法获取本类实例</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200522101511186.png" alt="image-20200522101511186"></p><p>由于 Runtime类属于单例设计模式，如果要想获取实例化对象，那么就可以依靠类中的 getRuntime 完成</p><ul><li>获取实例化对象：<code>public static Runtime getRuntime()</code></li></ul><p>例：获取 Runtime 类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> Runtime.getRuntime() ;<br>        System.out.println(run.availableProcessors());<span class="hljs-comment">//通过操作系统，获取进程数</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>获取最大可用空间：<code>public long maxMemory()//默认配置为本机系统内存的四分之一</code> </li><li>获取可用内存空间：<code>public long totalMemory()</code></li><li>获取空闲内存空间：<code>public long freeMemory()</code></li><li>手工进行GC 处理：<code>public void gc() </code></li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> Runtime.getRuntime() ;<br>        System.out.println(<span class="hljs-string">&quot;1、MAx_memory:&quot;</span> + run.maxMemory());<br>        System.out.println(<span class="hljs-string">&quot;2、TOTLA_memory:&quot;</span> + run.totalMemory());<br>        System.out.println(<span class="hljs-string">&quot;3、FREE_memory:&quot;</span> + run.freeMemory());<br>        run.gc() ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>面试题：</strong>什么是GC？如何处理</p><p>GC是（Garbage Collector）垃圾收集器，是可以由系统自动调用垃圾手机功能，或者使用 Runtime 类中的 <code>gc()</code>手工调用</p><h4 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h4><ul><li><p>数组拷贝：<code>public static void arrycopy()</code></p></li><li><p>获取当前的日期时间的数据值：<code>public static long currentTimeMillis()</code></p></li><li><p>进行垃圾回收：<code>public static void gc()</code></p></li></ul><p>例：操作耗时的统计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis() ;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> Runtime.getRuntime() ;<span class="hljs-comment">//获取实例化对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; x &lt; <span class="hljs-number">3000</span> ;x ++) &#123;<br>                str += x ;<span class="hljs-comment">//产生大量的垃圾空间</span><br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis() ;<br>    System.out.println(<span class="hljs-string">&quot;操作耗时&quot;</span> + (end - start));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>System.out.prinln中的方法并没有重新定义gc()方法，而是继续调用了 Runtime类中的gc操作（<code>Runtime.getRuntime().gc();</code>）</p><h4 id="cleaner类"><a href="#cleaner类" class="headerlink" title="cleaner类"></a>cleaner类</h4><p>cleaner类是在JDK1.9之后提供的一个对象清理操作，其主要功能是进行<code>finalize()</code>方法的替代，在C++语言中由两种特殊函数：构造函数、析构函数（对象手工回收），在Java中所有的垃圾空间都是通过GC自动回收的，所以很多情况下是不需要使用这类析函数，也正是因为如此，所以Java并没有提供这方面的支持。</p><p>但Java本身以然提供了首位的操作，每一个实例化对象在回收之前至少有喘息的机会，最早是 Object 类中提供的 <code>finalize()</code>方法，这个方法的定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Deprecated(since = &quot;9&quot;)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable<br></code></pre></td></tr></table></figure><p>该替换指的是不建议继续使用这个方法了，而是说子类可以继续使用这个方法名称。但此方法最大的特点是抛出了一个 Throwabe 异常类型，而这个异常类型分为两个子类型：Error、Exception</p><p>例：传统回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Member</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Member</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;在一个雷电交加的日子里&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;【回收】最终一定会死&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;还要再活500年&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Member</span> <span class="hljs-variable">mem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Member</span>() ;<span class="hljs-comment">//诞生</span><br>        mem = <span class="hljs-literal">null</span> ;<span class="hljs-comment">//称为垃圾</span><br>        System.gc() ;<br>        System.out.println(<span class="hljs-string">&quot;太阳照常升起，地球照常转动&quot;</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从JDK1.9开始，这一操已不建议使用，从JDK1.9开始建议开发者使用 AutoCloseabel 和 java.lang.ref.Cleaner 类进行回收处理(Cleaner也支持AutoCloseable处理)</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> sun.misc.Cleaner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Member</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Member</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;在一个雷电交加的日子里&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;【回收】最终一定会死&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberCleaning</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AutoCloseable</span>&#123;<br>    <span class="hljs-comment">//实现清除的处理</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Cleaner</span> <span class="hljs-variable">cleaner</span> <span class="hljs-operator">=</span> Cleaner.create();<span class="hljs-comment">//创建清除处理</span><br>    <span class="hljs-keyword">private</span>  Member member;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cleaner. cleanable;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MemberCleaning</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.member = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Member</span>() ;<span class="hljs-comment">//创建新对象</span><br>        <span class="hljs-built_in">this</span>.clenable =  <span class="hljs-built_in">this</span>.cleaner.register(<span class="hljs-built_in">this</span>,<span class="hljs-built_in">this</span>.member) ;<span class="hljs-comment">//注册使用的对象</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">this</span>.cleanable.clean();<span class="hljs-comment">//启动多线程</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-keyword">try</span> (<span class="hljs-type">MemberCleaning</span> <span class="hljs-variable">mc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemberCleaning</span>())&#123;<br>           <span class="hljs-comment">//执行相关代码</span><br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           <br>       &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在新一代的清除回收，处理之中，跟多情况下考虑的是多线程的使用，即（为了防止可能造成的延迟处理，所以许多对象回收前的处理都是单独通过一个线程完成的）：</p><h4 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h4><p>所谓对象克隆指的就是对象的复制，而且属于全新的复制。即：使用已有对象内容创建一个新的对象，如果要想进行对象克隆，需要使用 Object 类中提供 <code>clone()</code>方法，所有的类都会受<code>clone()</code>方法，但是并不是所有的类都希望被克隆。所以要实现对象克隆，对象所在的类需要实现一个 Cloneable接口，此接口并没有任何一个方法</p><p>例：实现对象克隆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Member</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Member</span><span class="hljs-params">(String name ,<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name ;<br>        <span class="hljs-built_in">this</span>.age = age ;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;【&quot;</span> + <span class="hljs-built_in">super</span>.toString() + <span class="hljs-string">&quot;】name = &quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;、age = &quot;</span> + <span class="hljs-built_in">this</span>.age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.clone();<span class="hljs-comment">//调用父类中clone方法</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Member</span> <span class="hljs-variable">memberA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Member</span>(<span class="hljs-string">&quot;林强&quot;</span>,<span class="hljs-number">30</span>) ;<br>        <span class="hljs-type">Member</span> <span class="hljs-variable">memberB</span> <span class="hljs-operator">=</span> (Member)memberA.clone() ;<br>        System.out.println(memberA) ;<br>        System.out.println(memberB) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Math数学计算类"><a href="#Math数学计算类" class="headerlink" title="Math数学计算类"></a>Math数学计算类</h4><ul><li>Math类</li></ul><p>主要功能是进行数学计算的操作类，提供有基础的计算公式，所有方法都是static方法，可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        System.out.println(Math.abs(-<span class="hljs-number">10</span>)) ;<span class="hljs-comment">//10</span><br>        System.out.println(Math.max(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)) ;<span class="hljs-comment">//2</span><br>        System.out.println(Math.log(<span class="hljs-number">5</span>)) ;<span class="hljs-comment">//1.609435</span><br>        System.out.println(Math.round(<span class="hljs-number">15.1</span>)) ;<span class="hljs-comment">//15</span><br>        System.out.println(Math.round(-<span class="hljs-number">15.5</span>)) ;<span class="hljs-comment">//-15</span><br>        System.out.println(Math.round(-<span class="hljs-number">15.51</span>)) ;<span class="hljs-comment">//-16</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的四舍五入时将小数点后的数字都四舍五入，这样肯定不方便，那么现在最方便的做法是实现指定位数的保留</p><p>例：自定义四舍五入功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">MathUtil</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 实现数据的四舍五入操作</span><br><span class="hljs-comment">        * @param num 要进行四舍五入操作</span><br><span class="hljs-comment">        * @param scale 四舍五入保留的小数位数</span><br><span class="hljs-comment">        * @return 四舍五入处理后的结果</span><br><span class="hljs-comment">        * */</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>   <span class="hljs-type">double</span> <span class="hljs-title function_">round</span><span class="hljs-params">(<span class="hljs-type">double</span> num,<span class="hljs-type">int</span> scale)</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.round(num * Math.pow(<span class="hljs-number">10</span>,scale))/ Math.pow(<span class="hljs-number">10</span>,scale) ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    System.out.println(MathUtil.round(<span class="hljs-number">19.8657</span>,<span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h4><ul><li>产生一个不大于边界的随机正整数、数：<code>public int nextInt(int bound)</code></li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>() ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; x &lt; <span class="hljs-number">10</span> ; x ++ ) &#123;<br>            System.out.println(rand.nextInt(<span class="hljs-number">10</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：36选7彩票</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">int</span> data [] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [<span class="hljs-number">7</span>] ;<span class="hljs-comment">//开辟7各大小的空间</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">foot</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<span class="hljs-comment">//操作data脚标</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>() ;<br>        <span class="hljs-keyword">while</span>(foot &lt; <span class="hljs-number">7</span>) &#123;<br>            <span class="hljs-comment">//7个数字</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> rand.nextInt(<span class="hljs-number">37</span>);<span class="hljs-comment">//生成一个数字</span><br>            <span class="hljs-keyword">if</span>(isUse(num,data))&#123;<br>                <span class="hljs-comment">//该数字现在可以使用</span><br>                data[foot ++] = num ;<span class="hljs-comment">//保存数据</span><br>            &#125;<br>        &#125;<br>        java.util.Arrays.sort(data);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x= <span class="hljs-number">0</span> ;x &lt; data.length ;x ++) &#123;<br>            System.out.print(data[x] +<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*判断传入的数字是否为0以及是否在数组之中存在</span><br><span class="hljs-comment">    @para num 要判断的数字</span><br><span class="hljs-comment">    @param temp 已经存在的数据</span><br><span class="hljs-comment">    @return 如果该数字不是0并且可以使用返回true，否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isUse</span><span class="hljs-params">(<span class="hljs-type">int</span> num,<span class="hljs-type">int</span> temp[])</span>&#123;<br>        <span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; x &lt; temp.length;x ++) &#123;<br>            <span class="hljs-keyword">if</span>(num == temp[x])&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>随机的操作都可以利用Random来处理</p><h4 id="大数字操作类"><a href="#大数字操作类" class="headerlink" title="大数字操作类"></a>大数字操作类</h4><p>可以实现海量的数字计算(能提供的也只是基础计算)，进行运算的数字很大，超过了double范围，那么这个时候并没有任何一种数据类型可以保存此类数字</p><p>如果现在想要进行假发计算，那么就需要诸位拆分，每一位自己计算，而后独立控制进位处理，那么这样的开发难度很高，为了解决此问题，提供BigInteger、BigDecimal类</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/move/image-20200525161648567.png" alt="image-20200525161648567"></p><ul><li>BigInteger 类构造：<code>public BigInteger(String val);</code></li><li>BigDecimal 类构造：<code>public BigDecimal(String val);</code></li></ul><p>例：使用 BigInteger 实现四则运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;2222222223131321213112323113&quot;</span>) ;<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;2131232132132132&quot;</span>) ;<br>        System.out.println(<span class="hljs-string">&quot;加法操作：&quot;</span> + bigA.add(bigB));<br>        System.out.println(<span class="hljs-string">&quot;减法操作：&quot;</span> + bigA.subtract(bigB));<br>        System.out.println(<span class="hljs-string">&quot;除法法操作：&quot;</span> + bigA.divide(bigB));<br>        System.out.println(<span class="hljs-string">&quot;乘法操作：&quot;</span> + bigA.multiply(bigB));<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在使用大数字操作时还需考虑性能问题</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;10&quot;</span>) ;<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;2131232132132132&quot;</span>) ;<br>        System.out.println(bigA.pow(Integer.MAX_VALUE));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此计算过程非常缓慢，在进行数学出发的时候无法进行整除的处理我们可以使用其他出发计算，以此可以求出余数</p><ul><li>求余：<code>public BigInteger[] divideandRemainder(BigInteger val)</code>第一个元素为商，第二个元素为余数</li></ul><p>例：求余除法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;231232132321123123213213&quot;</span>) ;<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;2131232132132132&quot;</span>) ;<br>        BigInteger redult [] =  bigA.divideAndRemainder(bigB);<br>        System.out.println(<span class="hljs-string">&quot;商：&quot;</span> + redult[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;、余数：&quot;</span> + redult[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果在开发中进行计算的时候，该计算若没有超过基本数据类型所包含的位数，强烈不建议使用大数字类，因为这种计算性能很差</p><p>BigDecimal 操作形式和 BigInteger 时非常类似，都有基础的数学支持</p><p>例：使用 BigDecimal 计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;111231242322132&quot;</span>) ;<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;12312312321&quot;</span>) ;<br>        System.out.println(<span class="hljs-string">&quot;加法计算，&quot;</span> + bigA.add(bigB));<br>        BigDecimal result[] = bigA.divideAndRemainder(bigB) ;<br>        System.out.println(<span class="hljs-string">&quot;乘除法计算，商，&quot;</span> + result[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;、余数，&quot;</span> + result[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在使用 BigDecimal 的时候有一个数据进位的问题，在这个类里有如下的除法计算</p><p>例：使用 BigDecimal 实现四舍五入类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.math.RoundingMode;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">MathUtil</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 实现数据的四舍五入操作</span><br><span class="hljs-comment">         * @param num 要进行四舍五入操作</span><br><span class="hljs-comment">         * @param scale 四舍五入保留的小数位数</span><br><span class="hljs-comment">         * @return 四舍五入处理后的结果</span><br><span class="hljs-comment">         * */</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>   <span class="hljs-type">double</span> <span class="hljs-title function_">round</span><span class="hljs-params">(<span class="hljs-type">double</span> num,<span class="hljs-type">int</span> scale)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(num).divide(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">1.0</span>),scale, RoundingMode.HALF_UP).doubleValue();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>       System.out.println(MathUtil.round(<span class="hljs-number">19.635</span>,<span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Math 的处理由于使用的都是基本数据类型，所以性能时高于大数字处理类</p><h4 id="Date日期处理类"><a href="#Date日期处理类" class="headerlink" title="Date日期处理类"></a>Date日期处理类</h4><p>Java中提供 Java.util.Date的类，此类如果直接实例化就可以获得当前日期时间</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() ;<br>        System.out.println(date) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过源代码分析可以得出结论：Date 类中只是对 long 数据的一种包装</p><ul><li>将 long 转为日期：<code>public Date(long date) ;</code></li><li>将Date转为 long：<code>public long getTime();</code></li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() ;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> date.getTime() ;<br>        current+= <span class="hljs-number">864000</span>*<span class="hljs-number">1000</span> ;<span class="hljs-comment">//10天的秒数</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(current)) ;<span class="hljs-comment">//long转为Date</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>long 之中可以保存毫秒的数据级，方便程序处理</p><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><p>Date 可以获取当前日期，但默认情况下 Date类输出的日期结构，并不被国人习惯，所以需要格式化处理，为了可以格式化日期，在 java.text包中提供有 SimpleDateFormat 程序类，该类中有如下方法</p><ul><li>【DateFormat 继承】将日期格式化：<code>public final String format(Date date) ;</code></li><li>【DateFormat 继承】将字符串转为日期：<code>public Date parse(String source)throws ParseException;</code></li><li>构造方法：<code>public SimpleDateFormat(String pattern);</code><ul><li>日期格式：年（yyyy）、月（MM）、日（dd）、时（HH）、分（mm）、秒（ss）、毫秒（SS）；</li></ul></li></ul><p>例：格式化日期显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() ;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sdf.format(date) ;<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了将日期格式化为字符串之后，也可以实现字符串与日期之间的转化处理</p><p>例：将日期转为Date</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">birthday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1846-11-11 11:11:11.111&quot;</span>;<span class="hljs-comment">//字符串日期</span><br><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf.parse(birthday) ;<br>        System.out.println(date);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：格式化money</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.NumberFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">234342332</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> NumberFormat.getInstance().format(money);<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由此可以发现 String 可以转化为任何类型</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>String 类型的数据在向其他数据类型转换的时候，为了保证转换的准确性，往往需要对其进行一些复杂的验证处理，那么这种情况下如果只是单纯的依靠 String 类中的方法，非常麻烦</p><p>例：判断字符串是否由数字组成，如果由数字组成则将其变为数字进行乘法计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span> ;<br>        <span class="hljs-keyword">if</span>(isNumber(str)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(str) ;<br>            System.out.println(num* <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNumber</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-type">char</span> data [] = str.toCharArray() ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;x &lt;data.length ;x++) &#123;<br>            <span class="hljs-keyword">if</span>(data[x] &gt; <span class="hljs-string">&#x27;9&#x27;</span> || data[x] &lt; <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上这种功能是十分简单的，但如此简单的功能，却需要开发者编写大量的程序代码。</p><p>例：使用正则表达式实现同样的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span> ;<br>        <span class="hljs-keyword">if</span>(str.matches(<span class="hljs-string">&quot;\\d+&quot;</span>)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(str) ;<br>            System.out.println(num* <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正则表达式最早是从 Perl 语言里发展而来的，而后在JDK1.4以前如果需要使用到正则表达式的相关定义，则需要单独引入*.jar文件，但是从JDK1.4之后，正则已经默认被JDK所支持，并且提供由 java.util.regex开发包，同时对于 String类也进行了一些修改，使其可以有方法直接支持正则处理。</p><p>使用正则最大的特点在于方便进行验证处理，以及方便进行字符串的修改处理。</p><h4 id="正则标记"><a href="#正则标记" class="headerlink" title="正则标记"></a>正则标记</h4><p>从JDK1.4开始提供 java.util.regex 开发包，包中提供 Pattern程序类，在这个类中定义所有支持的正则标记</p><ol><li><p>【数量单个】字符匹配</p><ul><li>任意字符：表示由任意字符组成；</li><li><code>\\</code>：匹配<code>\</code>;</li><li><code>\n</code>：匹配换行;</li><li><code>\t</code>匹配制表符;</li></ul></li><li><p>【数量：单个】字符集（可以从里面选取人一个字符）</p><ul><li><code>[abc]</code>：表示可能是字母a、b、c中的任意一个</li><li><code>[^abc]</code>：表示不是由字母a、b、c中的任意一个组成</li><li><code>[a-zA-Z]</code>：表示由任意字母组成，不区分大小写</li><li><code>[0-9]</code>：表示由一位数字构成 ；</li></ul></li><li><p>【数量：单个】简化字符集</p><ul><li><code>.</code>：表示任意一个字符;</li><li><code>\d</code>：等价于<code>[0-9]</code>范围</li><li><code>\D</code>：等价于<code>[^0-9]</code>范围</li><li><code>\s</code>：匹配任意的一位空格，可能是空格、换行、制表符</li><li><code>\S</code>：表示匹配任意的非空格数据</li><li><code>\w</code>：匹配字母、数字、下划线，等价于<code>[a-zA-Z 0-9]</code></li><li><code>\W</code>：非匹配字母、数字、下划线，等价于<code>[^a-zA-Z 0-9]</code></li></ul></li><li><p>边界匹配：</p><ul><li><code>^</code>：匹配边界开始</li><li><code>$</code>：匹配边界结束</li></ul></li><li><p>数量表达：默认情况下只有添加了数量单位才可以匹配多为字符；</p><ul><li><code>表达式?</code>：改正则可以出现 0 次或 1次;</li><li><code>表达式*</code>：改正则可以出现 0 次、1 次或多次；</li><li><code>表达式+</code>：改正则可以出现 1 次或多次;</li><li><code>表达式&#123;n&#125;</code>：表达式的长度正好为 n 次</li><li><code>表达式&#123;n,&#125;</code>：表达式长度为 n 次以上;</li><li><code>表达式&#123;n,m&#125;</code>：表达式的长度在n~m次</li></ul></li><li><p>逻辑表达式：可以连接多个正则：</p><ul><li><code>表达式 X 表达式 Y</code>：X 表达式之后紧跟上外表达式</li><li><code>表达式 X |表达式 Y</code>：有一个表达式满足即可;</li><li><code>(表达式)</code>：为表达式设置一个整体描述，可以为整体描述设置数量单位。</li></ul></li></ol><h4 id="String类对正则的支持"><a href="#String类对正则的支持" class="headerlink" title="String类对正则的支持"></a>String类对正则的支持</h4><p>在进行正则表达式大部分你处理的情况下都会基于 String 类来完成，并且在 String 类里提供有正则有关方法</p><table><thead><tr><th>No</th><th>方法名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public boolean matches(String regex)</code></td><td>普通</td><td>将指定字符串进行正则判断</td></tr><tr><td>2</td><td><code>public String replaceAll(String regex,String replacement)</code></td><td>普通</td><td>替换全部</td></tr><tr><td>3</td><td><code>public String replaceFirst(String regex,String replacement)</code></td><td>普通</td><td>替换首个</td></tr><tr><td>4</td><td><code>public String[] split(String regex)</code></td><td>普通</td><td>正则拆分</td></tr><tr><td>5</td><td><code>public String[] split(String regex,int limit)</code></td><td>普通</td><td>正则拆分为指定个数</td></tr></tbody></table><p>下面通过具体的范例来对正则的使用进行说明</p><p>例：实现字符串的替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;adfa fdskfjlj12lj412!@$@!$af lkadfsj&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[^a-zA-Z0-9]+&quot;</span> ;<span class="hljs-comment">//正则表达式</span><br>        System.out.println(str.replaceAll(regex,<span class="hljs-string">&quot;&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：字符串拆分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1232241adf112213213df14&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d+&quot;</span> ;<span class="hljs-comment">//正则表达式</span><br>        String result [] = str.split(regex) ;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; result.length; i++) &#123;<br>            System.out.print(result[i] + <span class="hljs-string">&quot;、&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在正则处理的时候对于差分和替换炒作相对容易</p><p>例：判断一个数据时候为小数，如果是小数则将其变为 double 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123.123&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d+(\\.\\d+)?&quot;</span> ;<span class="hljs-comment">//正则表达式</span><br>        System.out.println(str.matches(regex));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：判断一个字符串是否由日期组成，如果是由日期组成，则将其转为 Date 类型 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1981-10-14&quot;</span> ;<span class="hljs-comment">//需要判断的数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;&quot;</span> ;<span class="hljs-comment">//正则表达式</span><br>        System.out.println(str.matches(regex));<br>        <span class="hljs-keyword">if</span> (str.matches(regex)) &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>).parse(str));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正则不能判断具体含义，只能进行格式的判断</p><p>例：判断给定的电话号码是否正确</p><ul><li>51283346 <code>\\d&#123;7,8&#125;</code></li><li>01051283346 <code>(\\d&#123;3,4&#125;)?\\d&#123;7,8&#125;</code></li><li>(010)-51483346 <code>((\\d&#123;3,4&#125;)|(\\(\\d&#123;3,4&#125;\\))-)?\\d&#123;7,8&#125;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(010)-51483346&quot;</span> ;<span class="hljs-comment">//需要判断的数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;((\\d&#123;3,4&#125;)|(\\(\\d&#123;3,4&#125;\\))-)?\\d&#123;7,8&#125;&quot;</span> ;<span class="hljs-comment">//正则表达式</span><br>        System.out.println(str.matches(regex));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：验证 email 格式</p><ul><li>email 的用户名可以由字母、数字、_所组成;</li><li>email 的域名可以由字母、数字、_、-所组成;</li><li>域名的后最必须是：.cn、.com、 .net、.com.cn、，gov;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aldfj1f124@adf.com.cn&quot;</span> ;<span class="hljs-comment">//需要判断的数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[a-zA-Z0-9]\\w+@\\w+\\.(cn|com|net|gob|com.cn)&quot;</span> ;<span class="hljs-comment">//正则表达式</span><br>        System.out.println(str.matches(regex));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="java-util-regex-开发包"><a href="#java-util-regex-开发包" class="headerlink" title="java.util.regex 开发包"></a>java.util.regex 开发包</h4><p>此类有两个类：Pattern （正则表达式的编译）、Matcher（匹配）</p><ol><li>pattern 类提供有正则表达式的编译处理支持：<code>public static Pattern compile(String regex);</code>也提供字符串拆封操作：<code>public String[] split(CharSequence input);</code></li></ol><p>例：拆分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Jaldjlajdsfl(194019809*(@#!34k&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[^a-zA-Z]+&quot;</span>;<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pat</span> <span class="hljs-operator">=</span> Pattern.compile(regex) ;<span class="hljs-comment">//编译正则表达式</span><br>        String result[] = pat.split(str);<span class="hljs-comment">//拆分</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; result.length; i++) &#123;<br>            System.out.println(result[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Matcher 类，实现了正则匹配处理类，这个类的对象实例化依靠 Pattern 类完成：<ul><li>Pattern 类提供的方法：<code>public Mathcer matcher(CharSequence input);</code> 当获取了 Matcher 类的对象那个之后就可以利用该类中的方法进行如下操作</li><li>正则匹配：<code>public boolean matches();</code></li><li>字符串替换：<code>public String replaceAll(String replacement)</code></li></ul></li></ol><p>例：字符串匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;101&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d+&quot;</span>;<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pat</span> <span class="hljs-operator">=</span> Pattern.compile(regex) ;<span class="hljs-comment">//编译正则表达式</span><br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">mat</span> <span class="hljs-operator">=</span> pat.matcher(str) ;<br>        System.out.println(mat.matches());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果纯粹以拆分、替换、匹配三种操作为例，根本用不到 java.util.regex 开发包，只依靠 String 类都可以实现。但 Matcher 类之中提供分组的功能，而这种分组功能是 String 不具备的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO dept(deptno,dname,loc) VALUES(#&#123;deptno&#125;,#&#123;dname&#125;,#&#123;loc&#125;)&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#\\&#123;\\w+\\&#125;&quot;</span>;<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pat</span> <span class="hljs-operator">=</span> Pattern.compile(regex) ;<span class="hljs-comment">//编译正则表达式</span><br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">mat</span> <span class="hljs-operator">=</span> pat.matcher(str) ;<br>        <span class="hljs-keyword">while</span>(mat.find()) &#123;<br>            <span class="hljs-comment">//是否有匹配成功的内容</span><br>            System.out.println(mat.group(<span class="hljs-number">0</span>).replaceAll(<span class="hljs-string">&quot;#\\&#123;|\\&#125;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>java.util.regex 开发包，如果不是进行一些跟为复杂的正则处理时很难使用到的，而 String 类提供的处理只适合正则的基本操作</p><h3 id="UUID类"><a href="#UUID类" class="headerlink" title="UUID类"></a>UUID类</h3><p>UUID时一种无重复字符串的程序类，这种程序类的主要功能时根据时间戳实现一个自动的无重复字符串的定义。</p><p>一般在获取UUID的时候往往都是随机生成的一个内容，所以可以通过如下方式获取：</p><ul><li>获取 UUID 对象：<code>public static UUID randomUUID();</code></li><li>根据字符串获取 UUID 内容：<code>public sattaic UUID fromString(String name);</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>            <span class="hljs-type">UUID</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> UUID.randomUUID() ;<br>            System.out.println(uid.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在对文件进行自动命名处理情况下，UUID 类型非常好用。</p><h3 id="Option-类"><a href="#Option-类" class="headerlink" title="Option 类"></a>Option 类</h3><p>Option 类的主要功能是进行 null 的相关处理，为了防止空指正异常 </p><h3 id="定时调度"><a href="#定时调度" class="headerlink" title="定时调度"></a>定时调度</h3><p>定时器的主要操作是进行定时任务处理。Java中提供有定时任务处理，但这种任务处理只实现了间隔触发操作。</p><p>如果要想实现定时的处理操作，需要一个定时操作的主题类，以及一个定时任务的控制。可以使用两个类实现：</p><ul><li>java.util.TimerTask 类：实现定时任务处理</li><li>java.util.Timer 类：进行任务的启动，启动的方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TimerTask</span>&#123; <span class="hljs-comment">//任务主体</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//多线程处理方法发</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;、定时任务执行，当前时间&quot;</span> + System.currentTimeMillis());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>            <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<span class="hljs-comment">//定时任务</span><br>            timer.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(),<span class="hljs-number">100</span>,<span class="hljs-number">1000</span>);<br>            <span class="hljs-comment">//定义间隔任务，100毫秒后开始执行，每秒执行一次</span><br>            timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(),<span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此定时调度组件时有JDK提供的最原始的使用方式</p><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><h4 id="File类基本操作"><a href="#File类基本操作" class="headerlink" title="File类基本操作"></a>File类基本操作</h4><p>在整个 java.io 包中，File 类是唯一一个于文件本身有关的类，而如果要想进行 File 类操作，（创建、删除、重命名等），必须提供完整的路径，而后才可以调用相应的方法处理。</p><p>File 类的基本使用：</p><p>File 类是 Comparable 接口的子类，所以 File 类对象是可以进行排序处理。在进行 File 类处理的时候需要设置访问路径，路径的配置主要通过File 类的构造方法处理；</p><ul><li>构造放方法：<code>public File(String pathname)</code>设置要操作的完整路径</li><li>构造方法：<code>public File(File parent,String child)</code>设置父路径与子目录</li></ul><p>如果想进行文件的基本操作可以使用如下的方法：</p><ul><li>创建新的文件：<code>public boolean createNewFile() throws IOException; </code></li><li>判断文件是否存在：<code>public boolean exist(); </code></li><li>删除文件：<code>public boolean delete();</code></li></ul><p>例：使用 File 类创建一个文件（d:\mldn.txt）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\mldn.txt&quot;</span>) ;<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            file.delete();<span class="hljs-comment">//删除文件</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 文件不存在</span><br>            System.out.println(file. createNewFile());<span class="hljs-comment">//船舰新的文件</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="File-类操作深入"><a href="#File-类操作深入" class="headerlink" title="File 类操作深入"></a>File 类操作深入</h4><p>在不同操作系统有不容路径分割分：Windows 分隔符 “\“ 、LInux 分隔符：”&#x2F;“；所以在开发时必须考虑不同环境下的分隔符的问题，为了解决此问题 File 类提供一个常量：<code>public static final String separator</code>;</p><p>例：正常的路径编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:&quot;</span> + File.separator + <span class="hljs-string">&quot;mldn.txt&quot;</span>) ;<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            file.delete();<span class="hljs-comment">//删除文件</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 文件不存在</span><br>            System.out.println(file. createNewFile());<span class="hljs-comment">//船舰新的文件</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>随着系统适应性的不断加强，对于当前的路径操作，也可以随意使用了，在Windows操作系统下也可以进行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:/mldn.txt&quot;</span>) ;<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            file.delete();<span class="hljs-comment">//删除文件</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 文件不存在</span><br>            System.out.println(file. createNewFile());<span class="hljs-comment">//船舰新的文件</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在使用 File 类进行文件处理的时候需要注意的是：程序 → JVM →操作系统函数 → 文件处理，所以字进行同一文件返沪删除或创建时，可能会出现有延迟的问题，所以这个时候最好的方案是别重名； </li><li>在进行文件创建的时候有一个重要的前提：文件的父路径必须首先存在。<ul><li>获取父路径：<code>public File getParentFile();</code> </li><li>创建目录：<code>public boolean mkdirs();</code></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:&quot;</span> + File.separator + <span class="hljs-string">&quot;\\hello\\demo\\mldn.txt&quot;</span>) ;<br>        <span class="hljs-keyword">if</span> ( !file.getParentFile().exists()) &#123;<br>            <span class="hljs-comment">//父路径不存在</span><br>            file.getParentFile().mkdirs();<span class="hljs-comment">//创建父路径</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            file.delete();<span class="hljs-comment">//删除文件</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 文件不存在</span><br>            System.out.println(file. createNewFile());<span class="hljs-comment">//船舰新的文件</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此种判断并且建立父目录的操作，很多情况下直选哟一次，那么就会造成时间复杂度的提升，所以这个时候要想提升性能，请先保证目录已经创建。</p><h4 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h4><ul><li>文件是否课读：<code>public boolean canRead();</code></li><li>文件是否可写：<code>public boolean canWrite();</code></li><li>获取文件长度：<code>public long length();</code>该方法返回的是 long 数据类型：字节长度</li><li>最后一次修改日期时间：<code>public long lastModified();</code></li><li>判断是否是文件：<code>public boolean isFile();</code></li><li>判断是否是文件：<code>public boolean isDirectory();</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">MathUtil</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">round</span><span class="hljs-params">(<span class="hljs-type">double</span> num, <span class="hljs-type">int</span> scale)</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.round(Math.pow(<span class="hljs-number">10</span>,scale)*num)/Math.pow(<span class="hljs-number">10</span>,scale);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:&quot;</span> + File.separator + <span class="hljs-string">&quot;\\hello\\demo\\mldn.txt&quot;</span>) ;<br>        System.out.println(<span class="hljs-string">&quot;文件是否可读,&quot;</span> + file.canRead());<br>        System.out.println(<span class="hljs-string">&quot;文件是否可写,&quot;</span> + file.canWrite());<br>        System.out.println(<span class="hljs-string">&quot;文件大小&quot;</span> + MathUtil.round(file.length()/(<span class="hljs-type">double</span>)<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>,<span class="hljs-number">2</span>));<br>        System.out.println(<span class="hljs-string">&quot;最后的修改时间：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(file.lastModified())));<br>        System.out.println(<span class="hljs-string">&quot;是目录吗？&quot;</span> + file.isDirectory());<br>        System.out.println(<span class="hljs-string">&quot;是文件吗？&quot;</span> + file.isFile());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>列出目录的方法：</p><ul><li>列出目录内容：<code>public File[] listFiles();</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:&quot;</span> + File.separator ) ;<br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>            <span class="hljs-comment">//当前是一个目录</span><br>            File result [] = file.listFiles() ;<span class="hljs-comment">//列出目录种的全部内容</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; result.length; i++) &#123;<br>                System.out.println(result[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p align = 'right'>·  to be continued</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客搭建初体验</title>
    <link href="/2020/04/07/My-New-Post/"/>
    <url>/2020/04/07/My-New-Post/</url>
    
    <content type="html"><![CDATA[<center>利用Hexo搭建个人博客并使用主题</center><span id="more"></span><p>步骤:</p><h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h2><p>通过<a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝镜像</a>安装。</p><h2 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2.安装node.js"></a>2.安装node.js</h2><p>通过<a href="https://npm.taobao.org/mirrors/node">淘宝镜像</a>安装。</p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><p>在git branch中键入。安装过程可能有点慢。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g hexo-cli</span><br></code></pre></td></tr></table></figure><h2 id="4-安装好之后执行"><a href="#4-安装好之后执行" class="headerlink" title="4.安装好之后执行"></a>4.安装好之后执行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init &lt;folder&gt;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> &lt;folder&gt;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install</span><br></code></pre></td></tr></table></figure><p>执行完之后会在<code>&lt;folder&gt;</code>中形成以下目录结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br></code></pre></td></tr></table></figure><h2 id="5-安装next主题"><a href="#5-安装next主题" class="headerlink" title="5.安装next主题"></a>5.安装next主题</h2><p>在<code>&lt;folder&gt;目录下的</code><themes><code>目录中执行：</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></code></pre></td></tr></table></figure><p>第一次克隆速度太慢于是我换为了gitee的地址，取消了当前的克隆进度，改为执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://gitee.com/tommy2z/next.git</span><br></code></pre></td></tr></table></figure><p>将导入已有仓库时出现<code>gitee已存在该项目</code>，点开发现别人已经将next主题项目导入到gitee，于是我就直接使用这个gitee仓库的地址。</p><p>原本以为没问题，后来发现从gitee上克隆的项目的配置文件和github上有点不太一样。于是我又从github上克隆了一遍。</p><p>主题下载完成后会在<code>&lt;theme&gt;</code>目录中出现<code>hexo-theme-next</code>的文件夹，即主题文件夹。</p><p>这样主题算是安装完成了。</p><h2 id="6-应用next主题"><a href="#6-应用next主题" class="headerlink" title="6.应用next主题"></a>6.应用next主题</h2><p>在<code>&lt;folder&gt;</code>目录中的<code>_config.yml</code>中修改</p><p>将</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">ladscape</span><br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">hexo-theme-next</span><br></code></pre></td></tr></table></figure><p>也就是<code>&lt;themes&gt;</code>目录下的主题文件夹名，下载的主题的文件夹名与此处修改的<code>theme:</code>后的值应保持一致才能成功应用该主题。</p><p><font color = red>*注意 <code>theme:</code>与<code>主题名</code>之间的空格不能丢失。</font></p><h2 id="7-配置主题"><a href="#7-配置主题" class="headerlink" title="7.配置主题"></a>7.配置主题</h2><p>主要有两个配置文件</p><ul><li><p>站点配置文件：路径为<code>&lt;folder&gt;</code>下</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">.</span><br><span class="hljs-bullet"></span>├── _config.yml<br></code></pre></td></tr></table></figure></li><li><p>主题配置文件：路径为<code>&lt;folder&gt;下</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">.<br>├── _config.yml<br>├── themes<br><span class="hljs-string">|   └── hexo-theme-next</span><br><span class="hljs-string">|└── _config.yml</span><br></code></pre></td></tr></table></figure></li></ul><p align = 'right'>to be continued</p>在站点配置文件中主要配置的是<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">//标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">//副标题</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">//描述</span><br><span class="hljs-attr">keywords:</span> <span class="hljs-string">//关键字</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">//作者</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">//语言</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">//时区</span><br></code></pre></td></tr></table></figure><p>此部分内容相当于全局设置，更换主题不会改变此部分内容</p><p>在主题配置文件中主要修改的是</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">avatar:</span> <span class="hljs-comment">#侧边栏头像，图片文件放在主题目录中的source文件夹中</span><br><span class="hljs-attr">toc:</span> <span class="hljs-comment">#侧边栏显示文章目录 </span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <br><span class="hljs-attr">sidebar:</span> <span class="hljs-comment">#侧边栏位置（只在Pisces和Gemini主题风格中生效）</span><br>  <span class="hljs-comment"># Sidebar Position, available value: left | right (only for Pisces | Gemini).</span><br>  <span class="hljs-comment">#position: left</span><br>  <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br><span class="hljs-comment"># Schemes 设置主题的风格这里我使用的是默认的Muse</span><br>  <span class="hljs-attr">scheme:</span> <span class="hljs-string">Muse</span><br>  <span class="hljs-comment">#scheme: Mist</span><br>  <span class="hljs-comment">#scheme: Pisces</span><br>  <span class="hljs-comment">#scheme: Gemini</span><br><span class="hljs-attr">social:</span> <span class="hljs-comment">#设置侧边栏社交账号，这里暂时只设置了邮箱</span><br>  <span class="hljs-comment">#GitHub: https://github.com/yourname || github</span><br>  <span class="hljs-attr">E-Mail:</span> <span class="hljs-string">mailto:yourmailaddress</span> <span class="hljs-string">||</span> <span class="hljs-string">envelope</span><br>  <span class="hljs-comment">#Google: https://plus.google.com/yourname || google</span><br>  <span class="hljs-comment">#Twitter: https://twitter.com/yourname || twitter</span><br>  <span class="hljs-comment">#FB Page: https://www.facebook.com/yourname || facebook</span><br>  <span class="hljs-comment">#VK Group: https://vk.com/yourname || vk</span><br>  <span class="hljs-comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br>  <span class="hljs-comment">#YouTube: https://youtube.com/yourname || youtube</span><br>  <span class="hljs-comment">#Instagram: https://instagram.com/yourname || instagram</span><br>  <span class="hljs-comment">#Skype: skype:yourname?call|chat || skype</span><br></code></pre></td></tr></table></figure><p>这是几个主要配置</p><h2 id="8-开始写作"><a href="#8-开始写作" class="headerlink" title="8.开始写作"></a>8.开始写作</h2><p>主要在<code>&lt;folder&gt;</code>目录下执行以下命令即可创建默认_post文章</p><ul><li>hexo new  <postName></li></ul><p>之后便可以开始在 <postName>.md中畅快写作了</p><h2 id="9-部署到github"><a href="#9-部署到github" class="headerlink" title="9.部署到github"></a>9.部署到github</h2><ul><li><p>添加ssh：<br>具体流程可以参考<a href="https://www.himmy.cn/2019/07/06/github%E6%B7%BB%E5%8A%A0ssh-key/">野猿新一的博客</a></p></li><li><p>在github中创建仓库注意仓库名尽量和github用户名相同</p></li><li><p>配置站点配置文件_config.yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-comment"># 类型</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-comment"># 仓库（这里github和gitee有点区别）</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:yoursitName/sitName.github.io.git</span><br>  <span class="hljs-comment"># 分支</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure></li><li><p>配置好之后执行以下代码</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo clean</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo generate</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo deploy</span><br></code></pre></td></tr></table></figure><p>就可以看到在你的网站上：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://yourname.github.io/<br></code></pre></td></tr></table></figure><p>看到更新的文章了</p><h2 id="10-如何使用图床并插入图片"><a href="#10-如何使用图床并插入图片" class="headerlink" title="10.如何使用图床并插入图片"></a>10.如何使用图床并插入图片</h2><p><a href="https://www.cnblogs.com/focksor/p/12402471.html">相关链接</a></p><p align = 'right'>to be continued</p>]]></content>
    
    
    <categories>
      
      <category>第一条博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb</title>
    <link href="/2019/09/14/JavaWeb/"/>
    <url>/2019/09/14/JavaWeb/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><p>Java    Web</p><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>web开发：</p><ul><li>web，网页的意思  ， <a href="http://www.baidu.com/">www.baidu.com</a></li><li>静态web<ul><li>html，css</li><li>提供给所有人看的数据始终不会发生变化！</li></ul></li><li>动态web<ul><li>淘宝，几乎是所有的网站；</li><li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！</li><li>技术栈：Servlet&#x2F;JSP，ASP，PHP</li></ul></li></ul><p>在Java中，动态web资源开发的技术统称为JavaWeb；</p><h3 id="1-2、web应用程序"><a href="#1-2、web应用程序" class="headerlink" title="1.2、web应用程序"></a>1.2、web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p><ul><li>a.html、b.html……多个web资源，这些web资源可以被外界访问，对外界提供服务；</li><li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li><li>URL </li><li>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li><li>一个web应用由多部分组成 （静态web，动态web）<ul><li>html，css，js</li><li>jsp，servlet</li><li>Java程序</li><li>jar包</li><li>配置文件 （Properties）</li></ul></li></ul><p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p><h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul><li>*.htm, *.html,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090932378.png" alt="1567822802516"></p><ul><li>静态web存在的缺点<ul><li>Web页面无法动态更新，所有用户看到都是同一个页面<ul><li>轮播图，点击特效：伪动态</li><li>JavaScript [实际开发中，它用的最多]</li><li>VBScript</li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul></li></ul><h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3><p>页面会动态展示： “Web的页面展示的效果因人而异”；</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090933857.png" alt="1567823191289"></p><p>缺点：</p><ul><li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>,重新发布；<ul><li>停机维护</li></ul></li></ul><p>优点：</p><ul><li>Web页面可以动态更新，所有用户看到都不是同一个页面</li><li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090933729.png" alt="1567823350584"></p><p>新手村：–魔鬼训练（分析原理，看源码）–&gt; PK场</p><h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><p><strong>ASP:</strong></p><ul><li><p>微软：国内最早流行的就是ASP；</p></li><li><p>在HTML中嵌入了VB的脚本，  ASP + COM；</p></li><li><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱</p></li><li><p>维护成本高！</p></li><li><p>C# </p></li><li><p>IIS</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>            &lt;%<br>            System.out.println(&quot;hello&quot;)<br>            %&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>php：</strong></p><ul><li>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）</li><li>无法承载大访问量的情况（局限性）</li></ul><p>**JSP&#x2F;Servlet : ** </p><p>B&#x2F;S：浏览和服务器</p><p>C&#x2F;S:  客户端和服务器</p><ul><li>sun公司主推的B&#x2F;S架构</li><li>基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)</li><li>可以承载三高问题带来的影响；</li><li>语法像ASP ， ASP–&gt;JSP , 加强市场强度；</li></ul><p>…..</p><h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；</p><p><strong>IIS</strong></p><p>微软的； ASP…,Windows中自带的</p><p><strong>Tomcat</strong></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090933611.png" alt="1567824446428"></p><p>面向百度编程；</p><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p><p>Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为<strong>9.0。</strong></p><p>….</p><p><strong>工作3-5年之后，可以尝试手写Tomcat服务器；</strong></p><p>下载tomcat：</p><ol><li>安装 or  解压</li><li>了解配置文件及目录结构</li><li>这个东西的作用</li></ol><h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><h3 id="3-1、-安装tomcat"><a href="#3-1、-安装tomcat" class="headerlink" title="3.1、 安装tomcat"></a>3.1、 安装tomcat</h3><p>tomcat官网：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090933082.png" alt="1567825600842"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090933379.png" alt="1567825627138"></p><h3 id="3-2、Tomcat启动和配置"><a href="#3-2、Tomcat启动和配置" class="headerlink" title="3.2、Tomcat启动和配置"></a>3.2、Tomcat启动和配置</h3><p>文件夹作用：</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090933301.png" alt="1567825763180"></p><p><strong>启动。关闭Tomcat</strong></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090933807.png" alt="1567825840657"></p><p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>可能遇到的问题：</p><ol><li>Java环境变量没有配置</li><li>闪退问题：需要配置兼容性</li><li>乱码问题：配置文件中设置</li></ol><h3 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090933145.png" alt="1567825967256"></p><p>可以配置启动的端口号</p><ul><li>tomcat的默认端口号为：8080</li><li>mysql：3306</li><li>http：80</li><li>https：443</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8081&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>可以配置主机的名称</p><ul><li>默认的主机名为：localhost-&gt;127.0.0.1</li><li>默认网站应用存放的位置为：webapps</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;www.qinjiang.com&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="高难度面试题："><a href="#高难度面试题：" class="headerlink" title="高难度面试题："></a>高难度面试题：</h4><p>请你谈谈网站是如何进行访问的！</p><ol><li><p>输入一个域名；回车</p></li><li><p>检查本机的 C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射；</p><ol><li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       www.qinjiang.com<br></code></pre></td></tr></table></figure></li><li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p></li></ol><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090933144.png" alt="1567827057913"></p></li><li><p>可以配置一下环境变量（可选性）</p></li></ol><h3 id="3-4、发布一个web网站"><a href="#3-4、发布一个web网站" class="headerlink" title="3.4、发布一个web网站"></a>3.4、发布一个web网站</h3><p>不会就先模仿</p><ul><li>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了</li></ul><p>网站应该有的结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">--webapps ：Tomcat服务器的web目录<br>-ROOT<br>-kuangstudy ：网站的目录名<br>- WEB-INF<br>-classes : java程序<br>-lib：web应用所依赖的jar包<br>-web.xml ：网站配置文件<br>- index.html 默认的首页<br>- <span class="hljs-keyword">static</span> <br>            -css<br>            -style.css<br>            -js<br>            -img<br>         -.....<br></code></pre></td></tr></table></figure><p>HTTP协议 ： 面试</p><p>Maven：构建工具</p><ul><li>Maven安装包</li></ul><p>Servlet 入门</p><ul><li>HelloWorld！</li><li>Servlet配置</li><li>原理</li></ul><h2 id="4、Http"><a href="#4、Http" class="headerlink" title="4、Http"></a>4、Http</h2><h3 id="4-1、什么是HTTP"><a href="#4-1、什么是HTTP" class="headerlink" title="4.1、什么是HTTP"></a>4.1、什么是HTTP</h3><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p><ul><li>文本：html，字符串，~ ….</li><li>超文本：图片，音乐，视频，定位，地图…….</li><li>80</li></ul><p>Https：安全的</p><ul><li>443</li></ul><h3 id="4-2、两个时代"><a href="#4-2、两个时代" class="headerlink" title="4.2、两个时代"></a>4.2、两个时代</h3><ul><li><p>http1.0</p><ul><li>HTTP&#x2F;1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li></ul></li><li><p>http2.0</p><ul><li>HTTP&#x2F;1.1：客户端可以与web服务器连接后，可以获得多个web资源。‘</li></ul></li></ul><h3 id="4-3、Http请求"><a href="#4-3、Http请求" class="headerlink" title="4.3、Http请求"></a>4.3、Http请求</h3><ul><li>客户端—发请求（Request）—服务器</li></ul><p>百度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Request URL:https:<span class="hljs-comment">//www.baidu.com/   请求地址</span><br>Request Method:GET    get方法/post方法<br>Status Code:<span class="hljs-number">200</span> OK    状态码：<span class="hljs-number">200</span><br>Remote（远程） Address:<span class="hljs-number">14.215</span><span class="hljs-number">.177</span><span class="hljs-number">.39</span>:<span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept:text/html  <br>Accept-Encoding:gzip, deflate, br<br>Accept-Language:zh-CN,zh;q=<span class="hljs-number">0.9</span>    语言<br>Cache-Control:max-age=<span class="hljs-number">0</span><br>Connection:keep-alive<br></code></pre></td></tr></table></figure><h4 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h4><ul><li>请求行中的请求方式：GET</li><li>请求方式：<strong>Get，Post</strong>，HEAD,DELETE,PUT,TRACT…<ul><li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li><li>post：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</li></ul></li></ul><h4 id="2、消息头"><a href="#2、消息头" class="headerlink" title="2、消息头"></a>2、消息头</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept：告诉浏览器，它所支持的数据类型<br>Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="hljs-number">8</span>   GB2312  ISO8859-<span class="hljs-number">1</span><br>Accept-Language：告诉浏览器，它的语言环境<br>Cache-Control：缓存控制<br>Connection：告诉浏览器，请求完成是断开还是保持连接<br>HOST：主机..../.<br></code></pre></td></tr></table></figure><h3 id="4-4、Http响应"><a href="#4-4、Http响应" class="headerlink" title="4.4、Http响应"></a>4.4、Http响应</h3><ul><li>服务器—响应—–客户端</li></ul><p>百度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Cache-Control:<span class="hljs-keyword">private</span>    缓存控制<br>Connection:Keep-Alive    连接<br>Content-Encoding:gzip    编码<br>Content-Type:text/html   类型<br></code></pre></td></tr></table></figure><h4 id="1-响应体"><a href="#1-响应体" class="headerlink" title="1.响应体"></a>1.响应体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept：告诉浏览器，它所支持的数据类型<br>Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="hljs-number">8</span>   GB2312  ISO8859-<span class="hljs-number">1</span><br>Accept-Language：告诉浏览器，它的语言环境<br>Cache-Control：缓存控制<br>Connection：告诉浏览器，请求完成是断开还是保持连接<br>HOST：主机..../.<br>Refresh：告诉客户端，多久刷新一次；<br>Location：让网页重新定位；<br></code></pre></td></tr></table></figure><h4 id="2、响应状态码"><a href="#2、响应状态码" class="headerlink" title="2、响应状态码"></a>2、响应状态码</h4><p>200：请求响应成功  200</p><p>3xx：请求重定向 </p><ul><li>重定向：你重新到我给你新位置去；</li></ul><p>4xx：找不到资源   404</p><ul><li>资源不存在；</li></ul><p>5xx：服务器代码错误   500       502:网关错误</p><p><strong>常见面试题：</strong></p><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p><h2 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h2><p><strong>我为什么要学习这个技术？</strong></p><ol><li><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</p></li><li><p>如何能够让一个东西自动帮我导入和配置这个jar包。</p><p>由此，Maven诞生了！</p></li></ol><h3 id="5-1-Maven项目架构管理工具"><a href="#5-1-Maven项目架构管理工具" class="headerlink" title="5.1 Maven项目架构管理工具"></a>5.1 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！</p><p>Maven的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去违反。</li></ul><p>Maven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；</p><h3 id="5-2-下载安装Maven"><a href="#5-2-下载安装Maven" class="headerlink" title="5.2 下载安装Maven"></a>5.2 下载安装Maven</h3><p>官网;<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090934933.png" alt="1567842350606"></p><p>下载完成后，解压即可；</p><p>小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；</p><h3 id="5-3-配置环境变量"><a href="#5-3-配置环境变量" class="headerlink" title="5.3 配置环境变量"></a>5.3 配置环境变量</h3><p>在我们的系统环境变量中</p><p>配置如下配置：</p><ul><li>M2_HOME     maven目录下的bin目录</li><li>MAVEN_HOME      maven的目录</li><li>在系统的path中配置  %MAVEN_HOME%\bin</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090934663.png" alt="1567842882993"></p><p>测试Maven是否安装成功，保证必须配置完毕！</p><h3 id="5-4-阿里云镜像"><a href="#5-4-阿里云镜像" class="headerlink" title="5.4 阿里云镜像"></a>5.4 阿里云镜像</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090934020.png" alt="1567844609399"></p><ul><li>镜像：mirrors<ul><li>作用：加速我们的下载</li></ul></li><li>国内建议使用阿里云的镜像</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-5-本地仓库"><a href="#5-5-本地仓库" class="headerlink" title="5.5 本地仓库"></a>5.5 本地仓库</h3><p>在本地的仓库，远程仓库；</p><p><strong>建立一个本地仓库：</strong>localRepository</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\Environment\apache-maven-3.6.2\maven-repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-6、在IDEA中使用Maven"><a href="#5-6、在IDEA中使用Maven" class="headerlink" title="5.6、在IDEA中使用Maven"></a>5.6、在IDEA中使用Maven</h3><ol><li><p>启动IDEA</p></li><li><p>创建一个MavenWeb项目</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090934241.png" alt="1567844785602"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090940631.png" alt="1567844841172"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090934300.png" alt="1567844917185"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090934840.png" alt="1567844956177"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935385.png" alt="1567845029864"></p></li><li><p>等待项目初始化完毕</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935981.png" alt="1567845105970"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935547.png" alt="1567845137978"></p></li><li><p>观察maven仓库中多了什么东西？</p></li><li><p>IDEA中的Maven设置</p><p>注意：IDEA项目创建成功后，看一眼Maven的配置</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935944.png" alt="1567845341956"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935332.png" alt="1567845413672"></p></li><li><p>到这里，Maven在IDEA中的配置和使用就OK了!</p></li></ol><h3 id="5-7、创建一个普通的Maven项目"><a href="#5-7、创建一个普通的Maven项目" class="headerlink" title="5.7、创建一个普通的Maven项目"></a>5.7、创建一个普通的Maven项目</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935268.png" alt="1567845557744"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935233.png" alt="1567845717377"></p><p>这个只有在Web应用下才会有！</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935687.png" alt="1567845782034"></p><h3 id="5-8-标记文件夹功能"><a href="#5-8-标记文件夹功能" class="headerlink" title="5.8 标记文件夹功能"></a>5.8 标记文件夹功能</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935501.png" alt="1567845910728"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935117.png" alt="1567845957139"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935564.png" alt="1567846034906"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935213.png" alt="1567846073511"></p><h3 id="5-9-在-IDEA中配置Tomcat"><a href="#5-9-在-IDEA中配置Tomcat" class="headerlink" title="5.9 在 IDEA中配置Tomcat"></a>5.9 在 IDEA中配置Tomcat</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935540.png" alt="1567846140348"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935962.png" alt="1567846179573"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935689.png" alt="1567846234175"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935350.png" alt="1567846369751"></p><p>解决警告问题</p><p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935884.png" alt="1567846421963"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090935715.png" alt="1567846546465"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090936503.png" alt="1567846559111"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090940206.png" alt="1567846640372"></p><h3 id="5-10-pom文件"><a href="#5-10-pom文件" class="headerlink" title="5.10 pom文件"></a>5.10 pom文件</h3><p>pom.xml 是Maven的核心配置文件</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090936565.png" alt="1567846784849"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-comment">&lt;!--Maven版本和头文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--这里就是我们刚才配置的GAV--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.kuang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javaweb-01-maven<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--Package：项目的打包方式</span><br><span class="hljs-comment">  jar：java应用</span><br><span class="hljs-comment">  war：JavaWeb应用</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><br>  <span class="hljs-comment">&lt;!--配置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目的默认构建编码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--编码版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--项目依赖--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--具体依赖的jar包配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--项目构建用的东西--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>javaweb-01-maven<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090936423.png" alt="1567847410771"></p><p>maven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-12-IDEA操作"><a href="#5-12-IDEA操作" class="headerlink" title="5.12 IDEA操作"></a>5.12 IDEA操作</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090936176.png" alt="1567847630808"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090936392.png" alt="1567847662429"></p><h3 id="5-13-解决遇到的问题"><a href="#5-13-解决遇到的问题" class="headerlink" title="5.13 解决遇到的问题"></a>5.13 解决遇到的问题</h3><ol><li><p>Maven 3.6.2</p><p>解决方法：降级为3.6.1</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090936773.png" alt="1567904721301"></p></li><li><p>Tomcat闪退</p></li><li><p>IDEA中每次都要重复配置Maven<br>在IDEA中的全局默认配置中去配置</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090936913.png" alt="1567905247201"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090936789.png" alt="1567905291002"></p></li><li><p>Maven项目中Tomcat无法配置</p></li><li><p>maven默认web项目中的web.xml版本问题</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090936281.png" alt="1567905537026"></p></li><li><p>替换为webapp4.0版本和tomcat一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Maven仓库的使用</p><p>地址：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090936394.png" alt="1567905870750"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090940942.png" alt="1567905982979"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090936093.png" alt="1567906017448"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090936732.png" alt="1567906039469"></p></li></ol><h2 id="6、Servlet"><a href="#6、Servlet" class="headerlink" title="6、Servlet"></a>6、Servlet</h2><h3 id="6-1、Servlet简介"><a href="#6-1、Servlet简介" class="headerlink" title="6.1、Servlet简介"></a>6.1、Servlet简介</h3><ul><li>Servlet就是sun公司开发动态web的一门技术</li><li>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：<ul><li>编写一个类，实现Servlet接口</li><li>把开发好的Java类部署到web服务器中。</li></ul></li></ul><p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p><h3 id="6-2、HelloServlet"><a href="#6-2、HelloServlet" class="headerlink" title="6.2、HelloServlet"></a>6.2、HelloServlet</h3><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p><ol><li><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；</p></li><li><p>关于Maven父子工程的理解：</p><p>父项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>servlet-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子项目会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.kuang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父项目中的java子项目可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">son <span class="hljs-keyword">extends</span> <span class="hljs-title class_">father</span><br></code></pre></td></tr></table></figure></li><li><p>Maven环境优化</p><ol><li>修改web.xml为最新的</li><li>将maven的结构搭建完整</li></ol></li><li><p>编写一个Servlet程序</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090937094.png" alt="1567911804700"></p><ol><li><p>编写一个普通类</p></li><li><p>实现Servlet接口，这里我们直接继承HttpServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <br>    <span class="hljs-comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//ServletOutputStream outputStream = resp.getOutputStream();</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter(); <span class="hljs-comment">//响应流</span><br>        writer.print(<span class="hljs-string">&quot;Hello,Serlvet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol></li><li><p>编写Servlet的映射</p><p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <br><span class="hljs-comment">&lt;!--注册Servlet--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--Servlet的请求路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>   <br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat</p><p>注意：配置项目发布的路径就可以了</p></li><li><p>启动测试，OK！</p></li></ol><h3 id="6-3、Servlet原理"><a href="#6-3、Servlet原理" class="headerlink" title="6.3、Servlet原理"></a>6.3、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090937345.png" alt="1567913793252"></p><h3 id="6-4、Mapping问题"><a href="#6-4、Mapping问题" class="headerlink" title="6.4、Mapping问题"></a>6.4、Mapping问题</h3><ol><li><p>一个Servlet可以指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定多个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello3<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello4<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello5<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>   <br></code></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定通用映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>默认请求路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--默认请求路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>指定一些后缀或者前缀等等….</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!--可以自定义后缀实现请求映射</span><br><span class="hljs-comment">    注意点，*前面不能加项目映射的路径</span><br><span class="hljs-comment">    hello/sajdlkajda.qinjiang</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.qinjiang<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--404--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-5、ServletContext"><a href="#6-5、ServletContext" class="headerlink" title="6.5、ServletContext"></a>6.5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p><h4 id="1、共享数据"><a href="#1、共享数据" class="headerlink" title="1、共享数据"></a>1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <br>        <span class="hljs-comment">//this.getInitParameter()   初始化参数</span><br>        <span class="hljs-comment">//this.getServletConfig()   Servlet配置</span><br>        <span class="hljs-comment">//this.getServletContext()  Servlet上下文</span><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;秦疆&quot;</span>; <span class="hljs-comment">//数据</span><br>        context.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username); <span class="hljs-comment">//将一个数据保存在了ServletContext中，名字为：username 。值 username</span><br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String) context.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br><br>        resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.getWriter().print(<span class="hljs-string">&quot;名字&quot;</span>+username);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.GetServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/getc<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试访问结果；</p><h4 id="2、获取初始化参数"><a href="#2、获取初始化参数" class="headerlink" title="2、获取初始化参数"></a>2、获取初始化参数</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置一些web应用初始化参数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> context.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>    resp.getWriter().print(url);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、请求转发"><a href="#3、请求转发" class="headerlink" title="3、请求转发"></a>3、请求转发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>    System.out.println(<span class="hljs-string">&quot;进入了ServletDemo04&quot;</span>);<br>    <span class="hljs-comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;); //转发的请求路径</span><br>    <span class="hljs-comment">//requestDispatcher.forward(req,resp); //调用forward实现请求转发；</span><br>    context.getRequestDispatcher(<span class="hljs-string">&quot;/gp&quot;</span>).forward(req,resp);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090937157.png" alt="1567924457532"></p><h4 id="4、读取资源文件"><a href="#4、读取资源文件" class="headerlink" title="4、读取资源文件"></a>4、读取资源文件</h4><p>Properties</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p><p>思路：需要一个文件流；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">username</span>=<span class="hljs-string">root12312</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">zxczxczxc</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo05</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext().getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/com/kuang/servlet/aa.properties&quot;</span>);<br><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.load(is);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> prop.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> prop.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        resp.getWriter().print(user+<span class="hljs-string">&quot;:&quot;</span>+pwd);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>访问测试即可ok；</p><h3 id="6-6、HttpServletResponse"><a href="#6-6、HttpServletResponse" class="headerlink" title="6.6、HttpServletResponse"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p><ul><li>如果要获取客户端请求过来的参数：找HttpServletRequest</li><li>如果要给客户端响应一些信息：找HttpServletResponse</li></ul><h4 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h4><p>负责向浏览器发送数据的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ServletOutputStream <span class="hljs-title function_">getOutputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br>PrintWriter <span class="hljs-title function_">getWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure><p>负责向浏览器发送响应头的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setCharacterEncoding</span><span class="hljs-params">(String var1)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setContentLength</span><span class="hljs-params">(<span class="hljs-type">int</span> var1)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setContentLengthLong</span><span class="hljs-params">(<span class="hljs-type">long</span> var1)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setContentType</span><span class="hljs-params">(String var1)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setDateHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">long</span> var2)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addDateHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">long</span> var2)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeader</span><span class="hljs-params">(String var1, String var2)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addHeader</span><span class="hljs-params">(String var1, String var2)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setIntHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">int</span> var2)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addIntHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">int</span> var2)</span>;<br></code></pre></td></tr></table></figure><p>响应的状态码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">SC_CONTINUE</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_SWITCHING_PROTOCOLS</span> <span class="hljs-operator">=</span> <span class="hljs-number">101</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_CREATED</span> <span class="hljs-operator">=</span> <span class="hljs-number">201</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_ACCEPTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">202</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NON_AUTHORITATIVE_INFORMATION</span> <span class="hljs-operator">=</span> <span class="hljs-number">203</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NO_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">204</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_RESET_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">205</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PARTIAL_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">206</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_MULTIPLE_CHOICES</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_MOVED_PERMANENTLY</span> <span class="hljs-operator">=</span> <span class="hljs-number">301</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_MOVED_TEMPORARILY</span> <span class="hljs-operator">=</span> <span class="hljs-number">302</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_FOUND</span> <span class="hljs-operator">=</span> <span class="hljs-number">302</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_SEE_OTHER</span> <span class="hljs-operator">=</span> <span class="hljs-number">303</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_MODIFIED</span> <span class="hljs-operator">=</span> <span class="hljs-number">304</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_USE_PROXY</span> <span class="hljs-operator">=</span> <span class="hljs-number">305</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_TEMPORARY_REDIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-number">307</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_BAD_REQUEST</span> <span class="hljs-operator">=</span> <span class="hljs-number">400</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_UNAUTHORIZED</span> <span class="hljs-operator">=</span> <span class="hljs-number">401</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PAYMENT_REQUIRED</span> <span class="hljs-operator">=</span> <span class="hljs-number">402</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_FORBIDDEN</span> <span class="hljs-operator">=</span> <span class="hljs-number">403</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_FOUND</span> <span class="hljs-operator">=</span> <span class="hljs-number">404</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_METHOD_NOT_ALLOWED</span> <span class="hljs-operator">=</span> <span class="hljs-number">405</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_ACCEPTABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">406</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PROXY_AUTHENTICATION_REQUIRED</span> <span class="hljs-operator">=</span> <span class="hljs-number">407</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_REQUEST_TIMEOUT</span> <span class="hljs-operator">=</span> <span class="hljs-number">408</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_CONFLICT</span> <span class="hljs-operator">=</span> <span class="hljs-number">409</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_GONE</span> <span class="hljs-operator">=</span> <span class="hljs-number">410</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_LENGTH_REQUIRED</span> <span class="hljs-operator">=</span> <span class="hljs-number">411</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PRECONDITION_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-number">412</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_REQUEST_ENTITY_TOO_LARGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">413</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_REQUEST_URI_TOO_LONG</span> <span class="hljs-operator">=</span> <span class="hljs-number">414</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_UNSUPPORTED_MEDIA_TYPE</span> <span class="hljs-operator">=</span> <span class="hljs-number">415</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_REQUESTED_RANGE_NOT_SATISFIABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">416</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_EXPECTATION_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-number">417</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_INTERNAL_SERVER_ERROR</span> <span class="hljs-operator">=</span> <span class="hljs-number">500</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_IMPLEMENTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">501</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_BAD_GATEWAY</span> <span class="hljs-operator">=</span> <span class="hljs-number">502</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_SERVICE_UNAVAILABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">503</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_GATEWAY_TIMEOUT</span> <span class="hljs-operator">=</span> <span class="hljs-number">504</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_HTTP_VERSION_NOT_SUPPORTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">505</span>;<br></code></pre></td></tr></table></figure><h4 id="2、下载文件"><a href="#2、下载文件" class="headerlink" title="2、下载文件"></a>2、下载文件</h4><ol><li>向浏览器输出消息 （一直在讲，就不说了）</li><li>下载文件<ol><li>要获取下载文件的路径</li><li>下载的文件名是啥？</li><li>设置想办法让浏览器能够支持下载我们需要的东西</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutputStream对象</li><li>将FileOutputStream流写入到buffer缓冲区</li><li>使用OutputStream将缓冲区中的数据输出到客户端！</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">// 1. 要获取下载文件的路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;F:\\班级管理\\西开【19525】\\2、代码\\JavaWeb\\javaweb-02-servlet\\response\\target\\classes\\秦疆.png&quot;</span>;<br>    System.out.println(<span class="hljs-string">&quot;下载文件的路径：&quot;</span>+realPath);<br>    <span class="hljs-comment">// 2. 下载的文件名是啥？</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> realPath.substring(realPath.lastIndexOf(<span class="hljs-string">&quot;\\&quot;</span>) + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span><br>    resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span>+URLEncoder.encode(fileName,<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    <span class="hljs-comment">// 4. 获取下载文件的输入流</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br>    <span class="hljs-comment">// 5. 创建缓冲区</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-comment">// 6. 获取OutputStream对象</span><br>    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br>    <span class="hljs-comment">// 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span><br>    <span class="hljs-keyword">while</span> ((len=in.read(buffer))&gt;<span class="hljs-number">0</span>)&#123;<br>        out.write(buffer,<span class="hljs-number">0</span>,len);<br>    &#125;<br><br>    in.close();<br>    out.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、验证码功能"><a href="#3、验证码功能" class="headerlink" title="3、验证码功能"></a>3、验证码功能</h4><p>验证怎么来的？</p><ul><li>前端实现</li><li>后端实现，需要用到 Java 的图片类，生产一个图片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.servlet;<br><br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">//如何让浏览器3秒自动刷新一次;</span><br>        resp.setHeader(<span class="hljs-string">&quot;refresh&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>);<br>        <br>        <span class="hljs-comment">//在内存中创建一个图片</span><br>        <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedImage</span>(<span class="hljs-number">80</span>,<span class="hljs-number">20</span>,BufferedImage.TYPE_INT_RGB);<br>        <span class="hljs-comment">//得到图片</span><br>        <span class="hljs-type">Graphics2D</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> (Graphics2D) image.getGraphics(); <span class="hljs-comment">//笔</span><br>        <span class="hljs-comment">//设置图片的背景颜色</span><br>        g.setColor(Color.white);<br>        g.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">80</span>,<span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//给图片写数据</span><br>        g.setColor(Color.BLUE);<br>        g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-literal">null</span>,Font.BOLD,<span class="hljs-number">20</span>));<br>        g.drawString(makeNum(),<span class="hljs-number">0</span>,<span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">//告诉浏览器，这个请求用图片的方式打开</span><br>        resp.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>        <span class="hljs-comment">//网站存在缓存，不让浏览器缓存</span><br>        resp.setDateHeader(<span class="hljs-string">&quot;expires&quot;</span>,-<span class="hljs-number">1</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>);<br><br>        <span class="hljs-comment">//把图片写给浏览器</span><br>        ImageIO.write(image,<span class="hljs-string">&quot;jpg&quot;</span>, resp.getOutputStream());<br><br>    &#125;<br><br>    <span class="hljs-comment">//生成随机数</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">makeNum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">9999999</span>) + <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>-num.length() ; i++) &#123;<br>            sb.append(<span class="hljs-string">&quot;0&quot;</span>);<br>        &#125;<br>        num = sb.toString() + num;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4、实现重定向"><a href="#4、实现重定向" class="headerlink" title="4、实现重定向"></a>4、实现重定向</h4><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090937696.png" alt="1567931587955"></p><p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向</p><p>常见场景：</p><ul><li>用户登录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">sendRedirect</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        resp.setHeader(&quot;Location&quot;,&quot;/r/img&quot;);</span><br><span class="hljs-comment">        resp.setStatus(302);</span><br><span class="hljs-comment">         */</span><br>    resp.sendRedirect(<span class="hljs-string">&quot;/r/img&quot;</span>);<span class="hljs-comment">//重定向</span><br>&#125;<br></code></pre></td></tr></table></figure><p>面试题：请你聊聊重定向和转发的区别？</p><p>相同点</p><ul><li>页面都会实现跳转</li></ul><p>不同点</p><ul><li>请求转发的时候，url不会产生变化</li><li>重定向时候，url地址栏会发生变化；</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090937531.png" alt="1567932163430"></p><h4 id="5、简单实现登录重定向"><a href="#5、简单实现登录重定向" class="headerlink" title="5、简单实现登录重定向"></a>5、简单实现登录重定向</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;<br>&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;<br><br>&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt; &lt;br&gt;<br>    密码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt; &lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//处理请求</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><br>    System.out.println(username+<span class="hljs-string">&quot;:&quot;</span>+password);<br><br>    <span class="hljs-comment">//重定向时候一定要注意，路径问题，否则404；</span><br>    resp.sendRedirect(<span class="hljs-string">&quot;/r/success.jsp&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>requset<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.RequestTest<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>requset<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;h1&gt;Success&lt;/h1&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="6-7、HttpServletRequest"><a href="#6-7、HttpServletRequest" class="headerlink" title="6.7、HttpServletRequest"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090937333.png" alt="1567933996830"></p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090937396.png" alt="1567934023106"></p><h4 id="获取参数，请求转发"><a href="#获取参数，请求转发" class="headerlink" title="获取参数，请求转发"></a>获取参数，请求转发</h4><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090937157.png" alt="1567934110794"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    String[] hobbys = req.getParameterValues(<span class="hljs-string">&quot;hobbys&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;=============================&quot;</span>);<br>    <span class="hljs-comment">//后台接收中文乱码问题</span><br>    System.out.println(username);<br>    System.out.println(password);<br>    System.out.println(Arrays.toString(hobbys));<br>    System.out.println(<span class="hljs-string">&quot;=============================&quot;</span>);<br><br><br>    System.out.println(req.getContextPath());<br>    <span class="hljs-comment">//通过请求转发</span><br>    <span class="hljs-comment">//这里的 / 代表当前的web应用</span><br>    req.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(req,resp);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p><p>相同点</p><ul><li>页面都会实现跳转</li></ul><p>不同点</p><ul><li>请求转发的时候，url不会产生变化   307</li><li>重定向时候，url地址栏会发生变化； 302</li></ul><h2 id="7、Cookie、Session"><a href="#7、Cookie、Session" class="headerlink" title="7、Cookie、Session"></a>7、Cookie、Session</h2><h3 id="7-1、会话"><a href="#7-1、会话" class="headerlink" title="7.1、会话"></a>7.1、会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p><p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p><p><strong>你能怎么证明你是西开的学生？</strong></p><p>你              西开</p><ol><li>发票                西开给你发票</li><li>学校登记        西开标记你来过了</li></ol><p><strong>一个网站，怎么证明你来过？</strong></p><p>客户端              服务端</p><ol><li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li><li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li></ol><h3 id="7-2、保存会话的两种技术"><a href="#7-2、保存会话的两种技术" class="headerlink" title="7.2、保存会话的两种技术"></a>7.2、保存会话的两种技术</h3><p><strong>cookie</strong></p><ul><li>客户端技术   （响应，请求）</li></ul><p><strong>session</strong></p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！</li></ul><p>常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p><h3 id="7-3、Cookie"><a href="#7-3、Cookie" class="headerlink" title="7.3、Cookie"></a>7.3、Cookie</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090937986.png" alt="1568344447291"></p><ol><li>从请求中拿到cookie信息</li><li>服务器响应给客户端cookie</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = req.getCookies(); <span class="hljs-comment">//获得Cookie</span><br>cookie.getName(); <span class="hljs-comment">//获得cookie中的key</span><br>cookie.getValue(); <span class="hljs-comment">//获得cookie中的vlaue</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//新建一个cookie</span><br>cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>); <span class="hljs-comment">//设置cookie的有效期</span><br>resp.addCookie(cookie); <span class="hljs-comment">//响应给客户端一个cookie</span><br></code></pre></td></tr></table></figure><p><strong>cookie：一般会保存在本地的 用户目录下 appdata；</strong></p><p>一个网站cookie是否存在上限！<strong>聊聊细节问题</strong></p><ul><li>一个Cookie只能保存一个信息；</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li><li>Cookie大小有限制4kb；</li><li>300个cookie浏览器上限</li></ul><p><strong>删除Cookie；</strong></p><ul><li>不设置有效期，关闭浏览器，自动失效；</li><li>设置有效期时间为 0 ；</li></ul><p><strong>编码解码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">URLEncoder.encode(<span class="hljs-string">&quot;秦疆&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>)<br>URLDecoder.decode(cookie.getValue(),<span class="hljs-string">&quot;UTF-8&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="7-4、Session（重点）"><a href="#7-4、Session（重点）" class="headerlink" title="7.4、Session（重点）"></a>7.4、Session（重点）</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090937518.png" alt="1568344560794"></p><p>什么是Session：</p><ul><li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li><li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li><li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息…..</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090937618.png" alt="1568342773861"></p><p>Session和cookie的区别：</p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li><li>Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）</li><li>Session对象由服务创建；</li></ul><p>使用场景：</p><ul><li>保存一个登录用户的信息；</li><li>购物车信息；</li><li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li></ul><p>使用Session：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.servlet;<br><br><span class="hljs-keyword">import</span> com.kuang.pojo.Person;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <br>        <span class="hljs-comment">//解决乱码问题</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <br>        <span class="hljs-comment">//得到Session</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>        <span class="hljs-comment">//给Session中存东西</span><br>        session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;秦疆&quot;</span>,<span class="hljs-number">1</span>));<br>        <span class="hljs-comment">//获取Session的ID</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sessionId</span> <span class="hljs-operator">=</span> session.getId();<br><br>        <span class="hljs-comment">//判断Session是不是新创建</span><br>        <span class="hljs-keyword">if</span> (session.isNew())&#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;session创建成功,ID:&quot;</span>+sessionId);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;session以及在服务器中存在了,ID:&quot;</span>+sessionId);<br>        &#125;<br><br>        <span class="hljs-comment">//Session创建的时候做了什么事情；</span><br><span class="hljs-comment">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span><br><span class="hljs-comment">//        resp.addCookie(cookie);</span><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//得到Session</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br><br><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br><br>System.out.println(person.toString());<br><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>session.removeAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//手动注销Session</span><br>session.invalidate();<br></code></pre></td></tr></table></figure><p><strong>会话自动过期：web.xml配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置Session默认的失效时间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090938879.png" alt="1568344679763"></p><h2 id="8、JSP"><a href="#8、JSP" class="headerlink" title="8、JSP"></a>8、JSP</h2><h3 id="8-1、什么是JSP"><a href="#8-1、什么是JSP" class="headerlink" title="8.1、什么是JSP"></a>8.1、什么是JSP</h3><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p><p>最大的特点：</p><ul><li>写JSP就像在写HTML</li><li>区别：<ul><li>HTML只给用户提供静态的数据</li><li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li></ul></li></ul><h3 id="8-2、JSP原理"><a href="#8-2、JSP原理" class="headerlink" title="8.2、JSP原理"></a>8.2、JSP原理</h3><p>思路：JSP到底怎么执行的！</p><ul><li><p>代码层面没有任何问题</p></li><li><p>服务器内部工作</p><p>tomcat中有一个work目录；</p><p>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090938242.png" alt="1568345873736"></p><p>我电脑的地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\Administrator\.IntelliJIdea2018<span class="hljs-number">.1</span>\system\tomcat\Unnamed_javaweb-session-cookie\work\Catalina\localhost\ROOT\org\apache\jsp<br></code></pre></td></tr></table></figure><p>发现页面转变成了Java程序！</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090938148.png" alt="1568345948307"></p></li></ul><p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p><p>JSP最终也会被转换成为一个Java类！</p><p><strong>JSP 本质上就是一个Servlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspInit</span><span class="hljs-params">()</span> &#123;<br>      <br>  &#125;<br><span class="hljs-comment">//销毁</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspDestroy</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><span class="hljs-comment">//JSPService</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspService</span><span class="hljs-params">(.HttpServletRequest request,HttpServletResponse response)</span><br>      <br></code></pre></td></tr></table></figure><ol><li><p>判断请求</p></li><li><p>内置一些对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext;  <span class="hljs-comment">//页面上下文</span><br>javax.servlet.http.<span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;    <span class="hljs-comment">//session</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletContext application;   <span class="hljs-comment">//applicationContext</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletConfig config;         <span class="hljs-comment">//config</span><br>javax.servlet.jsp.<span class="hljs-type">JspWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;           <span class="hljs-comment">//out</span><br><span class="hljs-keyword">final</span> java.lang.<span class="hljs-type">Object</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;               <span class="hljs-comment">//page：当前</span><br>HttpServletRequest request                        <span class="hljs-comment">//请求</span><br>HttpServletResponse response                      <span class="hljs-comment">//响应</span><br></code></pre></td></tr></table></figure></li><li><p>输出页面前增加的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);       <span class="hljs-comment">//设置响应的页面类型</span><br>pageContext = _jspxFactory.getPageContext(<span class="hljs-built_in">this</span>, request, response,<br>                                          <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-literal">true</span>);<br>_jspx_page_context = pageContext;<br>application = pageContext.getServletContext();<br>config = pageContext.getServletConfig();<br>session = pageContext.getSession();<br>out = pageContext.getOut();<br>_jspx_out = out;<br></code></pre></td></tr></table></figure></li><li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p></li></ol><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090938633.png" alt="1568347078207"></p><p>在JSP页面中；</p><p>只要是 JAVA代码就会原封不动的输出；</p><p>如果是HTML代码，就会被转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">out.write(<span class="hljs-string">&quot;&lt;html&gt;\r\n&quot;</span>);<br></code></pre></td></tr></table></figure><p>这样的格式，输出到前端！</p><h3 id="8-3、JSP基础语法"><a href="#8-3、JSP基础语法" class="headerlink" title="8.3、JSP基础语法"></a>8.3、JSP基础语法</h3><p>任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p><h4 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a><strong>JSP表达式</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--JSP表达式<br>作用：用来将程序的输出，输出到客户端<br>&lt;%= 变量或者表达式%&gt;<br>--%&gt;<br>&lt;%= <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Date()%&gt;<br></code></pre></td></tr></table></figure><h4 id="jsp脚本片段"><a href="#jsp脚本片段" class="headerlink" title="jsp脚本片段"></a><strong>jsp脚本片段</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp"><br>&lt;%--jsp脚本片段--%&gt;<br>&lt;%<br>  <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">100</span> ; i++) &#123;<br>    sum+=i;<br>  &#125;<br>  out.println(<span class="hljs-string">&quot;&lt;h1&gt;Sum=&quot;</span>+sum+<span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br>%&gt;<br><br></code></pre></td></tr></table></figure><p><strong>脚本片段的再实现</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>  <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>  out.println(x);<br>%&gt;<br>&lt;p&gt;这是一个JSP文档&lt;/p&gt;<br>&lt;%<br>  <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>  out.println(y);<br>%&gt;<br><br>&lt;hr&gt;<br><br><br>&lt;%--在代码嵌入HTML元素--%&gt;<br>&lt;%<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>%&gt;<br>  &lt;h1&gt;Hello,World  &lt;%=i%&gt; &lt;/h1&gt;<br>&lt;%<br>  &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br>  <span class="hljs-keyword">static</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Loading Servlet!&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">globalVar</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">kuang</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;进入了方法Kuang！&quot;</span>);<br>  &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！</p><p>在JSP，嵌入Java代码即可！</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%%&gt;<br>&lt;%=%&gt;<br>&lt;%!%&gt;<br><br>&lt;%--注释--%&gt;<br></code></pre></td></tr></table></figure><p>JSP的注释，不会在客户端显示，HTML就会！</p><h3 id="8-4、JSP指令"><a href="#8-4、JSP指令" class="headerlink" title="8.4、JSP指令"></a>8.4、JSP指令</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> args.... %&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;&quot;</span>%&gt;<br><br>&lt;%--<span class="hljs-meta">@include</span>会将两个页面合二为一--%&gt;<br><br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;common/header.jsp&quot;</span>%&gt;<br>&lt;h1&gt;网页主体&lt;/h1&gt;<br><br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;common/footer.jsp&quot;</span>%&gt;<br><br>&lt;hr&gt;<br><br><br>&lt;%--jSP标签<br>    jsp:include：拼接页面，本质还是三个<br>    --%&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;/common/header.jsp&quot;</span>/&gt;<br>&lt;h1&gt;网页主体&lt;/h1&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;/common/footer.jsp&quot;</span>/&gt;<br><br></code></pre></td></tr></table></figure><h3 id="8-5、9大内置对象"><a href="#8-5、9大内置对象" class="headerlink" title="8.5、9大内置对象"></a>8.5、9大内置对象</h3><ul><li>PageContext    存东西</li><li>Request     存东西</li><li>Response</li><li>Session      存东西</li><li>Application   【SerlvetContext】   存东西</li><li>config    【SerlvetConfig】</li><li>out</li><li>page ，不用了解</li><li>exception</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">pageContext.setAttribute(<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;秦疆1号&quot;</span>); <span class="hljs-comment">//保存的数据只在一个页面中有效</span><br>request.setAttribute(<span class="hljs-string">&quot;name2&quot;</span>,<span class="hljs-string">&quot;秦疆2号&quot;</span>); <span class="hljs-comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span><br>session.setAttribute(<span class="hljs-string">&quot;name3&quot;</span>,<span class="hljs-string">&quot;秦疆3号&quot;</span>); <span class="hljs-comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span><br>application.setAttribute(<span class="hljs-string">&quot;name4&quot;</span>,<span class="hljs-string">&quot;秦疆4号&quot;</span>);  <span class="hljs-comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span><br></code></pre></td></tr></table></figure><p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p><p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p><p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p><h3 id="8-6、JSP标签、JSTL标签、EL表达式"><a href="#8-6、JSP标签、JSTL标签、EL表达式" class="headerlink" title="8.6、JSP标签、JSTL标签、EL表达式"></a>8.6、JSP标签、JSTL标签、EL表达式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- JSTL表达式的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- standard标签库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>EL表达式：  ${ }</p><ul><li><strong>获取数据</strong></li><li><strong>执行运算</strong></li><li><strong>获取web开发的常用对象</strong></li></ul><p><strong>JSP标签</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--jsp:include--%&gt;<br><br>&lt;%--<br>http:<span class="hljs-comment">//localhost:8080/jsptag.jsp?name=kuangshen&amp;age=12</span><br>--%&gt;<br><br>&lt;jsp:forward page=<span class="hljs-string">&quot;/jsptag2.jsp&quot;</span>&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;kuangshen&quot;</span>&gt;&lt;/jsp:param&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;age&quot;</span> value=<span class="hljs-string">&quot;12&quot;</span>&gt;&lt;/jsp:param&gt;<br>&lt;/jsp:forward&gt;<br></code></pre></td></tr></table></figure><p><strong>JSTL表达式</strong></p><p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p><p><strong>格式化标签</strong></p><p><strong>SQL标签</strong></p><p><strong>XML 标签</strong></p><p><strong>核心标签</strong> （掌握部分）</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090938157.png" alt="1568362473764"></p><p><strong>JSTL标签库使用步骤</strong></p><ul><li>引入对应的 taglib</li><li>使用其中的方法</li><li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li></ul><p>c：if</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br><br>&lt;h4&gt;<span class="hljs-keyword">if</span>测试&lt;/h4&gt;<br><br>&lt;hr&gt;<br><br>&lt;form action=<span class="hljs-string">&quot;coreif.jsp&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;%--<br>    EL表达式获取表单中的数据<br>    $&#123;param.参数名&#125;<br>    --%&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.username&#125;&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>&lt;/form&gt;<br><br>&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;isAdmin&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;管理员欢迎您！&quot;</span>/&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br>&lt;%--自闭合标签--%&gt;<br>&lt;c:out value=<span class="hljs-string">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;<br><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>c:choose   c:when</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br><br>&lt;%--定义一个变量score，值为<span class="hljs-number">85</span>--%&gt;<br>&lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;score&quot;</span> value=<span class="hljs-string">&quot;55&quot;</span>/&gt;<br><br>&lt;c:choose&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;<br>        你的成绩为优秀<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;<br>        你的成绩为一般<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;<br>        你的成绩为良好<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;<br>        你的成绩为不及格<br>    &lt;/c:when&gt;<br>&lt;/c:choose&gt;<br><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>c:forEach</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><br>    ArrayList&lt;String&gt; people = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    people.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>    people.add(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;李四&quot;</span>);<br>    people.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;王五&quot;</span>);<br>    people.add(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;赵六&quot;</span>);<br>    people.add(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;田六&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,people);<br>%&gt;<br><br><br>&lt;%--<br><span class="hljs-keyword">var</span> , 每一次遍历出来的变量<br>items, 要遍历的对象<br>begin,   哪里开始<br>end,     到哪里<br>step,   步长<br>--%&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;people&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br><br>&lt;hr&gt;<br><br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;people&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="hljs-string">&quot;1&quot;</span> end=<span class="hljs-string">&quot;3&quot;</span> step=<span class="hljs-string">&quot;1&quot;</span> &gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br><br></code></pre></td></tr></table></figure><h2 id="9、JavaBean"><a href="#9、JavaBean" class="headerlink" title="9、JavaBean"></a>9、JavaBean</h2><p>实体类</p><p>JavaBean有特定的写法：</p><ul><li>必须要有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get&#x2F;set方法；</li></ul><p>一般用来和数据库的字段做映射  ORM；</p><p>ORM ：对象关系映射</p><ul><li>表—&gt;类</li><li>字段–&gt;属性</li><li>行记录—-&gt;对象</li></ul><p><strong>people表</strong></p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>1号</td><td>3</td><td>西安</td></tr><tr><td>2</td><td>2号</td><td>18</td><td>西安</td></tr><tr><td>3</td><td>号</td><td>100</td><td>西安</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String address;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;秦疆1号&quot;</span>,<span class="hljs-number">3</span>，<span class="hljs-string">&quot;西安&quot;</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;秦疆2号&quot;</span>,<span class="hljs-number">3</span>，<span class="hljs-string">&quot;西安&quot;</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;秦疆3号&quot;</span>,<span class="hljs-number">3</span>，<span class="hljs-string">&quot;西安&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>过滤器</li><li>文件上传</li><li>邮件发送</li><li>JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务</li></ul><h2 id="10、MVC三层架构"><a href="#10、MVC三层架构" class="headerlink" title="10、MVC三层架构"></a>10、MVC三层架构</h2><p>什么是MVC：  Model     view     Controller  模型、视图、控制器</p><h3 id="10-1、早些年"><a href="#10-1、早些年" class="headerlink" title="10.1、早些年"></a>10.1、早些年</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090938705.png" alt="1568423664332"></p><p>用户直接访问控制层，控制层就可以直接操作数据库；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">servlet--CRUD--&gt;数据库<br>弊端：程序十分臃肿，不利于维护  <br>servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码<br><br>架构：没有什么是加一层解决不了的！<br>程序猿调用<br>|<br>JDBC<br>|<br>Mysql Oracle SqlServer ....<br></code></pre></td></tr></table></figure><h3 id="10-2、MVC三层架构"><a href="#10-2、MVC三层架构" class="headerlink" title="10.2、MVC三层架构"></a>10.2、MVC三层架构</h3><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090938042.png" alt="1568424227281"></p><p>Model</p><ul><li>业务处理 ：业务逻辑（Service）</li><li>数据持久层：CRUD   （Dao）</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求 （a，form，img…）</li></ul><p>Controller  （Servlet）</p><ul><li><p>接收用户的请求 ：（req：请求参数、Session信息….）</p></li><li><p>交给业务层处理对应的代码 </p></li><li><p>控制视图的跳转  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库<br></code></pre></td></tr></table></figure></li></ul><h2 id="11、Filter-（重点）"><a href="#11、Filter-（重点）" class="headerlink" title="11、Filter （重点）"></a>11、Filter （重点）</h2><p>Filter：过滤器 ，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登录验证….</li></ul><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090938609.png" alt="1568424858708"></p><p>Filter开发步骤：</p><ol><li><p>导包</p></li><li><p>编写过滤器</p><ol><li><p>导包不要错</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090939645.png" alt="1568425162525"></p><p>实现Filter接口，重写对应的方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-comment">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//Chain : 链</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span><br><span class="hljs-comment">    2. 必须要让过滤器继续同行</span><br><span class="hljs-comment">        chain.doFilter(request,response);</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter执行前....&quot;</span>);<br>        chain.doFilter(request,response); <span class="hljs-comment">//让我们的请求继续走，如果不写，程序到这里就被拦截停止！</span><br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter执行后....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//销毁：web服务器关闭的时候，过滤会销毁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter销毁&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol></li><li><p>在web.xml中配置 Filter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.kuang.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servlet/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="12、监听器"><a href="#12、监听器" class="headerlink" title="12、监听器"></a>12、监听器</h2><p>实现一个监听器的接口；（有N种）</p><ol><li><p>编写一个监听器</p><p>实现监听器的接口…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//统计网站在线人数 ： 统计session</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OnlineCountListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionListener</span> &#123;<br><br>    <span class="hljs-comment">//创建session监听： 看你的一举一动</span><br>    <span class="hljs-comment">//一旦创建Session就会触发一次这个事件！</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionCreated</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> se.getSession().getServletContext();<br><br>        System.out.println(se.getSession().getId());<br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer) ctx.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (onlineCount==<span class="hljs-literal">null</span>)&#123;<br>            onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> onlineCount.intValue();<br>            onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(count+<span class="hljs-number">1</span>);<br>        &#125;<br><br>        ctx.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,onlineCount);<br><br>    &#125;<br><br>    <span class="hljs-comment">//销毁session监听</span><br>    <span class="hljs-comment">//一旦销毁Session就会触发一次这个事件！</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> se.getSession().getServletContext();<br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer) ctx.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (onlineCount==<span class="hljs-literal">null</span>)&#123;<br>            onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">0</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> onlineCount.intValue();<br>            onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(count-<span class="hljs-number">1</span>);<br>        &#125;<br><br>        ctx.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,onlineCount);<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Session销毁：</span><br><span class="hljs-comment">    1. 手动销毁  getSession().invalidate();</span><br><span class="hljs-comment">    2. 自动销毁</span><br><span class="hljs-comment">     */</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>web.xml中注册监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册监听器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.kuang.listener.OnlineCountListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>看情况是否使用！</p></li></ol><h2 id="13、过滤器、监听器常见应用"><a href="#13、过滤器、监听器常见应用" class="headerlink" title="13、过滤器、监听器常见应用"></a>13、过滤器、监听器常见应用</h2><p><strong>监听器：GUI编程中经常使用；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPanel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;中秋节快乐&quot;</span>);  <span class="hljs-comment">//新建一个窗体</span><br>        <span class="hljs-type">Panel</span> <span class="hljs-variable">panel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">//面板</span><br>        frame.setLayout(<span class="hljs-literal">null</span>); <span class="hljs-comment">//设置窗体的布局</span><br><br>        frame.setBounds(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>,<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>        frame.setBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)); <span class="hljs-comment">//设置背景颜色</span><br><br>        panel.setBounds(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">300</span>,<span class="hljs-number">300</span>);<br>        panel.setBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>)); <span class="hljs-comment">//设置背景颜色</span><br><br>        frame.add(panel);<br><br>        frame.setVisible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//监听事件，监听关闭事件</span><br>        frame.addWindowListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br>                <span class="hljs-built_in">super</span>.windowClosing(e);<br>            &#125;<br>        &#125;);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p><ol><li><p>用户登录之后，向Sesison中放入用户的数据</p></li><li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) req;<br><span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (HttpServletResponse) resp;<br><br><span class="hljs-keyword">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class="hljs-literal">null</span>)&#123;<br>    response.sendRedirect(<span class="hljs-string">&quot;/error.jsp&quot;</span>);<br>&#125;<br><br>chain.doFilter(request,response);<br></code></pre></td></tr></table></figure></li></ol><h2 id="14、JDBC"><a href="#14、JDBC" class="headerlink" title="14、JDBC"></a>14、JDBC</h2><p>什么是JDBC ： Java连接数据库！</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090939509.png" alt="1568439601825"></p><p>需要jar包的支持：</p><ul><li>java.sql</li><li>javax.sql</li><li>mysql-conneter-java…  连接驱动（必须要导入）</li></ul><p><strong>实验环境搭建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users(<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br>    `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">60</span>),<br>    birthday <span class="hljs-type">DATE</span><br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users(id,`name`,`password`,email,birthday)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;zs@qq.com&#x27;</span>,<span class="hljs-string">&#x27;2000-01-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users(id,`name`,`password`,email,birthday)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;ls@qq.com&#x27;</span>,<span class="hljs-string">&#x27;2000-01-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users(id,`name`,`password`,email,birthday)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;ww@qq.com&#x27;</span>,<span class="hljs-string">&#x27;2000-01-01&#x27;</span>);<br><br><br><span class="hljs-keyword">SELECT</span><span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users;<br><br></code></pre></td></tr></table></figure><p>导入数据库依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mysql的驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>IDEA中连接数据库：</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090939602.png" alt="1568440926845"></p><p><strong>JDBC 固定步骤：</strong></p><ol><li>加载驱动</li><li>连接数据库,代表数据库</li><li>向数据库发送SQL的对象Statement : CRUD</li><li>编写SQL （根据业务，不同的SQL）</li><li>执行SQL</li><li>关闭连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJdbc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;<br>        <span class="hljs-comment">//配置信息</span><br>        <span class="hljs-comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span><br>        String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><br>        <span class="hljs-comment">//1.加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//2.连接数据库,代表数据库</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br><br>        <span class="hljs-comment">//4.编写SQL</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users&quot;</span>;<br><br>        <span class="hljs-comment">//5.执行查询SQL，返回一个 ResultSet  ： 结果集</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br><br>        <span class="hljs-keyword">while</span> (rs.next())&#123;<br>            System.out.println(<span class="hljs-string">&quot;id=&quot;</span>+rs.getObject(<span class="hljs-string">&quot;id&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+rs.getObject(<span class="hljs-string">&quot;name&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;password=&quot;</span>+rs.getObject(<span class="hljs-string">&quot;password&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;email=&quot;</span>+rs.getObject(<span class="hljs-string">&quot;email&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;birthday=&quot;</span>+rs.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));<br>        &#125;<br><br>        <span class="hljs-comment">//6.关闭连接，释放资源（一定要做） 先开后关</span><br>        rs.close();<br>        statement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>预编译SQL</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJDBC2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//配置信息</span><br>        <span class="hljs-comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span><br>        String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><br>        <span class="hljs-comment">//1.加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//2.连接数据库,代表数据库</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//3.编写SQL</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;</span>;<br><br>        <span class="hljs-comment">//4.预编译</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br><br>        preparedStatement.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//给第一个占位符？ 的值赋值为1；</span><br>        preparedStatement.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;狂神说Java&quot;</span>);<span class="hljs-comment">//给第二个占位符？ 的值赋值为狂神说Java；</span><br>        preparedStatement.setString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;123456&quot;</span>);<span class="hljs-comment">//给第三个占位符？ 的值赋值为123456；</span><br>        preparedStatement.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;24736743@qq.com&quot;</span>);<span class="hljs-comment">//给第四个占位符？ 的值赋值为1；</span><br>        preparedStatement.setDate(<span class="hljs-number">5</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Date().getTime()));<span class="hljs-comment">//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；</span><br><br>        <span class="hljs-comment">//5.执行SQL</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> preparedStatement.executeUpdate();<br><br>        <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;插入成功@&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//6.关闭连接，释放资源（一定要做） 先开后关</span><br>        preparedStatement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>事务</strong></p><p>要么都成功，要么都失败！</p><p>ACID原则：保证数据的安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">开启事务<br>事务提交  commit()<br>事务回滚  rollback()<br>关闭事务<br><br>转账：<br>A:<span class="hljs-number">1000</span><br>B:<span class="hljs-number">1000</span><br>    <br>A(<span class="hljs-number">900</span>)   --<span class="hljs-number">100</span>--&gt;   B(<span class="hljs-number">1100</span>) <br></code></pre></td></tr></table></figure><p><strong>Junit单元测试</strong></p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--单元测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>简单使用</p><p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090939874.png" alt="1568442261610"></p><p>失败的时候是红色：</p><p><img src="https://jeremy233.oss-cn-beijing.aliyuncs.com/img1/202206090939672.png" alt="1568442289597"></p><p><strong>搭建一个环境</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> account(<br>   id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>   `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br>   money <span class="hljs-type">FLOAT</span><br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account(`name`,money) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account(`name`,money) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account(`name`,money) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//配置信息</span><br>    <span class="hljs-comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span><br>    String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//1.加载驱动</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//2.连接数据库,代表数据库</span><br>         connection = DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//3.通知数据库开启事务,false 开启</span><br>        connection.setAutoCommit(<span class="hljs-literal">false</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = money-100 where name = &#x27;A&#x27;&quot;</span>;<br>        connection.prepareStatement(sql).executeUpdate();<br><br>        <span class="hljs-comment">//制造错误</span><br>        <span class="hljs-comment">//int i = 1/0;</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;<br>        connection.prepareStatement(sql2).executeUpdate();<br><br>        connection.commit();<span class="hljs-comment">//以上两条SQL都执行成功了，就提交事务！</span><br>        System.out.println(<span class="hljs-string">&quot;success&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//如果出现异常，就通知数据库回滚事务</span><br>            connection.rollback();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e1) &#123;<br>            e1.printStackTrace();<br>        &#125;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>BluePrint</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
